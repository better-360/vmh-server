{
  "openapi": "3.0.0",
  "paths": {
    "/api/health": {
      "get": {
        "operationId": "HealthController_check",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/auth/redirect-link": {
      "get": {
        "operationId": "AuthController_authRedirect",
        "parameters": [
          {
            "name": "redirect",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/sign-in": {
      "post": {
        "operationId": "AuthController_signIn",
        "summary": "Sign in",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/refresh-token": {
      "post": {
        "operationId": "AuthController_refreshToken",
        "summary": "Generate new acces token with using refresh token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/request-reset-password": {
      "post": {
        "operationId": "AuthController_requestPasswordReset",
        "summary": "Create pasword reset request",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/verify-reset-token": {
      "post": {
        "operationId": "AuthController_VerifyResetToken",
        "summary": "Verify password reset token",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/request-email-verify": {
      "post": {
        "operationId": "AuthController_requestEmailVerify",
        "summary": "Create email verify request",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/verify-email-token": {
      "post": {
        "operationId": "AuthController_verifyEmailToken",
        "summary": "Verify email  verify token",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/reset-password": {
      "post": {
        "operationId": "AuthController_ResetPasswordConfirm",
        "summary": "Completes the password reset process by setting a new password.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/check-email": {
      "post": {
        "operationId": "AuthController_checkEmail",
        "summary": "Checks email address exists",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckEmailisExistDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/change-my-password": {
      "post": {
        "operationId": "AuthController_changePassword",
        "summary": "Change Password",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/user/me": {
      "get": {
        "operationId": "UserController_getMe",
        "summary": "Mevcut oturum açmış kullanıcının bilgilerini getirir",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/user/context": {
      "get": {
        "operationId": "UserController_getContext",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UserController_setContext",
        "summary": "Kullanıcının aktif contextini günceller",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetActiveContextDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/user/update-me": {
      "post": {
        "operationId": "UserController_updateUser",
        "summary": "Kullanıcı bilgilerini günceller",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/user/delete-me": {
      "delete": {
        "operationId": "UserController_deleteUser",
        "summary": "Mevcut oturum açmış kullanıcıyı siler",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/user/update-email": {
      "post": {
        "operationId": "UserController_updateEmail",
        "summary": "Kullanıcı e-posta adresini günceller",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeEmailDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "User Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/customer/workspace/{workspaceId}/mailboxes": {
      "get": {
        "operationId": "CustomerController_findByWorkspace",
        "summary": "Get mailboxes by workspace",
        "parameters": [
          {
            "name": "workspaceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace mailboxes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailboxResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Customer Operations"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/customer/mails": {
      "get": {
        "operationId": "CustomerController_getMails",
        "summary": "Get all packages",
        "description": "Retrieve a paginated list of all packages with filtering options",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "receivedAtEnd",
            "required": false,
            "in": "query",
            "description": "Filter by received date end (YYYY-MM-DD)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "receivedAtStart",
            "required": false,
            "in": "query",
            "description": "Filter by received date start (YYYY-MM-DD)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isForwarded",
            "required": false,
            "in": "query",
            "description": "Filter by forwarded status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isShereded",
            "required": false,
            "in": "query",
            "description": "Filter by shredded status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "carrier",
            "required": false,
            "in": "query",
            "description": "Filter by carrier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "senderName",
            "required": false,
            "in": "query",
            "description": "Filter by sender name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steNumber",
            "required": false,
            "in": "query",
            "description": "Filter by STE number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "enum": [
                "PENDING",
                "FORWARDED",
                "SHREDDED",
                "COMPLETED",
                "CANCELLED",
                "IN_PROCESS"
              ],
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by package type",
            "schema": {
              "enum": [
                "BANK_CHECK",
                "LEGAL_DOCUMENT",
                "ENVELOPE",
                "PACKAGE",
                "OTHER"
              ],
              "type": "string"
            }
          },
          {
            "name": "workspaceAddressId",
            "required": false,
            "in": "query",
            "description": "Filter by workspace address ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PackageResponseDto"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Customer Operations"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/workspaces/{id}": {
      "get": {
        "operationId": "WorkspaceController_getWorkspaceById",
        "summary": "Workspace detayını getirir",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace detayı başarıyla alındı"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "WorkspaceController_deleteWorkspace",
        "summary": "Workspace'i siler",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace başarıyla silindi"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/workspaces/{id}/members": {
      "get": {
        "operationId": "WorkspaceController_getWorkspaceMembers",
        "summary": "Workspace üyelerini listeler",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace üyeleri başarıyla alındı"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "WorkspaceController_addWorkspaceMember",
        "summary": "Workspace'e üye ekler",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkspaceMemberDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Üye başarıyla eklendi"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/workspaces/{id}/members/{memberId}": {
      "put": {
        "operationId": "WorkspaceController_updateWorkspaceMember",
        "summary": "Workspace üyesini günceller",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkspaceMemberDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Üye başarıyla güncellendi"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "WorkspaceController_removeWorkspaceMember",
        "summary": "Workspace'ten üye çıkarır",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Üye başarıyla çıkarıldı"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/stats": {
      "get": {
        "operationId": "AdminMainController_getAdminStats",
        "summary": "Admin Panel İstatistikleri",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin Panel"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/create-workspace-and-mailbox": {
      "post": {
        "operationId": "AdminMainController_createWorkspaceAndMailbox",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInitialSubscriptionOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Admin Panel"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/support/tickets": {
      "get": {
        "operationId": "AdminSupportController_getTickets",
        "summary": "Tüm destek biletlerini getirir (Sadece ADMIN)",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin - Support Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/ticket/{id}/details": {
      "get": {
        "operationId": "AdminSupportController_getTicket",
        "summary": "Belirtilen destek biletinin detaylarını getirir (Sadece ADMIN)",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin - Support Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/support/add-message-to-ticket": {
      "post": {
        "operationId": "AdminSupportController_addMessageToTicket",
        "summary": "Bir destek biletine yetkili tarafından mesaj ekler (Sadece ADMIN)",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketMessageDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Admin - Support Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/ticket/{ticketId}/edit": {
      "post": {
        "operationId": "AdminSupportController_editTicket",
        "summary": "Bir destek biletinin durumunu günceller (Sadece ADMIN)",
        "parameters": [
          {
            "name": "ticketId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditTicketStatusDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Admin - Support Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/locations/all": {
      "get": {
        "operationId": "AdminLocationController_getAllOfficeLocations",
        "summary": "Get all office locations with filters and pagination",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by label, city, or state",
            "schema": {
              "example": "NYC",
              "type": "string"
            }
          },
          {
            "name": "country",
            "required": false,
            "in": "query",
            "description": "Filter by country",
            "schema": {
              "example": "United States",
              "type": "string"
            }
          },
          {
            "name": "state",
            "required": false,
            "in": "query",
            "description": "Filter by state",
            "schema": {
              "example": "NY",
              "type": "string"
            }
          },
          {
            "name": "city",
            "required": false,
            "in": "query",
            "description": "Filter by city",
            "schema": {
              "example": "New York",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of office locations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OfficeLocationResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Office Locations"
        ]
      }
    },
    "/api/admin/locations/active": {
      "get": {
        "operationId": "AdminLocationController_getActiveOfficeLocations",
        "summary": "Get all active office locations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Active office locations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OfficeLocationResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Office Locations"
        ]
      }
    },
    "/api/admin/locations/{id}": {
      "get": {
        "operationId": "AdminLocationController_getOfficeLocationById",
        "summary": "Get office location by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Office location retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfficeLocationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Office location not found"
          }
        },
        "tags": [
          "Admin Office Locations"
        ]
      },
      "put": {
        "operationId": "AdminLocationController_updateOfficeLocation",
        "summary": "Update office location",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOfficeLocationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Office location updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfficeLocationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Office location not found"
          },
          "409": {
            "description": "Office location with this label already exists"
          }
        },
        "tags": [
          "Admin Office Locations"
        ]
      },
      "delete": {
        "operationId": "AdminLocationController_deleteOfficeLocation",
        "summary": "Delete office location (soft delete)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Office location deleted successfully"
          },
          "400": {
            "description": "Cannot delete location with active plans or addresses"
          },
          "404": {
            "description": "Office location not found"
          }
        },
        "tags": [
          "Admin Office Locations"
        ]
      }
    },
    "/api/admin/locations/{id}/stats": {
      "get": {
        "operationId": "AdminLocationController_getLocationStats",
        "summary": "Get office location statistics",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Office location statistics retrieved successfully"
          },
          "404": {
            "description": "Office location not found"
          }
        },
        "tags": [
          "Admin Office Locations"
        ]
      }
    },
    "/api/admin/locations": {
      "post": {
        "operationId": "AdminLocationController_createOfficeLocation",
        "summary": "Create a new office location",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOfficeLocationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Office location created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfficeLocationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Office location with this label already exists"
          }
        },
        "tags": [
          "Admin Office Locations"
        ]
      }
    },
    "/api/admin/plans/all": {
      "get": {
        "operationId": "AdminPlansController_getPlans",
        "summary": "Get all plans",
        "description": "Retrieve a paginated list of all plans with their prices and features",
        "parameters": [
          {
            "name": "officeLocationId",
            "required": false,
            "in": "query",
            "description": "Filter by office location ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in plan name and description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Plans Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plans/active": {
      "get": {
        "operationId": "AdminPlansController_getActivePlansWithPrices",
        "summary": "Get active plans with prices",
        "description": "Retrieve all active plans with their associated prices and features",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Active plans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "prices": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "features": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Plans Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plans/{id}": {
      "get": {
        "operationId": "AdminPlansController_getPlanById",
        "summary": "Get plan by ID",
        "description": "Retrieve detailed information about a specific plan including prices and features",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Plan not found"
          }
        },
        "tags": [
          "Admin Plans Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "AdminPlansController_updatePlan",
        "summary": "Update an existing plan",
        "description": "Update plan properties such as name, description, or active status",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Plan update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlanDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plan updated successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Plan not found"
          },
          "409": {
            "description": "Plan with this slug already exists for this location"
          }
        },
        "tags": [
          "Admin Plans Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AdminPlansController_deletePlan",
        "summary": "Delete a plan",
        "description": "Soft delete a plan and all its associated features and prices",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan deleted successfully"
          },
          "400": {
            "description": "Failed to delete plan"
          },
          "404": {
            "description": "Plan not found"
          }
        },
        "tags": [
          "Admin Plans Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plans/create": {
      "post": {
        "operationId": "AdminPlansController_createPlan",
        "summary": "Create a new plan",
        "description": "Create a new subscription plan with name, description and other properties",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Plan creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlanDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Plan created successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "409": {
            "description": "Plan with this slug already exists for this location"
          }
        },
        "tags": [
          "Admin Plans Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plans/create-with-features": {
      "post": {
        "operationId": "AdminPlansController_createPlanWithFeatures",
        "summary": "Create a complete plan with features and prices",
        "description": "Create a new subscription plan with all features and pricing options in one request",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Complete plan creation data with features and prices",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlanWithFeaturesDto"
              },
              "examples": {
                "Premium Business Plan": {
                  "value": {
                    "officeLocationId": "123e4567-e89b-12d3-a456-426614174000",
                    "name": "Premium Business Plan",
                    "slug": "premium-business",
                    "description": "Comprehensive business plan with advanced features",
                    "imageUrl": "https://example.com/premium-plan.png",
                    "isActive": true,
                    "features": [
                      {
                        "featureId": "be2294ec-a909-462f-a81c-276d6ebbfb58",
                        "includedLimit": 10,
                        "unitPrice": 500,
                        "isActive": true
                      },
                      {
                        "featureId": "5e37ea6d-cba2-4413-8209-57b3b2a77035",
                        "includedLimit": null,
                        "unitPrice": null,
                        "isActive": true
                      }
                    ],
                    "prices": [
                      {
                        "billingCycle": "MONTHLY",
                        "amount": 4999,
                        "currency": "USD",
                        "description": "Monthly subscription"
                      },
                      {
                        "billingCycle": "YEARLY",
                        "amount": 49999,
                        "currency": "USD",
                        "description": "Annual subscription (save 17%)"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Plan with features and prices created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "officeLocation": {
                      "type": "object"
                    },
                    "features": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "featureId": {
                            "type": "string"
                          },
                          "includedLimit": {
                            "type": "number",
                            "nullable": true
                          },
                          "unitPrice": {
                            "type": "number",
                            "nullable": true
                          },
                          "feature": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "prices": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "billingCycle": {
                            "type": "string"
                          },
                          "amount": {
                            "type": "number"
                          },
                          "currency": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or features not found"
          },
          "404": {
            "description": "Office location not found"
          },
          "409": {
            "description": "Plan with this slug already exists for this location"
          }
        },
        "tags": [
          "Admin Plans Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plans/plan-prices/all": {
      "get": {
        "operationId": "AdminPlansController_getPlanPrices",
        "summary": "Get plan prices",
        "description": "Retrieve plan prices with optional filtering by plan, billing cycle, or currency",
        "parameters": [
          {
            "name": "currency",
            "required": false,
            "in": "query",
            "description": "Filter by currency code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "billingCycle",
            "required": false,
            "in": "query",
            "description": "Filter by billing cycle (monthly, yearly, etc.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planId",
            "required": false,
            "in": "query",
            "description": "Filter by plan ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan prices retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "planId": {
                        "type": "string"
                      },
                      "amount": {
                        "type": "number"
                      },
                      "currency": {
                        "type": "string"
                      },
                      "billingCycle": {
                        "type": "string"
                      },
                      "plan": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Plans Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plans/plan-prices/{id}": {
      "get": {
        "operationId": "AdminPlansController_getPlanPriceById",
        "summary": "Get plan price by ID",
        "description": "Retrieve detailed information about a specific plan price",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan Price ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan price retrieved successfully"
          },
          "404": {
            "description": "Plan price not found"
          }
        },
        "tags": [
          "Admin Plans Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "AdminPlansController_updatePlanPrice",
        "summary": "Update plan price",
        "description": "Update plan price properties such as amount, currency, or billing cycle",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan Price ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Plan price update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlanPriceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plan price updated successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Plan price not found"
          }
        },
        "tags": [
          "Admin Plans Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AdminPlansController_deletePlanPrice",
        "summary": "Delete plan price",
        "description": "Soft delete a plan price configuration",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan Price ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan price deleted successfully"
          },
          "400": {
            "description": "Failed to delete plan price"
          },
          "404": {
            "description": "Plan price not found"
          }
        },
        "tags": [
          "Admin Plans Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plans/plan-prices": {
      "post": {
        "operationId": "AdminPlansController_createPlanPrice",
        "summary": "Create plan price",
        "description": "Add a new price configuration for a plan with specific billing cycle and currency",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Plan price creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlanPriceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Plan price created successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Plan not found"
          },
          "409": {
            "description": "Price for this plan and billing cycle already exists"
          }
        },
        "tags": [
          "Admin Plans Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plans/{planId}/addons": {
      "get": {
        "operationId": "AdminPlansController_getAddonsByPlanId",
        "summary": "Get addons for a specific plan",
        "description": "Retrieve all addons associated with a specific plan, formatted for easy consumption",
        "parameters": [
          {
            "name": "planId",
            "required": true,
            "in": "path",
            "description": "Plan ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan addons retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AddonResponseDto"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "planAddonConfig": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "isIncludedInPlan": {
                                "type": "boolean"
                              },
                              "discountPercent": {
                                "type": "number"
                              },
                              "isRequired": {
                                "type": "boolean"
                              },
                              "displayOrder": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Plans Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plan-addons/assign": {
      "post": {
        "operationId": "PlanAddonsController_addAddon",
        "summary": "Add addon to plan",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlanAddonDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Addon added to plan successfully"
          },
          "404": {
            "description": "Plan or addon not found"
          }
        },
        "tags": [
          "Admin Plan Addon Management"
        ]
      }
    },
    "/api/admin/plan-addons/plan/{id}": {
      "get": {
        "operationId": "PlanAddonsController_getAddons",
        "summary": "Get addons by plan ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Addons retrieved successfully"
          },
          "404": {
            "description": "Addons not found"
          }
        },
        "tags": [
          "Admin Plan Addon Management"
        ]
      }
    },
    "/api/admin/plan-addons/{id}": {
      "patch": {
        "operationId": "PlanAddonsController_updateAddon",
        "summary": "Update addon",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlanAddonDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Addon updated successfully"
          },
          "404": {
            "description": "Addon not found"
          }
        },
        "tags": [
          "Admin Plan Addon Management"
        ]
      },
      "delete": {
        "operationId": "PlanAddonsController_deleteAddon",
        "summary": "Delete addon",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Addon deleted successfully"
          },
          "404": {
            "description": "Addon not found"
          }
        },
        "tags": [
          "Admin Plan Addon Management"
        ]
      }
    },
    "/api/admin/features/all": {
      "get": {
        "operationId": "AdminFeaturesController_getFeatures",
        "parameters": [
          {
            "name": "search",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/features/{id}": {
      "get": {
        "operationId": "AdminFeaturesController_getFeatureById",
        "summary": "Get feature by ID",
        "description": "Retrieve detailed information about a specific feature",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Feature ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feature retrieved successfully"
          },
          "404": {
            "description": "Feature not found"
          }
        },
        "tags": [
          "Admin Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/features/create": {
      "post": {
        "operationId": "AdminFeaturesController_createFeature",
        "summary": "Create a new feature",
        "description": "Create a new feature with name, description and other properties",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Feature creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFeatureDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Feature created successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "409": {
            "description": "Feature with this name already exists"
          }
        },
        "tags": [
          "Admin Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/features/{id}/update": {
      "put": {
        "operationId": "AdminFeaturesController_updateFeature",
        "summary": "Update an existing feature",
        "description": "Update feature properties such as name, description, or active status",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Feature ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Feature update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFeatureDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Feature updated successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Feature not found"
          },
          "409": {
            "description": "Feature with this name already exists"
          }
        },
        "tags": [
          "Admin Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/features/{id}/delete": {
      "delete": {
        "operationId": "AdminFeaturesController_deleteFeature",
        "summary": "Delete a feature",
        "description": "Soft delete a feature and all its associated plan features",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Feature ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feature deleted successfully"
          },
          "400": {
            "description": "Failed to delete feature"
          },
          "404": {
            "description": "Feature not found"
          }
        },
        "tags": [
          "Admin Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plan-features": {
      "get": {
        "operationId": "PlanFeaturesController_getPlanFeatures",
        "summary": "Get plan features",
        "description": "Retrieve plan-feature relationships with optional filtering by plan or feature",
        "parameters": [
          {
            "name": "featureId",
            "required": false,
            "in": "query",
            "description": "Filter by feature ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planId",
            "required": false,
            "in": "query",
            "description": "Filter by plan ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan features retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "planId": {
                        "type": "string"
                      },
                      "featureId": {
                        "type": "string"
                      },
                      "includedLimit": {
                        "type": "number"
                      },
                      "unitPrice": {
                        "type": "number"
                      },
                      "plan": {
                        "type": "object"
                      },
                      "feature": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Plan Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "PlanFeaturesController_createPlanFeature",
        "summary": "Add feature to plan",
        "description": "Create a new plan-feature relationship with limits and pricing",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Plan feature creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlanFeatureDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Feature added to plan successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Plan or feature not found"
          },
          "409": {
            "description": "This feature is already added to the plan"
          }
        },
        "tags": [
          "Admin Plan Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plan-features/{id}": {
      "put": {
        "operationId": "PlanFeaturesController_updatePlanFeature",
        "summary": "Update plan feature",
        "description": "Update plan-feature relationship properties like limits and pricing",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan Feature ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Plan feature update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlanFeatureDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plan feature updated successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Plan feature not found"
          }
        },
        "tags": [
          "Admin Plan Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "PlanFeaturesController_deletePlanFeature",
        "summary": "Remove feature from plan",
        "description": "Soft delete a plan-feature relationship",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan Feature ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feature removed from plan successfully"
          },
          "400": {
            "description": "Failed to remove feature from plan"
          },
          "404": {
            "description": "Plan feature not found"
          }
        },
        "tags": [
          "Admin Plan Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plan-features/bulk-create": {
      "post": {
        "operationId": "PlanFeaturesController_bulkCreatePlanFeatures",
        "summary": "Bulk add features to plan",
        "description": "Add multiple features to a plan in a single transaction",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Bulk plan features creation data",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Features added to plan successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Plan or one or more features not found"
          },
          "409": {
            "description": "Some features are already added to this plan"
          }
        },
        "tags": [
          "Admin Plan Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plan-features/bulk-update": {
      "put": {
        "operationId": "PlanFeaturesController_bulkUpdatePlanFeatures",
        "summary": "Bulk update plan features",
        "description": "Update multiple plan-feature relationships in a single transaction",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Bulk plan features update data",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plan features updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "One or more plan features not found"
          }
        },
        "tags": [
          "Admin Plan Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/products": {
      "post": {
        "operationId": "AdminProductController_create",
        "summary": "Create a new product",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Admin Product Management"
        ]
      },
      "get": {
        "operationId": "AdminProductController_findAll",
        "summary": "Get all products",
        "parameters": [
          {
            "name": "type",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "ADDON",
                "PRODUCT",
                "OTHER"
              ],
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Products retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Product Management"
        ]
      }
    },
    "/api/admin/products/addons": {
      "get": {
        "operationId": "AdminProductController_findAddons",
        "summary": "Get all addon products",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Addon products retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Product Management"
        ]
      }
    },
    "/api/admin/products/products": {
      "get": {
        "operationId": "AdminProductController_findProducts",
        "summary": "Get all standalone products",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Standalone products retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Product Management"
        ]
      }
    },
    "/api/admin/products/{id}": {
      "get": {
        "operationId": "AdminProductController_findOne",
        "summary": "Get product by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          }
        },
        "tags": [
          "Admin Product Management"
        ]
      },
      "patch": {
        "operationId": "AdminProductController_update",
        "summary": "Update product",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          }
        },
        "tags": [
          "Admin Product Management"
        ]
      },
      "delete": {
        "operationId": "AdminProductController_deleteProduct",
        "summary": "Soft delete product",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "tags": [
          "Admin Product Management"
        ]
      }
    },
    "/api/admin/prices/{productId}": {
      "post": {
        "operationId": "AdminPriceController_create",
        "summary": "Create a new price",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePriceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Price created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Admin Price Management"
        ]
      }
    },
    "/api/admin/prices": {
      "get": {
        "operationId": "AdminPriceController_findAll",
        "summary": "Get all prices",
        "parameters": [
          {
            "name": "productId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Prices retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PriceResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Price Management"
        ]
      }
    },
    "/api/admin/prices/product/{productId}": {
      "get": {
        "operationId": "AdminPriceController_findByProduct",
        "summary": "Get prices by product ID",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product prices retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PriceResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Price Management"
        ]
      }
    },
    "/api/admin/prices/{id}": {
      "get": {
        "operationId": "AdminPriceController_findOne",
        "summary": "Get price by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Price retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Price not found"
          }
        },
        "tags": [
          "Admin Price Management"
        ]
      },
      "delete": {
        "operationId": "AdminPriceController_deletePrice",
        "summary": "Soft delete price",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Price deleted successfully"
          },
          "404": {
            "description": "Price not found"
          }
        },
        "tags": [
          "Admin Price Management"
        ]
      }
    },
    "/api/admin/prices/{id}/set-default": {
      "patch": {
        "operationId": "AdminPriceController_setAsDefault",
        "summary": "Set price as default for its product",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Price set as default successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Price not found"
          }
        },
        "tags": [
          "Admin Price Management"
        ]
      }
    },
    "/api/admin/shipping/speeds": {
      "post": {
        "operationId": "AdminShippingSpeedController_create",
        "summary": "Create a new shipping speed option",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShippingSpeedDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Shipping speed option created."
          },
          "400": {
            "description": "Invalid payload."
          }
        },
        "tags": [
          "Admin Shipping Speeds"
        ]
      },
      "get": {
        "operationId": "AdminShippingSpeedController_findAll",
        "summary": "List all active shipping speed options",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of shipping speeds."
          }
        },
        "tags": [
          "Admin Shipping Speeds"
        ]
      }
    },
    "/api/admin/shipping/speeds/{id}": {
      "put": {
        "operationId": "AdminShippingSpeedController_update",
        "summary": "Update a shipping speed option by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the shipping speed option",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShippingSpeedDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shipping speed option updated."
          },
          "404": {
            "description": "Option not found."
          }
        },
        "tags": [
          "Admin Shipping Speeds"
        ]
      },
      "delete": {
        "operationId": "AdminShippingSpeedController_remove",
        "summary": "Soft delete a shipping speed option by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the shipping speed option",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shipping speed option removed."
          },
          "404": {
            "description": "Option not found."
          }
        },
        "tags": [
          "Admin Shipping Speeds"
        ]
      }
    },
    "/api/admin/shipping/speeds/assign": {
      "post": {
        "operationId": "AdminShippingSpeedController_assign",
        "summary": "Assign a shipping speed to a location",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignShippingSpeedToLocationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Assignment created."
          },
          "400": {
            "description": "Invalid assignment data."
          }
        },
        "tags": [
          "Admin Shipping Speeds"
        ]
      }
    },
    "/api/admin/shipping/speeds/remove-location/{id}": {
      "delete": {
        "operationId": "AdminShippingSpeedController_removeFromLocation",
        "summary": "Remove a shipping speed from a location",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "RelationID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment removed."
          },
          "404": {
            "description": "Assignment not found."
          }
        },
        "tags": [
          "Admin Shipping Speeds"
        ]
      }
    },
    "/api/admin/shipping/speeds/location/{locationId}": {
      "get": {
        "operationId": "AdminShippingSpeedController_findAssigned",
        "summary": "List active shipping speeds for a location",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of speeds."
          }
        },
        "tags": [
          "Admin Shipping Speeds"
        ]
      }
    },
    "/api/admin/shipping/carriers": {
      "post": {
        "operationId": "AdminCarrierController_create",
        "summary": "Create a new carrier",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCarrierDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Carrier created."
          },
          "400": {
            "description": "Invalid payload."
          }
        },
        "tags": [
          "Admin Carriers Management"
        ]
      },
      "get": {
        "operationId": "AdminCarrierController_findAll",
        "summary": "List all active carriers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of carriers."
          }
        },
        "tags": [
          "Admin Carriers Management"
        ]
      }
    },
    "/api/admin/shipping/carriers/{id}": {
      "put": {
        "operationId": "AdminCarrierController_update",
        "summary": "Update a carrier by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the carrier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCarrierDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Carrier updated."
          },
          "404": {
            "description": "Carrier not found."
          }
        },
        "tags": [
          "Admin Carriers Management"
        ]
      },
      "delete": {
        "operationId": "AdminCarrierController_remove",
        "summary": "Soft delete a carrier by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the carrier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Carrier removed."
          },
          "404": {
            "description": "Carrier not found."
          }
        },
        "tags": [
          "Admin Carriers Management"
        ]
      }
    },
    "/api/admin/shipping/carriers/location/{locationId}": {
      "get": {
        "operationId": "AdminCarrierController_findAssigned",
        "summary": "List active carriers for a location",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of carriers."
          }
        },
        "tags": [
          "Admin Carriers Management"
        ]
      }
    },
    "/api/admin/shipping/carriers/assign/{locationId}/{carrierId}": {
      "post": {
        "operationId": "AdminCarrierController_assignToLocation",
        "summary": "Assign a carrier to a location",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "carrierId",
            "required": true,
            "in": "path",
            "description": "Carrier ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Assignment created."
          },
          "400": {
            "description": "Assignment invalid or duplicate."
          }
        },
        "tags": [
          "Admin Carriers Management"
        ]
      }
    },
    "/api/admin/shipping/carriers/remove-location/{id}": {
      "delete": {
        "operationId": "AdminCarrierController_removeFromLocation",
        "summary": "Remove a carrier from a location",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Relation ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment removed."
          },
          "404": {
            "description": "Assignment not found."
          }
        },
        "tags": [
          "Admin Carriers Management"
        ]
      }
    },
    "/api/admin/shipping/packaging": {
      "post": {
        "operationId": "AdminPackagingOptionController_create",
        "summary": "Create a new packaging option",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePackagingOptionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Packaging option created."
          },
          "400": {
            "description": "Invalid payload."
          }
        },
        "tags": [
          "Admin Packaging Options"
        ]
      },
      "get": {
        "operationId": "AdminPackagingOptionController_findAll",
        "summary": "List all active packaging options",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of packaging options."
          }
        },
        "tags": [
          "Admin Packaging Options"
        ]
      }
    },
    "/api/admin/shipping/packaging/{id}": {
      "put": {
        "operationId": "AdminPackagingOptionController_update",
        "summary": "Update a packaging option by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the packaging option",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePackagingOptionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Packaging option updated."
          },
          "404": {
            "description": "Option not found."
          }
        },
        "tags": [
          "Admin Packaging Options"
        ]
      },
      "delete": {
        "operationId": "AdminPackagingOptionController_remove",
        "summary": "Soft delete a packaging option by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the packaging option",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packaging option removed."
          },
          "404": {
            "description": "Option not found."
          }
        },
        "tags": [
          "Admin Packaging Options"
        ]
      }
    },
    "/api/admin/shipping/packaging/assign": {
      "post": {
        "operationId": "AdminPackagingOptionController_assign",
        "summary": "Assign a packaging option to a location",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignPackagingOptionToLocationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Assignment created."
          },
          "400": {
            "description": "Invalid assignment data."
          }
        },
        "tags": [
          "Admin Packaging Options"
        ]
      }
    },
    "/api/admin/shipping/packaging/location/{locationId}/{packagingId}": {
      "delete": {
        "operationId": "AdminPackagingOptionController_removeFromLocation",
        "summary": "Remove a packaging option from a location",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packagingId",
            "required": true,
            "in": "path",
            "description": "Packaging option ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment removed."
          },
          "404": {
            "description": "Assignment not found."
          }
        },
        "tags": [
          "Admin Packaging Options"
        ]
      }
    },
    "/api/admin/shipping/packaging/location/{locationId}": {
      "get": {
        "operationId": "AdminPackagingOptionController_findAssigned",
        "summary": "List active packaging options for a location",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of packaging options."
          }
        },
        "tags": [
          "Admin Packaging Options"
        ]
      }
    },
    "/api/admin/mailboxes": {
      "post": {
        "operationId": "AdminMailboxController_create",
        "summary": "Create a new mailbox",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMailboxDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Mailbox created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailboxResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Admin Mailboxes Management"
        ]
      },
      "get": {
        "operationId": "AdminMailboxController_findAll",
        "summary": "Get all mailboxes",
        "parameters": [
          {
            "name": "workspaceId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "officeLocationId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mailboxes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailboxResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Mailboxes Management"
        ]
      }
    },
    "/api/admin/mailboxes/workspace/{workspaceId}": {
      "get": {
        "operationId": "AdminMailboxController_findByWorkspace",
        "summary": "Get mailboxes by workspace",
        "parameters": [
          {
            "name": "workspaceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace mailboxes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailboxResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Mailboxes Management"
        ]
      }
    },
    "/api/admin/mailboxes/office-location/{officeLocationId}": {
      "get": {
        "operationId": "AdminMailboxController_findByOfficeLocation",
        "summary": "Get mailboxes by office location",
        "parameters": [
          {
            "name": "officeLocationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Office location mailboxes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailboxResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Mailboxes Management"
        ]
      }
    },
    "/api/admin/mailboxes/active": {
      "get": {
        "operationId": "AdminMailboxController_getActiveMailboxes",
        "summary": "Get all active mailboxes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Active mailboxes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailboxResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Mailboxes Management"
        ]
      }
    },
    "/api/admin/mailboxes/{id}": {
      "get": {
        "operationId": "AdminMailboxController_findOne",
        "summary": "Get mailbox by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mailbox retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailboxResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Mailbox not found"
          }
        },
        "tags": [
          "Admin Mailboxes Management"
        ]
      },
      "patch": {
        "operationId": "AdminMailboxController_update",
        "summary": "Update mailbox",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMailboxDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mailbox updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailboxResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Mailbox not found"
          }
        },
        "tags": [
          "Admin Mailboxes Management"
        ]
      },
      "delete": {
        "operationId": "AdminMailboxController_remove",
        "summary": "Deactivate mailbox",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mailbox deactivated successfully"
          },
          "404": {
            "description": "Mailbox not found"
          }
        },
        "tags": [
          "Admin Mailboxes Management"
        ]
      }
    },
    "/api/admin/mailboxes/{id}/feature-usage/{featureId}": {
      "get": {
        "operationId": "AdminMailboxController_checkFeatureUsage",
        "summary": "Check feature usage for mailbox",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feature usage retrieved successfully"
          },
          "404": {
            "description": "Mailbox or feature not found"
          }
        },
        "tags": [
          "Admin Mailboxes Management"
        ]
      }
    },
    "/api/admin/mailboxes/{id}/feature-usage/{featureId}/increment": {
      "post": {
        "operationId": "AdminMailboxController_incrementFeatureUsage",
        "summary": "Increment feature usage for mailbox",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feature usage incremented successfully"
          },
          "404": {
            "description": "Mailbox or feature not found"
          }
        },
        "tags": [
          "Admin Mailboxes Management"
        ]
      }
    },
    "/api/admin/workspaces": {
      "get": {
        "operationId": "AdminWorkspaceController_getAllWorkspaces",
        "summary": "Get all workspaces",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of workspaces retrieved successfully"
          }
        },
        "tags": [
          "Admin Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/workspaces/{id}": {
      "get": {
        "operationId": "AdminWorkspaceController_getWorkspaceById",
        "summary": "Workspace detayını getirir",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace detayı başarıyla alındı"
          }
        },
        "tags": [
          "Admin Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "AdminWorkspaceController_updateWorkspace",
        "summary": "Workspace bilgilerini günceller",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkspaceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workspace başarıyla güncellendi"
          }
        },
        "tags": [
          "Admin Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AdminWorkspaceController_deleteWorkspace",
        "summary": "Workspace'i siler",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace başarıyla silindi"
          }
        },
        "tags": [
          "Admin Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/workspaces/{id}/members": {
      "get": {
        "operationId": "AdminWorkspaceController_getWorkspaceMembers",
        "summary": "Workspace üyelerini listeler",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace üyeleri başarıyla alındı"
          }
        },
        "tags": [
          "Admin Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "AdminWorkspaceController_addWorkspaceMember",
        "summary": "Workspace'e üye ekler",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkspaceMemberDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Üye başarıyla eklendi"
          }
        },
        "tags": [
          "Admin Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/workspaces/{id}/members/{memberId}": {
      "put": {
        "operationId": "AdminWorkspaceController_updateWorkspaceMember",
        "summary": "Workspace üyesini günceller",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkspaceMemberDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Üye başarıyla güncellendi"
          }
        },
        "tags": [
          "Admin Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AdminWorkspaceController_removeWorkspaceMember",
        "summary": "Workspace'ten üye çıkarır",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Üye başarıyla çıkarıldı"
          }
        },
        "tags": [
          "Admin Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/support/add-message-to-ticket": {
      "post": {
        "operationId": "SupportController_addMessageToTicket",
        "summary": "Mevcut bir ticket’a mesaj ekler",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketMessageDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Support - Ticket System"
        ]
      }
    },
    "/api/support/ticket/{ticketId}/edit": {
      "post": {
        "operationId": "SupportController_editTicket",
        "summary": "Bir ticket’ın durumunu günceller",
        "parameters": [
          {
            "name": "ticketId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditTicketStatusDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Support - Ticket System"
        ]
      }
    },
    "/api/support/my-tickets": {
      "get": {
        "operationId": "SupportController_getMyTickets",
        "summary": "Kullanıcının oluşturduğu tüm destek biletlerini (tickets) getirir",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Support - Ticket System"
        ]
      }
    },
    "/api/support/ticket/{id}": {
      "get": {
        "operationId": "SupportController_getTicket",
        "summary": "Belirtilen destek biletinin detaylarını getirir",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Support - Ticket System"
        ]
      }
    },
    "/api/webhook": {
      "post": {
        "operationId": "WebhookController_handleStripeWebhook",
        "parameters": [
          {
            "name": "stripe-signature",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/stripe/stripe-success": {
      "get": {
        "operationId": "StripeController_handleStripeSuccess",
        "parameters": [
          {
            "name": "session_id",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/checkout-session-completed": {
      "get": {
        "operationId": "StripeController_handleStripeWebhook",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/search": {
      "post": {
        "operationId": "StripeController_searchQuery",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/checkout": {
      "post": {
        "operationId": "StripeController_createCheckoutSession",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/products": {
      "get": {
        "operationId": "StripeController_getProducts",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/{productId}/details": {
      "get": {
        "operationId": "StripeController_getProductDetails",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/{productId}/prices": {
      "get": {
        "operationId": "StripeController_getProductPrices",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/create-customer": {
      "post": {
        "operationId": "StripeController_createCustomer",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/customer/{id}": {
      "get": {
        "operationId": "StripeController_getCustomer",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/product/{id}": {
      "delete": {
        "operationId": "StripeController_deleteProduct",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/invoices/all": {
      "get": {
        "operationId": "StripeController_getAllInvoices",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/invoices/{id}": {
      "get": {
        "operationId": "StripeController_getInvoiceById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/product/{id}/create-price": {
      "post": {
        "operationId": "StripeController_createPrice",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/plans/all": {
      "get": {
        "operationId": "PlansController_getPlans",
        "summary": "Get all plans",
        "description": "Retrieve a paginated list of all plans with their prices and features",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in plan name and description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/plans/active": {
      "get": {
        "operationId": "PlansController_getActivePlansWithPrices",
        "summary": "Get active plans with prices",
        "description": "Retrieve all active plans with their associated prices and features",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Active plans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "prices": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "features": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/plans/{id}": {
      "get": {
        "operationId": "PlansController_getPlanById",
        "summary": "Get plan by ID",
        "description": "Retrieve detailed information about a specific plan including prices and features",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Plan not found"
          }
        },
        "tags": [
          "Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/plans/plan-prices/{id}": {
      "get": {
        "operationId": "PlansController_getPlanPriceById",
        "summary": "Get plan price by ID",
        "description": "Retrieve detailed information about a specific plan price",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan Price ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan price retrieved successfully"
          },
          "404": {
            "description": "Plan price not found"
          }
        },
        "tags": [
          "Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/locations": {
      "get": {
        "operationId": "LocationController_getAllOfficeLocations",
        "summary": "Get all office locations with filters and pagination",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by label, city, or state",
            "schema": {
              "example": "NYC",
              "type": "string"
            }
          },
          {
            "name": "country",
            "required": false,
            "in": "query",
            "description": "Filter by country",
            "schema": {
              "example": "United States",
              "type": "string"
            }
          },
          {
            "name": "state",
            "required": false,
            "in": "query",
            "description": "Filter by state",
            "schema": {
              "example": "NY",
              "type": "string"
            }
          },
          {
            "name": "city",
            "required": false,
            "in": "query",
            "description": "Filter by city",
            "schema": {
              "example": "New York",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of office locations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OfficeLocationResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Office Locations"
        ]
      }
    },
    "/api/locations/active": {
      "get": {
        "operationId": "LocationController_getActiveOfficeLocations",
        "summary": "Get all active office locations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Active office locations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActiveOfficeLocationResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Office Locations"
        ]
      }
    },
    "/api/locations/{id}": {
      "get": {
        "operationId": "LocationController_getOfficeLocationById",
        "summary": "Get office location by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Office location retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfficeLocationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Office location not found"
          }
        },
        "tags": [
          "Office Locations"
        ]
      }
    },
    "/api/locations/{id}/plans": {
      "get": {
        "operationId": "LocationController_getLocationPlans",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Office Locations"
        ]
      }
    },
    "/api/subscription/{id}": {
      "get": {
        "operationId": "SubscriptionController_getSubscriptionItemById",
        "summary": "Get subscription item by ID",
        "description": "Retrieve detailed information about a specific subscription item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Subscription Item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription item retrieved successfully"
          },
          "404": {
            "description": "Subscription item not found"
          }
        },
        "tags": [
          "Subscription Items"
        ]
      },
      "put": {
        "operationId": "SubscriptionController_updateSubscriptionItem",
        "summary": "Update subscription item",
        "description": "Update an existing subscription item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Subscription Item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Subscription item update data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "quantity": {
                    "type": "number",
                    "description": "Quantity"
                  },
                  "unitPrice": {
                    "type": "number",
                    "description": "Unit price in cents"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End date",
                    "nullable": true
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "PENDING",
                      "CANCELLED",
                      "EXPIRED",
                      "SUSPENDED"
                    ],
                    "description": "Status"
                  },
                  "isActive": {
                    "type": "boolean",
                    "description": "Active status"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription item updated successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Subscription item not found"
          }
        },
        "tags": [
          "Subscription Items"
        ]
      },
      "delete": {
        "operationId": "SubscriptionController_deleteSubscriptionItem",
        "summary": "Delete subscription item",
        "description": "Permanently delete a subscription item",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Subscription Item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription item deleted successfully"
          },
          "404": {
            "description": "Subscription item not found"
          }
        },
        "tags": [
          "Subscription Items"
        ]
      }
    },
    "/api/subscription/mailbox/{mailboxId}": {
      "get": {
        "operationId": "SubscriptionController_getSubscriptionItemsByMailbox",
        "summary": "Get subscription items by mailbox",
        "description": "Retrieve all subscription items for a specific mailbox",
        "parameters": [
          {
            "name": "mailboxId",
            "required": true,
            "in": "path",
            "description": "Mailbox ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page (default: 10)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (default: 1)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "enum": [
                "ACTIVE",
                "INACTIVE",
                "PENDING",
                "CANCELLED",
                "EXPIRED",
                "SUSPENDED"
              ],
              "type": "string"
            }
          },
          {
            "name": "itemType",
            "required": false,
            "in": "query",
            "description": "Filter by item type",
            "schema": {
              "enum": [
                "ADDON",
                "PRODUCT",
                "OTHER"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription items retrieved successfully"
          }
        },
        "tags": [
          "Subscription Items"
        ]
      }
    },
    "/api/subscription/{id}/deactivate": {
      "patch": {
        "operationId": "SubscriptionController_deactivateSubscriptionItem",
        "summary": "Deactivate subscription item",
        "description": "Deactivate a subscription item (soft delete)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Subscription Item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription item deactivated successfully"
          },
          "404": {
            "description": "Subscription item not found"
          }
        },
        "tags": [
          "Subscription Items"
        ]
      }
    },
    "/api/subscription/mailbox/{mailboxId}/bulk-update": {
      "patch": {
        "operationId": "SubscriptionController_bulkUpdateSubscriptionItems",
        "summary": "Bulk update subscription items",
        "description": "Update multiple subscription items for a mailbox",
        "parameters": [
          {
            "name": "mailboxId",
            "required": true,
            "in": "path",
            "description": "Mailbox ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Bulk update data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "quantity": {
                    "type": "number",
                    "description": "Quantity"
                  },
                  "unitPrice": {
                    "type": "number",
                    "description": "Unit price in cents"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "PENDING",
                      "CANCELLED",
                      "EXPIRED",
                      "SUSPENDED"
                    ],
                    "description": "Status"
                  },
                  "isActive": {
                    "type": "boolean",
                    "description": "Active status"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription items updated successfully"
          }
        },
        "tags": [
          "Subscription Items"
        ]
      }
    },
    "/api/subscription/mailbox/{mailboxId}/deactivate-all": {
      "patch": {
        "operationId": "SubscriptionController_deactivateAllSubscriptionItems",
        "summary": "Deactivate all subscription items",
        "description": "Deactivate all subscription items for a mailbox",
        "parameters": [
          {
            "name": "mailboxId",
            "required": true,
            "in": "path",
            "description": "Mailbox ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All subscription items deactivated successfully"
          }
        },
        "tags": [
          "Subscription Items"
        ]
      }
    },
    "/api/subscription/statistics/overview": {
      "get": {
        "operationId": "SubscriptionController_getSubscriptionStatistics",
        "summary": "Get subscription statistics",
        "description": "Get overview statistics for all subscription items",
        "parameters": [
          {
            "name": "mailboxId",
            "required": false,
            "in": "query",
            "description": "Filter by mailbox ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully"
          }
        },
        "tags": [
          "Subscription Items"
        ]
      }
    },
    "/api/subscription/mailbox/{mailboxId}/active": {
      "get": {
        "operationId": "SubscriptionController_getActiveSubscriptionItemsForMailbox",
        "summary": "Get active subscription items for mailbox",
        "description": "Get all active subscription items for a specific mailbox",
        "parameters": [
          {
            "name": "mailboxId",
            "required": true,
            "in": "path",
            "description": "Mailbox ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Active subscription items retrieved successfully"
          }
        },
        "tags": [
          "Subscription Items"
        ]
      }
    },
    "/api/shipping/speeds": {
      "get": {
        "operationId": "ShippingSpeedController_findAll",
        "summary": "List all active shipping speed options",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of shipping speeds."
          }
        },
        "tags": [
          "Shipping Speeds"
        ]
      }
    },
    "/api/shipping/speeds/location/{locationId}": {
      "get": {
        "operationId": "ShippingSpeedController_findAssigned",
        "summary": "List active shipping speeds for a location",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of speeds."
          }
        },
        "tags": [
          "Shipping Speeds"
        ]
      }
    },
    "/api/shipping/packaging": {
      "get": {
        "operationId": "PackagingOptionController_findAll",
        "summary": "List all active packaging options",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of packaging options."
          }
        },
        "tags": [
          "Packaging Options"
        ]
      }
    },
    "/api/shipping/packaging/location/{locationId}": {
      "get": {
        "operationId": "PackagingOptionController_findAssigned",
        "summary": "List active packaging options for a location",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of packaging options."
          }
        },
        "tags": [
          "Packaging Options"
        ]
      }
    },
    "/api/shipping/carriers": {
      "get": {
        "operationId": "CarrierController_findAll",
        "summary": "List all active carriers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of carriers."
          }
        },
        "tags": [
          "Carriers"
        ]
      }
    },
    "/api/shipping/carriers/location/{locationId}": {
      "get": {
        "operationId": "CarrierController_findAssigned",
        "summary": "List active carriers for a location",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of carriers."
          }
        },
        "tags": [
          "Carriers"
        ]
      }
    },
    "/api/mails/all": {
      "get": {
        "operationId": "MailController_getMails",
        "summary": "Get all packages",
        "description": "Retrieve a paginated list of all packages with filtering options",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "receivedAtEnd",
            "required": false,
            "in": "query",
            "description": "Filter by received date end (YYYY-MM-DD)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "receivedAtStart",
            "required": false,
            "in": "query",
            "description": "Filter by received date start (YYYY-MM-DD)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isForwarded",
            "required": false,
            "in": "query",
            "description": "Filter by forwarded status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isShereded",
            "required": false,
            "in": "query",
            "description": "Filter by shredded status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "carrier",
            "required": false,
            "in": "query",
            "description": "Filter by carrier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "senderName",
            "required": false,
            "in": "query",
            "description": "Filter by sender name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steNumber",
            "required": false,
            "in": "query",
            "description": "Filter by STE number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by package status",
            "schema": {
              "enum": [
                "PENDING",
                "FORWARDED",
                "SHREDDED",
                "COMPLETED",
                "CANCELLED",
                "IN_PROCESS"
              ],
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by package type",
            "schema": {
              "enum": [
                "BANK_CHECK",
                "LEGAL_DOCUMENT",
                "ENVELOPE",
                "PACKAGE",
                "OTHER"
              ],
              "type": "string"
            }
          },
          {
            "name": "officeLocationId",
            "required": false,
            "in": "query",
            "description": "Filter by office location ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceAddressId",
            "required": false,
            "in": "query",
            "description": "Filter by workspace address ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PackageResponseDto"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Mail Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/mails/{id}": {
      "get": {
        "operationId": "MailController_getMailById",
        "summary": "Get mail by ID",
        "description": "Retrieve a specific package with all its items and related information",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Package ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Package found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Package not found"
          }
        },
        "tags": [
          "Mail Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/billing/init": {
      "post": {
        "operationId": "BillingController_createInitialSubscriptionOrder",
        "summary": "Create initial subscription order",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInitialSubscriptionOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Billing"
        ]
      }
    },
    "/api/billing/create-order": {
      "post": {
        "operationId": "BillingController_createOrder",
        "summary": "Create order",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Billing"
        ]
      }
    },
    "/api/billing/check-payment": {
      "get": {
        "operationId": "BillingController_checkPaymentStatus",
        "summary": "Check payment status by intent ID",
        "parameters": [
          {
            "name": "intentId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Billing"
        ]
      }
    },
    "/api/billing/public-key": {
      "get": {
        "operationId": "BillingController_getPublishableKey",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Billing"
        ]
      }
    },
    "/api/handler/office-locations": {
      "get": {
        "operationId": "MailHandlerController_getOfficeLocations",
        "summary": "Get all active office locations for handler",
        "description": "Handler selects which office location to work with",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Active office locations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OfficeLocationResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Mail Handler Panel"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/handler/workspaces": {
      "get": {
        "operationId": "MailHandlerController_getAllWorkspaces",
        "summary": "Get all workspaces",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of workspaces retrieved successfully"
          }
        },
        "tags": [
          "Mail Handler Panel"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/handler/mailboxes/{officeLocationId}": {
      "get": {
        "operationId": "MailHandlerController_getMailboxesByOfficeLocation",
        "summary": "Get mailboxes by office location",
        "description": "Get mailboxes by office location",
        "parameters": [
          {
            "name": "officeLocationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mailboxes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailboxResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Mail Handler Panel"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/handler/mailboxes/by-ste/{steNumber}": {
      "get": {
        "operationId": "MailHandlerController_getMailboxesBySteNumber",
        "summary": "Find mailboxes by STE number",
        "description": "Search for mailboxes using STE number to identify the correct recipient",
        "parameters": [
          {
            "name": "steNumber",
            "required": true,
            "in": "path",
            "description": "STE number to search for",
            "schema": {
              "example": "abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mailboxes found for the STE number",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailboxResponseDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No mailboxes found for this STE number"
          }
        },
        "tags": [
          "Mail Handler Panel"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/handler/mails/new": {
      "post": {
        "operationId": "MailHandlerController_createMail",
        "summary": "Create a new mail package",
        "description": "Register a new mail package in the system after selecting office location, mailbox and recipient",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Package creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMailDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Package created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Workspace address or office location not found"
          },
          "409": {
            "description": "Package with this STE number already exists"
          }
        },
        "tags": [
          "Mail Handler Panel"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/handler/{id}": {
      "put": {
        "operationId": "MailHandlerController_updateMail",
        "summary": "Update mail",
        "description": "Update an existing mail by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Mail ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Mail update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mail updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Mail not found"
          }
        },
        "tags": [
          "Mail Handler Panel"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "MailHandlerController_getPackageById",
        "summary": "Get mail package by ID",
        "description": "Retrieve a specific mail package with all its items and related information",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Package ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Package found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Package not found"
          }
        },
        "tags": [
          "Mail Handler Panel"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/handler/all": {
      "get": {
        "operationId": "MailHandlerController_getMails",
        "summary": "Get all mail packages",
        "description": "Retrieve a paginated list of all mail packages with filtering options",
        "parameters": [
          {
            "name": "mailboxId",
            "required": false,
            "in": "query",
            "description": "Filter by mailbox ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "subscriptionId",
            "required": false,
            "in": "query",
            "description": "Filter by mailbox ID (subscription ID)",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "required": false,
            "in": "query",
            "description": "Filter by workspace ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "officeLocationId",
            "required": false,
            "in": "query",
            "description": "Filter by office location ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by package type",
            "schema": {
              "enum": [
                "BANK_CHECK",
                "LEGAL_DOCUMENT",
                "ENVELOPE",
                "PACKAGE",
                "OTHER"
              ],
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by package status",
            "schema": {
              "enum": [
                "PENDING",
                "FORWARDED",
                "SHREDDED",
                "COMPLETED",
                "CANCELLED",
                "IN_PROCESS"
              ],
              "type": "string"
            }
          },
          {
            "name": "steNumber",
            "required": false,
            "in": "query",
            "description": "Filter by STE number",
            "schema": {
              "example": "004712",
              "type": "string"
            }
          },
          {
            "name": "senderName",
            "required": false,
            "in": "query",
            "description": "Filter by sender name",
            "schema": {
              "example": "John Doe",
              "type": "string"
            }
          },
          {
            "name": "carrier",
            "required": false,
            "in": "query",
            "description": "Filter by carrier",
            "schema": {
              "example": "UPS",
              "type": "string"
            }
          },
          {
            "name": "isShereded",
            "required": false,
            "in": "query",
            "description": "Filter by shredded status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "isForwarded",
            "required": false,
            "in": "query",
            "description": "Filter by forwarded status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "receivedAtStart",
            "required": false,
            "in": "query",
            "description": "Filter by received date start (YYYY-MM-DD)",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "receivedAtEnd",
            "required": false,
            "in": "query",
            "description": "Filter by received date end (YYYY-MM-DD)",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PackageResponseDto"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Mail Handler Panel"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/handler/mailbox/{mailboxId}/mails": {
      "get": {
        "operationId": "MailHandlerController_getPackagesByMailbox",
        "summary": "Get mail packages by mailbox",
        "description": "Retrieve all mail packages for a specific mailbox",
        "parameters": [
          {
            "name": "mailboxId",
            "required": true,
            "in": "path",
            "description": "Mailbox ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "subscriptionId",
            "required": false,
            "in": "query",
            "description": "Filter by mailbox ID (subscription ID)",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "required": false,
            "in": "query",
            "description": "Filter by workspace ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "officeLocationId",
            "required": false,
            "in": "query",
            "description": "Filter by office location ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by package type",
            "schema": {
              "example": "PACKAGE",
              "enum": [
                "BANK_CHECK",
                "LEGAL_DOCUMENT",
                "ENVELOPE",
                "PACKAGE",
                "OTHER"
              ],
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by package status",
            "schema": {
              "example": "PENDING",
              "enum": [
                "PENDING",
                "FORWARDED",
                "SHREDDED",
                "COMPLETED",
                "CANCELLED",
                "IN_PROCESS"
              ],
              "type": "string"
            }
          },
          {
            "name": "steNumber",
            "required": false,
            "in": "query",
            "description": "Filter by STE number",
            "schema": {
              "example": "004712",
              "type": "string"
            }
          },
          {
            "name": "senderName",
            "required": false,
            "in": "query",
            "description": "Filter by sender name",
            "schema": {
              "example": "John Doe",
              "type": "string"
            }
          },
          {
            "name": "carrier",
            "required": false,
            "in": "query",
            "description": "Filter by carrier",
            "schema": {
              "example": "UPS",
              "type": "string"
            }
          },
          {
            "name": "isShereded",
            "required": false,
            "in": "query",
            "description": "Filter by shredded status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "isForwarded",
            "required": false,
            "in": "query",
            "description": "Filter by forwarded status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "receivedAtStart",
            "required": false,
            "in": "query",
            "description": "Filter by received date start",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "receivedAtEnd",
            "required": false,
            "in": "query",
            "description": "Filter by received date end",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PackageResponseDto"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Mail Handler Panel"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/handler/{officeLocationId}/mails": {
      "get": {
        "operationId": "MailHandlerController_getMailsByOfficeLocation",
        "summary": "Get mail packages by office location",
        "description": "Retrieve all mail packages for a specific office location",
        "parameters": [
          {
            "name": "officeLocationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "mailboxId",
            "required": false,
            "in": "query",
            "description": "Filter by mailbox ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "subscriptionId",
            "required": false,
            "in": "query",
            "description": "Filter by mailbox ID (subscription ID)",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "required": false,
            "in": "query",
            "description": "Filter by workspace ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by package type",
            "schema": {
              "example": "PACKAGE",
              "enum": [
                "BANK_CHECK",
                "LEGAL_DOCUMENT",
                "ENVELOPE",
                "PACKAGE",
                "OTHER"
              ],
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by package status",
            "schema": {
              "example": "PENDING",
              "enum": [
                "PENDING",
                "FORWARDED",
                "SHREDDED",
                "COMPLETED",
                "CANCELLED",
                "IN_PROCESS"
              ],
              "type": "string"
            }
          },
          {
            "name": "steNumber",
            "required": false,
            "in": "query",
            "description": "Filter by STE number",
            "schema": {
              "example": "004712",
              "type": "string"
            }
          },
          {
            "name": "senderName",
            "required": false,
            "in": "query",
            "description": "Filter by sender name",
            "schema": {
              "example": "John Doe",
              "type": "string"
            }
          },
          {
            "name": "carrier",
            "required": false,
            "in": "query",
            "description": "Filter by carrier",
            "schema": {
              "example": "UPS",
              "type": "string"
            }
          },
          {
            "name": "isShereded",
            "required": false,
            "in": "query",
            "description": "Filter by shredded status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "isForwarded",
            "required": false,
            "in": "query",
            "description": "Filter by forwarded status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "receivedAtStart",
            "required": false,
            "in": "query",
            "description": "Filter by received date start",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "receivedAtEnd",
            "required": false,
            "in": "query",
            "description": "Filter by received date end",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PackageResponseDto"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Mail Handler Panel"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/handler/mail-actions/{id}": {
      "get": {
        "operationId": "MailHandlerController_get",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Mail Handler Panel"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/handler/mail-actions/search": {
      "get": {
        "operationId": "MailHandlerController_list",
        "parameters": [
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by action type",
            "schema": {
              "enum": [
                "FORWARD",
                "SHRED",
                "SCAN",
                "HOLD",
                "JUNK"
              ],
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by action status",
            "schema": {
              "enum": [
                "PENDING",
                "IN_PROGRESS",
                "DONE",
                "FAILED"
              ],
              "type": "string"
            }
          },
          {
            "name": "mailboxId",
            "required": false,
            "in": "query",
            "description": "Filter by Mailbox (subscription) ID",
            "schema": {
              "example": "4c1c8e08-6d9e-4ea7-9b0c-4d6c5a5f4a11",
              "type": "string"
            }
          },
          {
            "name": "officeLocationId",
            "required": false,
            "in": "query",
            "description": "Filter by office location ID (join via: mail.mailbox.officeLocationId)",
            "schema": {
              "example": "9a0f2eb1-2f9b-4c82-8d51-1d9a3e9b3d77",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search text (STE number, tracking code, sender name, etc.)",
            "schema": {
              "example": "STE-102938 / UPS / Acme Corp",
              "type": "string"
            }
          },
          {
            "name": "from",
            "required": false,
            "in": "query",
            "description": "Start date (ISO 8601)",
            "schema": {
              "example": "2025-08-01T00:00:00.000Z",
              "type": "string"
            }
          },
          {
            "name": "to",
            "required": false,
            "in": "query",
            "description": "End date (ISO 8601)",
            "schema": {
              "example": "2025-08-10T23:59:59.999Z",
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Sort field",
            "schema": {
              "example": "requestedAt",
              "enum": [
                "requestedAt",
                "updatedAt",
                "type",
                "status"
              ],
              "type": "string"
            }
          },
          {
            "name": "order",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Mail Handler Panel"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/handler/mail-actions/{id}/status": {
      "patch": {
        "operationId": "MailHandlerController_updateStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActionStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Mail Handler Panel"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/handler/mail-actions/{id}/forward/complete": {
      "patch": {
        "operationId": "MailHandlerController_completeForward",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteForwardDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Mail Handler Panel"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/handler/mail-actions/{id}/forward/cancel": {
      "patch": {
        "operationId": "MailHandlerController_cancelForward",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelForwardDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Mail Handler Panel"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/actions/speeds/{locationId}": {
      "get": {
        "operationId": "MailActionsController_findSpeedOptions",
        "summary": "List active shipping speeds for a location",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of speeds."
          }
        },
        "tags": [
          "Mail Actions"
        ]
      }
    },
    "/api/actions/packaging/{locationId}": {
      "get": {
        "operationId": "MailActionsController_findPackagingOptions",
        "summary": "List active packaging options for a location",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of packaging options."
          }
        },
        "tags": [
          "Mail Actions"
        ]
      }
    },
    "/api/actions/carrier/{locationId}": {
      "get": {
        "operationId": "MailActionsController_findAllCarriers",
        "summary": "List active carriers for a location",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of carriers."
          }
        },
        "tags": [
          "Mail Actions"
        ]
      }
    },
    "/api/actions/mail-actions/create": {
      "post": {
        "operationId": "MailActionsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMailActionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Mail Actions"
        ]
      }
    }
  },
  "info": {
    "title": "Virtual Mail Hub",
    "description": "The Virtual Mail Hub API description",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "password123"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "TokenDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "The access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "CheckEmailisExistDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": [
          "email"
        ]
      },
      "ChangePasswordDto": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "description": "Current password of the user",
            "example": "password123"
          },
          "newPassword": {
            "type": "string",
            "description": "New password of the user",
            "example": "newpassword123"
          }
        },
        "required": [
          "currentPassword",
          "newPassword"
        ]
      },
      "SetActiveContextDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "Doe"
          },
          "telephone": {
            "type": "string",
            "description": "User telephone number",
            "example": "5374352423"
          },
          "profileImage": {
            "type": "string",
            "description": "URL to the user's profile image",
            "example": "https://example.com/image.jpg"
          },
          "notifications": {
            "type": "boolean",
            "description": "Indicates if the user wants to receive notifications",
            "example": true
          },
          "isActivate": {
            "type": "boolean",
            "description": "Indicates if the user account is active",
            "example": true
          }
        }
      },
      "ChangeEmailDto": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "description": "Current password of the user",
            "example": "password123"
          },
          "newEmail": {
            "type": "string",
            "description": "New email of the user",
            "example": "user@example.com"
          }
        },
        "required": [
          "currentPassword",
          "newEmail"
        ]
      },
      "MailboxResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Mailbox ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspaceId": {
            "type": "string",
            "description": "Workspace ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "officeLocationId": {
            "type": "string",
            "description": "Office Location ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "planPriceId": {
            "type": "string",
            "description": "Plan Price ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "billingCycle": {
            "type": "string",
            "description": "Billing cycle",
            "enum": [
              "MONTHLY",
              "YEARLY",
              "WEEKLY",
              "QUARTERLY",
              "ONE_TIME"
            ],
            "example": "MONTHLY"
          },
          "stripeSubscriptionId": {
            "type": "string",
            "description": "Stripe subscription ID",
            "example": "sub_1234567890"
          },
          "status": {
            "type": "string",
            "description": "Mailbox status",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "PENDING",
              "CANCELLED",
              "EXPIRED",
              "SUSPENDED"
            ],
            "example": "ACTIVE"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is mailbox active",
            "example": true
          },
          "startDate": {
            "format": "date-time",
            "type": "string",
            "description": "Start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "endDate": {
            "format": "date-time",
            "type": "string",
            "description": "End date",
            "example": "2024-12-31T23:59:59.999Z"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created at",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Updated at",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "forwardingAddressLimit": {
            "type": "number",
            "description": "Forwarding address limit",
            "example": 1
          },
          "recipientLimit": {
            "type": "number",
            "description": "Recipient limit",
            "example": 1
          },
          "workspace": {
            "type": "object",
            "description": "Workspace details"
          },
          "officeLocation": {
            "type": "object",
            "description": "Office location details"
          },
          "plan": {
            "type": "object",
            "description": "Plan details"
          },
          "planPrice": {
            "type": "object",
            "description": "Plan price details"
          },
          "deliveryAddresses": {
            "description": "Delivery addresses",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "featureUsages": {
            "description": "Feature usages",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "subscriptionItems": {
            "description": "Subscription items",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "mails": {
            "description": "Mails",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "recipients": {
            "description": "Recipients",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "workspaceId",
          "officeLocationId",
          "planId",
          "planPriceId",
          "billingCycle",
          "status",
          "isActive",
          "startDate",
          "createdAt",
          "updatedAt",
          "forwardingAddressLimit",
          "recipientLimit"
        ]
      },
      "CreateWorkspaceMemberDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspaceId": {
            "type": "string",
            "description": "Workspace ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "role": {
            "type": "string",
            "description": "Member role",
            "enum": [
              "OWNER",
              "MEMBER"
            ],
            "example": "MEMBER"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Is default workspace for user",
            "example": false,
            "default": false
          }
        },
        "required": [
          "userId",
          "workspaceId",
          "role"
        ]
      },
      "UpdateWorkspaceMemberDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspaceId": {
            "type": "string",
            "description": "Workspace ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "role": {
            "type": "string",
            "description": "Member role",
            "enum": [
              "OWNER",
              "MEMBER"
            ],
            "example": "MEMBER"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Is default workspace for user",
            "example": false,
            "default": false
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is member deleted",
            "example": false
          }
        }
      },
      "CreateInitialSubscriptionOrderDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "Customer first name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Customer last name",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "Customer email address",
            "example": "atakan@thedice.ai"
          },
          "officeLocationId": {
            "type": "string",
            "description": "Office location ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "planPriceId": {
            "type": "string",
            "description": "Plan Price ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "addons": {
            "description": "List of Add-on Price IDs",
            "example": [
              "111e4567-e89b-12d3-a456-426614174000",
              "222e4567-e89b-12d3-a456-426614174000"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "firstName",
          "lastName",
          "email",
          "officeLocationId",
          "planPriceId",
          "addons"
        ]
      },
      "MessageAttachment": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Dosya adı"
          },
          "url": {
            "type": "string",
            "example": "https://example.com/file.pdf"
          },
          "type": {
            "type": "string",
            "example": "pdf"
          }
        },
        "required": [
          "name",
          "url",
          "type"
        ]
      },
      "TicketMessageDto": {
        "type": "object",
        "properties": {
          "ticketId": {
            "type": "string",
            "description": "Subject of the ticket",
            "example": "I have a problem with my account"
          },
          "message": {
            "type": "string",
            "description": "Message of the ticket",
            "example": "I cannot login to my account"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachment"
            }
          }
        },
        "required": [
          "ticketId",
          "message"
        ]
      },
      "EditTicketStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the ticket",
            "example": "OPEN|IN_PROGRESS|CLOSED"
          },
          "priority": {
            "type": "string",
            "description": "Status of the ticket",
            "example": "LOW|MEDIUM|HIGH"
          }
        },
        "required": [
          "status",
          "priority"
        ]
      },
      "OfficeLocationResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Location ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "label": {
            "type": "string",
            "description": "Location label",
            "example": "Soho - NYC"
          },
          "addressLine": {
            "type": "string",
            "description": "Address line 1",
            "example": "447 Broadway"
          },
          "addressLine2": {
            "type": "string",
            "description": "Address line 2",
            "example": "Suite 200"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "description": "State or Province",
            "example": "NY"
          },
          "country": {
            "type": "string",
            "description": "Country",
            "example": "United States"
          },
          "zipCode": {
            "type": "string",
            "description": "ZIP/Postal code",
            "example": "10013"
          },
          "description": {
            "type": "string",
            "description": "Location description",
            "example": "Premium office space in the heart of Soho"
          },
          "latitude": {
            "type": "number",
            "description": "Latitude coordinate",
            "example": 40.7205
          },
          "longitude": {
            "type": "number",
            "description": "Longitude coordinate",
            "example": -74.0031
          },
          "isActive": {
            "type": "boolean",
            "description": "Is location active",
            "example": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Deletion date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "plans": {
            "description": "Plans available at this location",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "example": "+1234567890"
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "example": "office@location.com"
          },
          "workingHours": {
            "type": "string",
            "description": "Working hours",
            "example": "9 AM - 6 PM EST"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone",
            "example": "America/New_York"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is location deleted",
            "example": false
          },
          "mailboxes": {
            "description": "Mailboxes at this location",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "aviableCarriers": {
            "description": "Available carriers at this location",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "deliverySpeedOptions": {
            "description": "Delivery speed options at this location",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "packagingTypeOptions": {
            "description": "Packaging type options at this location",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "forwardRequest": {
            "description": "Forward requests from this location",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "label",
          "addressLine",
          "city",
          "state",
          "country",
          "isActive",
          "createdAt",
          "updatedAt",
          "isDeleted"
        ]
      },
      "CreateOfficeLocationDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Location label",
            "example": "Soho - NYC"
          },
          "addressLine": {
            "type": "string",
            "description": "Address line 1",
            "example": "447 Broadway"
          },
          "addressLine2": {
            "type": "string",
            "description": "Address line 2",
            "example": "Suite 200"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "description": "State or Province",
            "example": "NY"
          },
          "country": {
            "type": "string",
            "description": "Country",
            "example": "United States"
          },
          "zipCode": {
            "type": "string",
            "description": "ZIP/Postal code",
            "example": "10013"
          },
          "description": {
            "type": "string",
            "description": "Location description",
            "example": "Premium office space in the heart of Soho"
          },
          "latitude": {
            "type": "number",
            "description": "Latitude coordinate",
            "example": 40.7205
          },
          "longitude": {
            "type": "number",
            "description": "Longitude coordinate",
            "example": -74.0031
          },
          "isActive": {
            "type": "boolean",
            "description": "Is location active",
            "example": true,
            "default": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "example": "+1-555-0456"
          },
          "email": {
            "type": "string",
            "description": "Email",
            "example": "new@example.com"
          },
          "workingHours": {
            "type": "string",
            "description": "Working hours",
            "example": "8 AM - 6 PM"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone",
            "example": "America/New_York"
          }
        },
        "required": [
          "label",
          "addressLine",
          "city",
          "state",
          "country"
        ]
      },
      "UpdateOfficeLocationDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Location label",
            "example": "Soho - NYC"
          },
          "addressLine": {
            "type": "string",
            "description": "Address line 1",
            "example": "447 Broadway"
          },
          "addressLine2": {
            "type": "string",
            "description": "Address line 2",
            "example": "Suite 200"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "description": "State or Province",
            "example": "NY"
          },
          "country": {
            "type": "string",
            "description": "Country",
            "example": "United States"
          },
          "zipCode": {
            "type": "string",
            "description": "ZIP/Postal code",
            "example": "10013"
          },
          "description": {
            "type": "string",
            "description": "Location description",
            "example": "Premium office space in the heart of Soho"
          },
          "latitude": {
            "type": "number",
            "description": "Latitude coordinate",
            "example": 40.7205
          },
          "longitude": {
            "type": "number",
            "description": "Longitude coordinate",
            "example": -74.0031
          },
          "isActive": {
            "type": "boolean",
            "description": "Is location active",
            "example": true,
            "default": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "example": "+1-555-0456"
          },
          "email": {
            "type": "string",
            "description": "Email",
            "example": "new@example.com"
          },
          "workingHours": {
            "type": "string",
            "description": "Working hours",
            "example": "8 AM - 6 PM"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone",
            "example": "America/New_York"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is location deleted",
            "example": false,
            "default": false
          }
        }
      },
      "CreatePlanDto": {
        "type": "object",
        "properties": {
          "officeLocationId": {
            "type": "string",
            "description": "Office Location ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Plan name",
            "example": "Basic Plan"
          },
          "slug": {
            "type": "string",
            "description": "Plan slug",
            "example": "basic-plan"
          },
          "description": {
            "type": "string",
            "description": "Plan description",
            "example": "Basic plan with essential features"
          },
          "imageUrl": {
            "type": "string",
            "description": "Plan image URL",
            "example": "https://example.com/plan-image.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is plan active",
            "example": true,
            "default": true
          },
          "displayFeatures": {
            "type": "object",
            "description": "Display features for UI (JSON format)",
            "example": {
              "highlights": [
                "Feature 1",
                "Feature 2"
              ]
            }
          },
          "showOnMarketplace": {
            "type": "boolean",
            "description": "Show on marketplace",
            "example": true,
            "default": true
          }
        },
        "required": [
          "officeLocationId",
          "name",
          "slug"
        ]
      },
      "CreatePlanFeatureDto": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "featureId": {
            "type": "string",
            "description": "Feature ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "includedLimit": {
            "type": "number",
            "description": "Included limit (null = unlimited, 0 = not included but can be purchased)",
            "example": 10,
            "minimum": 0
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit price in cents for extra usage (null = not available for purchase)",
            "example": 299,
            "minimum": 0
          },
          "resetCycle": {
            "type": "string",
            "description": "Reset cycle for the feature",
            "enum": [
              "MONTHLY",
              "YEARLY",
              "WEEKLY",
              "QUARTERLY",
              "ONE_TIME",
              "DAILY",
              "NO_RESET"
            ],
            "example": "MONTHLY",
            "default": "MONTHLY"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is feature active in this plan",
            "example": true,
            "default": true
          },
          "displayOrder": {
            "type": "number",
            "description": "Display order in plan features list",
            "example": 1
          },
          "showOnList": {
            "type": "boolean",
            "description": "Show this feature in marketplace list",
            "example": true,
            "default": true
          }
        },
        "required": [
          "planId",
          "featureId",
          "resetCycle"
        ]
      },
      "CreatePlanPriceDto": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "billingCycle": {
            "type": "string",
            "description": "Billing cycle",
            "enum": [
              "MONTHLY",
              "YEARLY",
              "WEEKLY",
              "QUARTERLY",
              "ONE_TIME"
            ],
            "example": "MONTHLY",
            "default": "MONTHLY"
          },
          "amount": {
            "type": "number",
            "description": "Price amount in cents",
            "example": 2999,
            "minimum": 0
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "description": {
            "type": "string",
            "description": "Price description",
            "example": "Monthly subscription fee"
          },
          "stripePriceId": {
            "type": "string",
            "description": "Stripe Price ID",
            "example": "price_1234567890"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is price active",
            "example": true,
            "default": true
          }
        },
        "required": [
          "planId",
          "billingCycle",
          "amount",
          "currency"
        ]
      },
      "CreatePlanWithFeaturesDto": {
        "type": "object",
        "properties": {
          "plan": {
            "description": "Plan creation data",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatePlanDto"
              }
            ]
          },
          "features": {
            "description": "Plan features to include",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePlanFeatureDto"
            }
          },
          "prices": {
            "description": "Plan prices to include",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePlanPriceDto"
            }
          }
        },
        "required": [
          "plan"
        ]
      },
      "UpdatePlanDto": {
        "type": "object",
        "properties": {
          "officeLocationId": {
            "type": "string",
            "description": "Office Location ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Plan name",
            "example": "Basic Plan"
          },
          "slug": {
            "type": "string",
            "description": "Plan slug",
            "example": "basic-plan"
          },
          "description": {
            "type": "string",
            "description": "Plan description",
            "example": "Basic plan with essential features"
          },
          "imageUrl": {
            "type": "string",
            "description": "Plan image URL",
            "example": "https://example.com/plan-image.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is plan active",
            "example": true,
            "default": true
          },
          "displayFeatures": {
            "type": "object",
            "description": "Display features for UI (JSON format)",
            "example": {
              "highlights": [
                "Feature 1",
                "Feature 2"
              ]
            }
          },
          "showOnMarketplace": {
            "type": "boolean",
            "description": "Show on marketplace",
            "example": true,
            "default": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is plan deleted",
            "example": false,
            "default": false
          }
        }
      },
      "UpdatePlanPriceDto": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "billingCycle": {
            "type": "string",
            "description": "Billing cycle",
            "enum": [
              "MONTHLY",
              "YEARLY",
              "WEEKLY",
              "QUARTERLY",
              "ONE_TIME"
            ],
            "example": "MONTHLY",
            "default": "MONTHLY"
          },
          "amount": {
            "type": "number",
            "description": "Price amount in cents",
            "example": 2999,
            "minimum": 0
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "description": {
            "type": "string",
            "description": "Price description",
            "example": "Monthly subscription fee"
          },
          "stripePriceId": {
            "type": "string",
            "description": "Stripe Price ID",
            "example": "price_1234567890"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is price active",
            "example": true,
            "default": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is price deleted",
            "example": false
          }
        }
      },
      "CreatePlanAddonDto": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "productId": {
            "type": "string",
            "description": "Product ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "priceIds": {
            "example": "['123e4567-e89b-12d3-a456-426614174000','123e4567-e89b-12d3-a456-426614174000']",
            "description": "Products prices id list",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "displayOrder": {
            "type": "number",
            "description": "Display order in plan addons list",
            "example": 1
          },
          "isActive": {
            "type": "boolean",
            "description": "Is addon active",
            "example": true,
            "default": true
          }
        },
        "required": [
          "planId",
          "productId",
          "displayOrder"
        ]
      },
      "UpdatePlanAddonDto": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "productId": {
            "type": "string",
            "description": "Product ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "priceIds": {
            "example": "['123e4567-e89b-12d3-a456-426614174000','123e4567-e89b-12d3-a456-426614174000']",
            "description": "Products prices id list",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "displayOrder": {
            "type": "number",
            "description": "Display order in plan addons list",
            "example": 1
          },
          "isActive": {
            "type": "boolean",
            "description": "Is addon active",
            "example": true,
            "default": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is plan addon deleted",
            "example": false
          }
        }
      },
      "CreateFeatureDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Feature name",
            "example": "Mail Forwarding"
          },
          "description": {
            "type": "string",
            "description": "Feature description",
            "example": "Forward your mail to any address worldwide"
          },
          "imageUrl": {
            "type": "string",
            "description": "Feature image URL",
            "example": "https://example.com/feature-image.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is feature active",
            "example": true,
            "default": true
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateFeatureDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Feature name",
            "example": "Mail Forwarding"
          },
          "description": {
            "type": "string",
            "description": "Feature description",
            "example": "Forward your mail to any address worldwide"
          },
          "imageUrl": {
            "type": "string",
            "description": "Feature image URL",
            "example": "https://example.com/feature-image.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is feature active",
            "example": true,
            "default": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is feature deleted",
            "example": false
          }
        }
      },
      "UpdatePlanFeatureDto": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "featureId": {
            "type": "string",
            "description": "Feature ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "includedLimit": {
            "type": "number",
            "description": "Included limit (null = unlimited, 0 = not included but can be purchased)",
            "example": 10,
            "minimum": 0
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit price in cents for extra usage (null = not available for purchase)",
            "example": 299,
            "minimum": 0
          },
          "resetCycle": {
            "type": "string",
            "description": "Reset cycle for the feature",
            "enum": [
              "MONTHLY",
              "YEARLY",
              "WEEKLY",
              "QUARTERLY",
              "ONE_TIME",
              "DAILY",
              "NO_RESET"
            ],
            "example": "MONTHLY",
            "default": "MONTHLY"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is feature active in this plan",
            "example": true,
            "default": true
          },
          "displayOrder": {
            "type": "number",
            "description": "Display order in plan features list",
            "example": 1
          },
          "showOnList": {
            "type": "boolean",
            "description": "Show this feature in marketplace list",
            "example": true,
            "default": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is plan feature deleted",
            "example": false
          }
        }
      },
      "RecurringDto": {
        "type": "object",
        "properties": {
          "interval": {
            "type": "string",
            "description": "Recurring interval (örn: day, week, month, year)",
            "enum": [
              "day",
              "week",
              "month",
              "year"
            ]
          },
          "interval_count": {
            "type": "number",
            "description": "Interval count",
            "example": 1
          }
        },
        "required": [
          "interval",
          "interval_count"
        ]
      },
      "CreatePriceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Price name",
            "example": "Monthly Extra Recipient"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Is default price",
            "example": false,
            "default": false
          },
          "additionalFees": {
            "type": "number",
            "description": "Additional fees in cents",
            "example": 50
          },
          "stripePriceId": {
            "type": "string",
            "description": "Stripe price ID",
            "example": "price_1234567890"
          },
          "unit_amount": {
            "type": "number",
            "description": "Unit amount in cents",
            "example": 299
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD",
            "default": "USD"
          },
          "description": {
            "type": "string",
            "description": "Price description",
            "example": "Monthly subscription for extra recipient"
          },
          "priceType": {
            "type": "string",
            "description": "Price type: \"one_time\" or \"recurring\"",
            "example": "recurring",
            "enum": [
              "one_time",
              "recurring"
            ],
            "default": "one_time"
          },
          "recurring": {
            "description": "Recurring information (only for recurring prices)",
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringDto"
              }
            ]
          }
        },
        "required": [
          "unit_amount",
          "currency"
        ]
      },
      "CreateProductFeatureDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "featureId": {
            "type": "string",
            "description": "Feature ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "includedLimit": {
            "type": "number",
            "description": "Included limit",
            "example": 1
          },
          "resetCycle": {
            "type": "string",
            "description": "Reset cycle",
            "enum": [
              "MONTHLY",
              "YEARLY",
              "WEEKLY",
              "QUARTERLY",
              "ONE_TIME",
              "DAILY",
              "NO_RESET"
            ],
            "example": "MONTHLY"
          }
        },
        "required": [
          "productId",
          "featureId",
          "includedLimit",
          "resetCycle"
        ]
      },
      "CreateProductDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Product name",
            "example": "Extra Recipient"
          },
          "description": {
            "type": "string",
            "description": "Product description",
            "example": "Additional recipient for mail forwarding"
          },
          "stripeProductId": {
            "type": "string",
            "description": "Stripe product ID if product is created in stripe and not in local database",
            "example": "prod_1234567890"
          },
          "type": {
            "type": "string",
            "description": "Product type",
            "enum": [
              "ADDON",
              "PRODUCT",
              "OTHER"
            ],
            "example": "ADDON"
          },
          "imageUrl": {
            "type": "string",
            "description": "Product image URL",
            "example": "https://example.com/product-image.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is product active",
            "example": true,
            "default": true
          },
          "prices": {
            "description": "Product prices",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePriceDto"
            }
          },
          "features": {
            "description": "Product features",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateProductFeatureDto"
            }
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "ProductResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Product ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Product name",
            "example": "Extra Recipient"
          },
          "description": {
            "type": "string",
            "description": "Product description",
            "example": "Additional recipient for mail forwarding"
          },
          "stripeProductId": {
            "type": "string",
            "description": "Stripe product ID",
            "example": "prod_1234567890"
          },
          "type": {
            "type": "string",
            "description": "Product type",
            "enum": [
              "ADDON",
              "PRODUCT",
              "OTHER"
            ],
            "example": "ADDON"
          },
          "imageUrl": {
            "type": "string",
            "description": "Product image URL",
            "example": "https://example.com/product-image.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is product active",
            "example": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is product deleted",
            "example": false
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created at",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Updated at",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Deleted at",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "defaultPriceId": {
            "type": "string",
            "description": "Default price ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "prices": {
            "description": "Product prices",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "productFeature": {
            "description": "Product features",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "planAddon": {
            "description": "Plan addons using this product",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "isActive",
          "isDeleted",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateProductDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Product name",
            "example": "Extra Recipient"
          },
          "description": {
            "type": "string",
            "description": "Product description",
            "example": "Additional recipient for mail forwarding"
          },
          "stripeProductId": {
            "type": "string",
            "description": "Stripe product ID if product is created in stripe and not in local database",
            "example": "prod_1234567890"
          },
          "type": {
            "type": "string",
            "description": "Product type",
            "enum": [
              "ADDON",
              "PRODUCT",
              "OTHER"
            ],
            "example": "ADDON"
          },
          "imageUrl": {
            "type": "string",
            "description": "Product image URL",
            "example": "https://example.com/product-image.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is product active",
            "example": true,
            "default": true
          },
          "prices": {
            "description": "Product prices",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePriceDto"
            }
          },
          "features": {
            "description": "Product features",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateProductFeatureDto"
            }
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is product deleted",
            "example": false
          }
        }
      },
      "PriceResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Price ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Price name",
            "example": "Monthly Extra Recipient"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Is default price",
            "example": false
          },
          "additionalFees": {
            "type": "number",
            "description": "Additional fees in cents",
            "example": 50
          },
          "stripePriceId": {
            "type": "string",
            "description": "Stripe price ID",
            "example": "price_1234567890"
          },
          "unit_amount": {
            "type": "number",
            "description": "Unit amount in cents",
            "example": 299
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD"
          },
          "productId": {
            "type": "string",
            "description": "Product ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "description": {
            "type": "string",
            "description": "Price description",
            "example": "Monthly subscription for extra recipient"
          },
          "recurringId": {
            "type": "string",
            "description": "Recurring ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "active": {
            "type": "boolean",
            "description": "Is price active",
            "example": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is price deleted",
            "example": false
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created at",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Updated at",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Deleted at",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "product": {
            "type": "object",
            "description": "Product details"
          },
          "recurring": {
            "type": "object",
            "description": "Recurring details"
          },
          "planAddons": {
            "description": "Plan addons using this price",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "isDefault",
          "unit_amount",
          "currency",
          "productId",
          "active",
          "isDeleted",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateShippingSpeedDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Unique label for the shipping speed option",
            "example": "STANDARD"
          },
          "title": {
            "type": "string",
            "description": "Display title for the shipping speed option",
            "example": "Standard Delivery"
          },
          "description": {
            "type": "string",
            "description": "Optional description for the shipping speed option",
            "example": "Delivered within 5-7 business days"
          },
          "price": {
            "type": "number",
            "description": "Default base price in cents for this shipping speed",
            "example": 500
          }
        },
        "required": [
          "label",
          "title",
          "price"
        ]
      },
      "UpdateShippingSpeedDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Unique label for the shipping speed option",
            "example": "STANDARD"
          },
          "title": {
            "type": "string",
            "description": "Display title for the shipping speed option",
            "example": "Standard Delivery"
          },
          "description": {
            "type": "string",
            "description": "Optional description for the shipping speed option",
            "example": "Delivered within 5-7 business days"
          },
          "price": {
            "type": "number",
            "description": "Default base price in cents for this shipping speed",
            "example": 500
          },
          "isActive": {
            "type": "boolean",
            "description": "Active flag to soft delete or restore the option",
            "example": true
          }
        }
      },
      "AssignShippingSpeedToLocationDto": {
        "type": "object",
        "properties": {
          "deliverySpeedId": {
            "type": "string",
            "description": "ID of the shipping speed option to assign",
            "example": "uuid-of-speed-option"
          },
          "officeLocationId": {
            "type": "string",
            "description": "ID of the office location",
            "example": "uuid-of-office-location"
          },
          "price": {
            "type": "number",
            "description": "Price override in cents for this speed at this location",
            "example": 700
          },
          "isActive": {
            "type": "boolean",
            "description": "Active flag for this assignment",
            "example": true
          }
        },
        "required": [
          "deliverySpeedId",
          "officeLocationId"
        ]
      },
      "CreateCarrierDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Carrier Name",
            "example": "UPS Cargo"
          },
          "description": {
            "type": "string",
            "description": "Description of Cargo",
            "example": "Example"
          },
          "logoUrl": {
            "type": "string",
            "description": "Logo link of Cargo",
            "example": "http://linl.com/example.png"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateCarrierDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Carrier Name",
            "example": "UPS Cargo"
          },
          "description": {
            "type": "string",
            "description": "Description of Cargo",
            "example": "Example"
          },
          "logoUrl": {
            "type": "string",
            "description": "Logo link of Cargo",
            "example": "http://linl.com/example.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "Active this carrier or not",
            "example": true
          }
        }
      },
      "CreatePackagingOptionDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Unique label for the packaging option",
            "example": "STANDARD_BOX"
          },
          "title": {
            "type": "string",
            "description": "Display title of the packaging option",
            "example": "Standard Box"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the packaging option",
            "example": "A standard cardboard box"
          }
        },
        "required": [
          "label",
          "title"
        ]
      },
      "UpdatePackagingOptionDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Unique label for the packaging option",
            "example": "STANDARD_BOX"
          },
          "title": {
            "type": "string",
            "description": "Display title of the packaging option",
            "example": "Standard Box"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the packaging option",
            "example": "A standard cardboard box"
          },
          "isActive": {
            "type": "boolean",
            "description": "Active flag to soft delete or restore",
            "example": true
          }
        }
      },
      "AssignPackagingOptionToLocationDto": {
        "type": "object",
        "properties": {
          "packagingTypeId": {
            "type": "string",
            "description": "ID of the packaging type to assign",
            "example": "uuid-of-packaging-type"
          },
          "officeLocationId": {
            "type": "string",
            "description": "ID of the office location",
            "example": "uuid-of-office-location"
          },
          "price": {
            "type": "number",
            "description": "Price override in cents for this location",
            "example": 500
          },
          "isActive": {
            "type": "boolean",
            "description": "Active flag for this assignment",
            "example": true
          }
        },
        "required": [
          "packagingTypeId",
          "officeLocationId"
        ]
      },
      "CreateMailboxDto": {
        "type": "object",
        "properties": {
          "workspaceId": {
            "type": "string",
            "description": "Workspace ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "officeLocationId": {
            "type": "string",
            "description": "Office Location ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "planPriceId": {
            "type": "string",
            "description": "Plan Price ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "billingCycle": {
            "type": "string",
            "description": "Billing cycle",
            "enum": [
              "MONTHLY",
              "YEARLY",
              "WEEKLY",
              "QUARTERLY",
              "ONE_TIME"
            ],
            "example": "MONTHLY"
          },
          "stripeSubscriptionId": {
            "type": "string",
            "description": "Stripe subscription ID",
            "example": "sub_1234567890"
          },
          "startDate": {
            "type": "string",
            "description": "Start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "endDate": {
            "type": "string",
            "description": "End date",
            "example": "2024-12-31T23:59:59.999Z"
          },
          "forwardingAddressLimit": {
            "type": "number",
            "description": "Forwarding address limit",
            "example": 1,
            "default": 1
          },
          "recipientLimit": {
            "type": "number",
            "description": "Recipient limit",
            "example": 1,
            "default": 1
          }
        },
        "required": [
          "workspaceId",
          "officeLocationId",
          "planId",
          "planPriceId",
          "billingCycle",
          "startDate"
        ]
      },
      "UpdateMailboxDto": {
        "type": "object",
        "properties": {
          "workspaceId": {
            "type": "string",
            "description": "Workspace ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "officeLocationId": {
            "type": "string",
            "description": "Office Location ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "planPriceId": {
            "type": "string",
            "description": "Plan Price ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "billingCycle": {
            "type": "string",
            "description": "Billing cycle",
            "enum": [
              "MONTHLY",
              "YEARLY",
              "WEEKLY",
              "QUARTERLY",
              "ONE_TIME"
            ],
            "example": "MONTHLY"
          },
          "stripeSubscriptionId": {
            "type": "string",
            "description": "Stripe subscription ID",
            "example": "sub_1234567890"
          },
          "startDate": {
            "type": "string",
            "description": "Start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "endDate": {
            "type": "string",
            "description": "End date",
            "example": "2024-12-31T23:59:59.999Z"
          },
          "forwardingAddressLimit": {
            "type": "number",
            "description": "Forwarding address limit",
            "example": 1,
            "default": 1
          },
          "recipientLimit": {
            "type": "number",
            "description": "Recipient limit",
            "example": 1,
            "default": 1
          },
          "status": {
            "type": "string",
            "description": "Mailbox status",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "PENDING",
              "CANCELLED",
              "EXPIRED",
              "SUSPENDED"
            ],
            "example": "ACTIVE"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is mailbox active",
            "example": true
          }
        }
      },
      "UpdateWorkspaceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Workspace name",
            "example": "My Company"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is workspace active",
            "example": true,
            "default": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is workspace deleted",
            "example": false
          }
        }
      },
      "PlanFeatureResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Plan feature ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "featureId": {
            "type": "string",
            "description": "Feature ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "includedLimit": {
            "type": "number",
            "description": "Included limit",
            "example": 10
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit price in cents",
            "example": 299
          },
          "resetCycle": {
            "type": "string",
            "description": "Reset cycle",
            "enum": [
              "MONTHLY",
              "YEARLY",
              "WEEKLY",
              "QUARTERLY",
              "ONE_TIME",
              "DAILY",
              "NO_RESET"
            ],
            "example": "MONTHLY"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is feature active",
            "example": true
          },
          "displayOrder": {
            "type": "number",
            "description": "Display order",
            "example": 1
          },
          "showOnList": {
            "type": "boolean",
            "description": "Show on list",
            "example": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is feature deleted",
            "example": false
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created at",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Updated at",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Deleted at",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "plan": {
            "type": "object",
            "description": "Plan details"
          },
          "feature": {
            "type": "object",
            "description": "Feature details"
          }
        },
        "required": [
          "id",
          "planId",
          "featureId",
          "resetCycle",
          "isActive",
          "showOnList",
          "isDeleted",
          "createdAt",
          "updatedAt"
        ]
      },
      "PlanPriceResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Plan price ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "billingCycle": {
            "type": "string",
            "description": "Billing cycle",
            "enum": [
              "MONTHLY",
              "YEARLY",
              "WEEKLY",
              "QUARTERLY",
              "ONE_TIME"
            ],
            "example": "MONTHLY"
          },
          "amount": {
            "type": "number",
            "description": "Price amount in cents",
            "example": 2999
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "description": {
            "type": "string",
            "description": "Price description",
            "example": "Monthly subscription fee"
          },
          "stripePriceId": {
            "type": "string",
            "description": "Stripe Price ID",
            "example": "price_1234567890"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is price active",
            "example": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is price deleted",
            "example": false
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created at",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Updated at",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Deleted at",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "plan": {
            "type": "object",
            "description": "Plan details"
          },
          "mailboxes": {
            "description": "Mailboxes using this price",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "planId",
          "billingCycle",
          "amount",
          "currency",
          "isActive",
          "isDeleted",
          "createdAt",
          "updatedAt"
        ]
      },
      "PlanAddonResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Plan addon ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "productId": {
            "type": "string",
            "description": "Product ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "productPriceId": {
            "type": "string",
            "description": "Product Price ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "displayOrder": {
            "type": "number",
            "description": "Display order",
            "example": 1
          },
          "isActive": {
            "type": "boolean",
            "description": "Is addon active",
            "example": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is addon deleted",
            "example": false
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created at",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Updated at",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Deleted at",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "plan": {
            "type": "object",
            "description": "Plan details"
          },
          "product": {
            "type": "object",
            "description": "Product details"
          },
          "prices": {
            "description": "Price details",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "planId",
          "productId",
          "productPriceId",
          "displayOrder",
          "isActive",
          "isDeleted",
          "createdAt",
          "updatedAt"
        ]
      },
      "PlanResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "officeLocationId": {
            "type": "string",
            "description": "Office location ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Plan name",
            "example": "Basic Plan"
          },
          "slug": {
            "type": "string",
            "description": "Plan slug",
            "example": "basic-plan"
          },
          "description": {
            "type": "string",
            "description": "Plan description",
            "example": "Basic plan with essential features"
          },
          "imageUrl": {
            "type": "string",
            "description": "Plan image URL",
            "example": "https://example.com/plan-image.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is plan active",
            "example": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is plan deleted",
            "example": false
          },
          "showOnMarketplace": {
            "type": "boolean",
            "description": "Show on marketplace",
            "example": true
          },
          "displayFeatures": {
            "type": "object",
            "description": "Display features for UI"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created at",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Updated at",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Deleted at",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "officeLocation": {
            "type": "object",
            "description": "Office location details"
          },
          "features": {
            "description": "Plan features",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanFeatureResponseDto"
            }
          },
          "prices": {
            "description": "Plan prices",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanPriceResponseDto"
            }
          },
          "addons": {
            "description": "Plan addons",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanAddonResponseDto"
            }
          },
          "mailboxes": {
            "description": "Mailboxes using this plan",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "officeLocationId",
          "name",
          "slug",
          "isActive",
          "isDeleted",
          "showOnMarketplace",
          "createdAt",
          "updatedAt"
        ]
      },
      "ActiveOfficeLocationResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Location ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "label": {
            "type": "string",
            "description": "Location label",
            "example": "Soho - NYC"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "description": "State or Province",
            "example": "NY"
          },
          "country": {
            "type": "string",
            "description": "Country",
            "example": "United States"
          },
          "description": {
            "type": "string",
            "description": "Location description",
            "example": "Premium office space in the heart of Soho"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is location active",
            "example": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update date",
            "example": "2024-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "label",
          "city",
          "state",
          "country",
          "isActive",
          "createdAt",
          "updatedAt"
        ]
      },
      "PackageItemResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Item ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "packageId": {
            "type": "string",
            "description": "Package ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Item name",
            "example": "Legal Document"
          },
          "description": {
            "type": "string",
            "description": "Item description",
            "example": "Important legal document from law firm"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of items",
            "example": 1
          },
          "weightKg": {
            "type": "number",
            "description": "Weight in kilograms",
            "example": 0.5
          },
          "width": {
            "type": "number",
            "description": "Width in centimeters",
            "example": 21
          },
          "height": {
            "type": "number",
            "description": "Height in centimeters",
            "example": 29.7
          },
          "length": {
            "type": "number",
            "description": "Length in centimeters",
            "example": 0.1
          },
          "volumeDesi": {
            "type": "number",
            "description": "Volume in desi",
            "example": 0.1
          },
          "photoUrls": {
            "description": "Photo URLs",
            "example": [
              "https://s3.amazonaws.com/bucket/photo1.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isShereded": {
            "type": "boolean",
            "description": "Is item shredded",
            "example": false
          },
          "isForwarded": {
            "type": "boolean",
            "description": "Is item forwarded",
            "example": false
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is item deleted",
            "example": false
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Deletion date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "package": {
            "type": "object",
            "description": "Package details"
          }
        },
        "required": [
          "id",
          "packageId",
          "name",
          "quantity",
          "isShereded",
          "isForwarded",
          "isDeleted",
          "createdAt",
          "updatedAt"
        ]
      },
      "PackageResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Package ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "steNumber": {
            "type": "string",
            "description": "STE number on the package",
            "example": "004712"
          },
          "workspaceAddressId": {
            "type": "string",
            "description": "Workspace address ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "officeLocationId": {
            "type": "string",
            "description": "Office location ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "type": {
            "type": "string",
            "description": "Package type",
            "enum": [
              "BANK_CHECK",
              "LEGAL_DOCUMENT",
              "ENVELOPE",
              "PACKAGE",
              "OTHER"
            ],
            "example": "PACKAGE"
          },
          "receivedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when package was received",
            "example": "2024-01-01T10:00:00.000Z"
          },
          "senderName": {
            "type": "string",
            "description": "Sender name",
            "example": "John Doe Company"
          },
          "senderAddress": {
            "type": "string",
            "description": "Sender address",
            "example": "123 Main St, New York, NY 10001"
          },
          "carrier": {
            "type": "string",
            "description": "Carrier company",
            "example": "UPS"
          },
          "width": {
            "type": "number",
            "description": "Width in centimeters",
            "example": 30
          },
          "height": {
            "type": "number",
            "description": "Height in centimeters",
            "example": 20
          },
          "length": {
            "type": "number",
            "description": "Length in centimeters",
            "example": 15
          },
          "weightKg": {
            "type": "number",
            "description": "Weight in kilograms",
            "example": 2.5
          },
          "volumeDesi": {
            "type": "number",
            "description": "Volume in desi",
            "example": 9
          },
          "photoUrls": {
            "description": "Photo URLs",
            "example": [
              "https://s3.amazonaws.com/bucket/package1.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "Package status",
            "enum": [
              "PENDING",
              "FORWARDED",
              "SHREDDED",
              "COMPLETED",
              "CANCELLED",
              "IN_PROCESS"
            ],
            "example": "PENDING"
          },
          "isShereded": {
            "type": "boolean",
            "description": "Is package shredded",
            "example": false
          },
          "isForwarded": {
            "type": "boolean",
            "description": "Is package forwarded",
            "example": false
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "items": {
            "description": "Package items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageItemResponseDto"
            }
          },
          "workspaceAddress": {
            "type": "object",
            "description": "Workspace address details"
          },
          "officeLocation": {
            "type": "object",
            "description": "Office location details"
          },
          "actions": {
            "description": "Package actions",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "forwardRequests": {
            "description": "Forward requests",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "steNumber",
          "workspaceAddressId",
          "officeLocationId",
          "type",
          "receivedAt",
          "status",
          "isShereded",
          "isForwarded",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateOrderItemDto": {
        "type": "object",
        "properties": {
          "itemType": {
            "type": "string",
            "description": "Item type",
            "enum": [
              "PLAN",
              "ADDON",
              "PRODUCT"
            ],
            "example": "PLAN"
          },
          "itemId": {
            "type": "string",
            "description": "Item ID (Plan, Addon, or Product ID)",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity",
            "example": 1,
            "minimum": 1
          }
        },
        "required": [
          "itemType",
          "itemId"
        ]
      },
      "CreateOrderDto": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "description": "Subscription ID to add item to",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "items": {
            "description": "Items to add to the order",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOrderItemDto"
            }
          }
        },
        "required": [
          "subscriptionId",
          "items"
        ]
      },
      "CreateMailDto": {
        "type": "object",
        "properties": {
          "mailboxId": {
            "type": "string",
            "description": "Mailbox ID (subscription ID)",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "recipientId": {
            "type": "string",
            "description": "Recipient ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "receivedAt": {
            "type": "string",
            "description": "Date when mail was received",
            "example": "2024-01-01T10:00:00.000Z"
          },
          "type": {
            "type": "string",
            "description": "Mail type",
            "enum": [
              "BANK_CHECK",
              "LEGAL_DOCUMENT",
              "ENVELOPE",
              "PACKAGE",
              "OTHER"
            ],
            "example": "PACKAGE"
          },
          "senderName": {
            "type": "string",
            "description": "Sender name",
            "example": "John Doe Company"
          },
          "senderAddress": {
            "type": "string",
            "description": "Sender address",
            "example": "123 Main St, New York, NY 10001"
          },
          "carrier": {
            "type": "string",
            "description": "Carrier company",
            "example": "UPS"
          },
          "width": {
            "type": "number",
            "description": "Width in centimeters",
            "example": 30,
            "minimum": 0
          },
          "height": {
            "type": "number",
            "description": "Height in centimeters",
            "example": 20,
            "minimum": 0
          },
          "length": {
            "type": "number",
            "description": "Length in centimeters",
            "example": 15,
            "minimum": 0
          },
          "weightKg": {
            "type": "number",
            "description": "Weight in kilograms",
            "example": 2.5,
            "minimum": 0
          },
          "volumeDesi": {
            "type": "number",
            "description": "Volume in desi",
            "example": 9,
            "minimum": 0
          },
          "photoUrls": {
            "description": "Photo URLs",
            "example": [
              "https://s3.amazonaws.com/bucket/mail1.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "Mail status",
            "enum": [
              "PENDING",
              "FORWARDED",
              "SHREDDED",
              "COMPLETED",
              "CANCELLED",
              "IN_PROCESS"
            ],
            "example": "PENDING",
            "default": "PENDING"
          },
          "isShereded": {
            "type": "boolean",
            "description": "Is mail shredded",
            "example": false,
            "default": false
          },
          "isForwarded": {
            "type": "boolean",
            "description": "Is mail forwarded",
            "example": false,
            "default": false
          }
        },
        "required": [
          "mailboxId",
          "recipientId",
          "receivedAt",
          "type"
        ]
      },
      "UpdateMailDto": {
        "type": "object",
        "properties": {
          "mailboxId": {
            "type": "string",
            "description": "Mailbox ID (subscription ID)",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "recipientId": {
            "type": "string",
            "description": "Recipient ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "receivedAt": {
            "type": "string",
            "description": "Date when mail was received",
            "example": "2024-01-01T10:00:00.000Z"
          },
          "type": {
            "type": "string",
            "description": "Mail type",
            "enum": [
              "BANK_CHECK",
              "LEGAL_DOCUMENT",
              "ENVELOPE",
              "PACKAGE",
              "OTHER"
            ],
            "example": "PACKAGE"
          },
          "senderName": {
            "type": "string",
            "description": "Sender name",
            "example": "John Doe Company"
          },
          "senderAddress": {
            "type": "string",
            "description": "Sender address",
            "example": "123 Main St, New York, NY 10001"
          },
          "carrier": {
            "type": "string",
            "description": "Carrier company",
            "example": "UPS"
          },
          "width": {
            "type": "number",
            "description": "Width in centimeters",
            "example": 30,
            "minimum": 0
          },
          "height": {
            "type": "number",
            "description": "Height in centimeters",
            "example": 20,
            "minimum": 0
          },
          "length": {
            "type": "number",
            "description": "Length in centimeters",
            "example": 15,
            "minimum": 0
          },
          "weightKg": {
            "type": "number",
            "description": "Weight in kilograms",
            "example": 2.5,
            "minimum": 0
          },
          "volumeDesi": {
            "type": "number",
            "description": "Volume in desi",
            "example": 9,
            "minimum": 0
          },
          "photoUrls": {
            "description": "Photo URLs",
            "example": [
              "https://s3.amazonaws.com/bucket/mail1.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "Mail status",
            "enum": [
              "PENDING",
              "FORWARDED",
              "SHREDDED",
              "COMPLETED",
              "CANCELLED",
              "IN_PROCESS"
            ],
            "example": "PENDING",
            "default": "PENDING"
          },
          "isShereded": {
            "type": "boolean",
            "description": "Is mail shredded",
            "example": false,
            "default": false
          },
          "isForwarded": {
            "type": "boolean",
            "description": "Is mail forwarded",
            "example": false,
            "default": false
          }
        }
      },
      "UpdateActionStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "New action status",
            "enum": [
              "PENDING",
              "IN_PROGRESS",
              "DONE",
              "FAILED"
            ],
            "example": "IN_PROGRESS"
          },
          "reason": {
            "type": "string",
            "description": "Reason or error message (e.g., FAILED)",
            "example": "Address could not be verified"
          }
        },
        "required": [
          "status"
        ]
      },
      "CompleteForwardDto": {
        "type": "object",
        "properties": {
          "carrierId": {
            "type": "string",
            "description": "Carrier ID",
            "example": "f0d8f6d5-3e76-4e8e-8f3a-7d2c7b2a9b12"
          },
          "trackingCode": {
            "type": "string",
            "description": "Carrier tracking code",
            "example": "UPS1Z999AA101234567"
          },
          "shippingCost": {
            "type": "number",
            "description": "Shipping cost (in cents)",
            "example": 1299,
            "minimum": 0
          },
          "packagingCost": {
            "type": "number",
            "description": "Packaging cost (in cents)",
            "example": 300,
            "minimum": 0
          },
          "totalCost": {
            "type": "number",
            "description": "Total cost (in cents). If omitted, the service will calculate as shippingCost + packagingCost",
            "example": 1599,
            "minimum": 0
          }
        }
      },
      "CancelForwardDto": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Cancellation reason",
            "example": "Cancelled by user request"
          }
        },
        "required": [
          "reason"
        ]
      },
      "CreateMailActionDto": {
        "type": "object",
        "properties": {
          "mailId": {
            "type": "string",
            "description": "The Mail (package) ID related to the action",
            "example": "0b2e9d9b-9e32-4c8c-a2d9-3f7e2e3b5c1a"
          },
          "type": {
            "type": "string",
            "description": "Type of action",
            "enum": [
              "FORWARD",
              "SHRED",
              "SCAN",
              "HOLD",
              "JUNK"
            ],
            "example": "FORWARD"
          },
          "meta": {
            "type": "object",
            "description": "Additional details (FORWARD requires { forward: CreateForwardRequestInput })",
            "example": {
              "forward": {
                "mailboxId": "4c1c8e08-6d9e-4ea7-9b0c-4d6c5a5f4a11",
                "officeLocationId": "9a0f2eb1-2f9b-4c82-8d51-1d9a3e9b3d77",
                "deliveryAddressId": "a1b2c3d4-1111-2222-3333-444455556666",
                "deliverySpeedOptionId": "11111111-2222-3333-4444-555555555555",
                "packagingTypeOptionId": "77777777-8888-9999-aaaa-bbbbbbbbbbbb",
                "carrierId": "f0d8f6d5-3e76-4e8e-8f3a-7d2c7b2a9b12"
              }
            }
          },
          "markShredded": {
            "type": "boolean",
            "description": "Quickly mark the mail as shredded when SHRED action is completed",
            "example": true
          },
          "markJunk": {
            "type": "boolean",
            "description": "Mark the mail as JUNK",
            "example": false
          },
          "markHold": {
            "type": "boolean",
            "description": "Mark the mail as HOLD",
            "example": false
          },
          "markScanned": {
            "type": "boolean",
            "description": "Mark the mail as SCANNED",
            "example": false
          }
        },
        "required": [
          "mailId",
          "type"
        ]
      }
    }
  }
}