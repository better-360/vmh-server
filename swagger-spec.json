{
  "openapi": "3.0.0",
  "paths": {
    "/api/auth/redirect-link": {
      "get": {
        "operationId": "AuthController_authRedirect",
        "parameters": [
          {
            "name": "redirect",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/sign-in": {
      "post": {
        "operationId": "AuthController_signIn",
        "summary": "Sign in",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/refresh-token": {
      "post": {
        "operationId": "AuthController_refreshToken",
        "summary": "Generate new acces token with using refresh token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/request-reset-password": {
      "post": {
        "operationId": "AuthController_requestPasswordReset",
        "summary": "Create pasword reset request",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/verify-reset-token": {
      "post": {
        "operationId": "AuthController_VerifyResetToken",
        "summary": "Verify password reset token",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/request-email-verify": {
      "post": {
        "operationId": "AuthController_requestEmailVerify",
        "summary": "Create email verify request",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/verify-email-token": {
      "post": {
        "operationId": "AuthController_verifyEmailToken",
        "summary": "Verify email  verify token",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/reset-password": {
      "post": {
        "operationId": "AuthController_ResetPasswordConfirm",
        "summary": "Completes the password reset process by setting a new password.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/check-email": {
      "post": {
        "operationId": "AuthController_checkEmail",
        "summary": "Checks email address exists",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckEmailisExistDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/change-my-password": {
      "post": {
        "operationId": "AuthController_changePassword",
        "summary": "Change Password",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/user/me": {
      "post": {
        "operationId": "UserController_getMe",
        "summary": "Mevcut oturum açmış kullanıcının bilgilerini getirir",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "User Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/user/update-me": {
      "post": {
        "operationId": "UserController_updateUser",
        "summary": "Kullanıcı bilgilerini günceller",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/user/delete-me": {
      "delete": {
        "operationId": "UserController_deleteUser",
        "summary": "Mevcut oturum açmış kullanıcıyı siler",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/user/update-email": {
      "post": {
        "operationId": "UserController_updateEmail",
        "summary": "Kullanıcı e-posta adresini günceller",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeEmailDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "User Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/stats": {
      "get": {
        "operationId": "AdminMainController_getAdminStats",
        "summary": "Admin Panel İstatistikleri",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin Panel"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/support/tickets": {
      "get": {
        "operationId": "AdminSupportController_getTickets",
        "summary": "Tüm destek biletlerini getirir (Sadece ADMIN)",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin - Support Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/ticket/{id}/details": {
      "get": {
        "operationId": "AdminSupportController_getTicket",
        "summary": "Belirtilen destek biletinin detaylarını getirir (Sadece ADMIN)",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Admin - Support Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/support/add-message-to-ticket": {
      "post": {
        "operationId": "AdminSupportController_addMessageToTicket",
        "summary": "Bir destek biletine yetkili tarafından mesaj ekler (Sadece ADMIN)",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketMessageDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Admin - Support Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/ticket/{ticketId}/edit": {
      "post": {
        "operationId": "AdminSupportController_editTicket",
        "summary": "Bir destek biletinin durumunu günceller (Sadece ADMIN)",
        "parameters": [
          {
            "name": "ticketId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditTicketStatusDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Admin - Support Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/packages/all": {
      "get": {
        "operationId": "AdminPackageController_getPackages",
        "summary": "Get all packages",
        "description": "Retrieve a paginated list of all packages with filtering options",
        "parameters": [
          {
            "name": "workspaceAddressId",
            "required": false,
            "in": "query",
            "description": "Filter by workspace address ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "officeLocationId",
            "required": false,
            "in": "query",
            "description": "Filter by office location ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by package type",
            "schema": {
              "enum": [
                "BANK_CHECK",
                "LEGAL_DOCUMENT",
                "ENVELOPE",
                "PACKAGE",
                "OTHER"
              ],
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by package status",
            "schema": {
              "enum": [
                "PENDING",
                "IN_PROCESS",
                "COMPLETED",
                "CANCELLED"
              ],
              "type": "string"
            }
          },
          {
            "name": "steNumber",
            "required": false,
            "in": "query",
            "description": "Filter by STE number",
            "schema": {
              "example": "004712",
              "type": "string"
            }
          },
          {
            "name": "senderName",
            "required": false,
            "in": "query",
            "description": "Filter by sender name",
            "schema": {
              "example": "John Doe",
              "type": "string"
            }
          },
          {
            "name": "carrier",
            "required": false,
            "in": "query",
            "description": "Filter by carrier",
            "schema": {
              "example": "UPS",
              "type": "string"
            }
          },
          {
            "name": "isShereded",
            "required": false,
            "in": "query",
            "description": "Filter by shredded status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "isForwarded",
            "required": false,
            "in": "query",
            "description": "Filter by forwarded status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "receivedAtStart",
            "required": false,
            "in": "query",
            "description": "Filter by received date start (YYYY-MM-DD)",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "receivedAtEnd",
            "required": false,
            "in": "query",
            "description": "Filter by received date end (YYYY-MM-DD)",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PackageResponseDto"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Package Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/packages/{id}": {
      "get": {
        "operationId": "AdminPackageController_getPackageById",
        "summary": "Get package by ID",
        "description": "Retrieve a specific package with all its items and related information",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Package ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Package found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Package not found"
          }
        },
        "tags": [
          "Admin Package Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "AdminPackageController_updatePackage",
        "summary": "Update package",
        "description": "Update an existing package by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Package ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Package update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePackageDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Package updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Package not found"
          }
        },
        "tags": [
          "Admin Package Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/packages/workspace-address/{workspaceAddressId}": {
      "get": {
        "operationId": "AdminPackageController_getPackagesByWorkspaceAddress",
        "summary": "Get packages by workspace address",
        "description": "Retrieve all packages for a specific workspace address",
        "parameters": [
          {
            "name": "workspaceAddressId",
            "required": true,
            "in": "path",
            "description": "Workspace address ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "officeLocationId",
            "required": false,
            "in": "query",
            "description": "Filter by office location ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by package type",
            "schema": {
              "example": "PACKAGE",
              "enum": [
                "BANK_CHECK",
                "LEGAL_DOCUMENT",
                "ENVELOPE",
                "PACKAGE",
                "OTHER"
              ],
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by package status",
            "schema": {
              "example": "PENDING",
              "enum": [
                "PENDING",
                "IN_PROCESS",
                "COMPLETED",
                "CANCELLED"
              ],
              "type": "string"
            }
          },
          {
            "name": "steNumber",
            "required": false,
            "in": "query",
            "description": "Filter by STE number",
            "schema": {
              "example": "004712",
              "type": "string"
            }
          },
          {
            "name": "senderName",
            "required": false,
            "in": "query",
            "description": "Filter by sender name",
            "schema": {
              "example": "John Doe",
              "type": "string"
            }
          },
          {
            "name": "carrier",
            "required": false,
            "in": "query",
            "description": "Filter by carrier",
            "schema": {
              "example": "UPS",
              "type": "string"
            }
          },
          {
            "name": "isShereded",
            "required": false,
            "in": "query",
            "description": "Filter by shredded status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "isForwarded",
            "required": false,
            "in": "query",
            "description": "Filter by forwarded status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "receivedAtStart",
            "required": false,
            "in": "query",
            "description": "Filter by received date start",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "receivedAtEnd",
            "required": false,
            "in": "query",
            "description": "Filter by received date end",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PackageResponseDto"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Package Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/packages/office-location/{officeLocationId}": {
      "get": {
        "operationId": "AdminPackageController_getPackagesByOfficeLocation",
        "summary": "Get packages by office location",
        "description": "Retrieve all packages for a specific office location",
        "parameters": [
          {
            "name": "officeLocationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "workspaceAddressId",
            "required": false,
            "in": "query",
            "description": "Filter by workspace address ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by package type",
            "schema": {
              "example": "PACKAGE",
              "enum": [
                "BANK_CHECK",
                "LEGAL_DOCUMENT",
                "ENVELOPE",
                "PACKAGE",
                "OTHER"
              ],
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by package status",
            "schema": {
              "example": "PENDING",
              "enum": [
                "PENDING",
                "IN_PROCESS",
                "COMPLETED",
                "CANCELLED"
              ],
              "type": "string"
            }
          },
          {
            "name": "steNumber",
            "required": false,
            "in": "query",
            "description": "Filter by STE number",
            "schema": {
              "example": "004712",
              "type": "string"
            }
          },
          {
            "name": "senderName",
            "required": false,
            "in": "query",
            "description": "Filter by sender name",
            "schema": {
              "example": "John Doe",
              "type": "string"
            }
          },
          {
            "name": "carrier",
            "required": false,
            "in": "query",
            "description": "Filter by carrier",
            "schema": {
              "example": "UPS",
              "type": "string"
            }
          },
          {
            "name": "isShereded",
            "required": false,
            "in": "query",
            "description": "Filter by shredded status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "isForwarded",
            "required": false,
            "in": "query",
            "description": "Filter by forwarded status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "receivedAtStart",
            "required": false,
            "in": "query",
            "description": "Filter by received date start",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "receivedAtEnd",
            "required": false,
            "in": "query",
            "description": "Filter by received date end",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PackageResponseDto"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Package Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/packages/create-package": {
      "post": {
        "operationId": "AdminPackageController_createPackage",
        "summary": "Create a new package",
        "description": "Register a new package in the system without items",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Package creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePackageDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Package created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Workspace address or office location not found"
          },
          "409": {
            "description": "Package with this STE number already exists"
          }
        },
        "tags": [
          "Admin Package Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/addons/all": {
      "get": {
        "operationId": "AdminAddonsController_getAddons",
        "summary": "Get all addons",
        "description": "Retrieve a paginated list of all addons with their variants and plan associations",
        "parameters": [
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "isDeleted",
            "required": false,
            "in": "query",
            "description": "Filter by deleted status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in addon name and description",
            "schema": {
              "example": "storage",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Addons retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AddonResponseDto"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/addons/active": {
      "get": {
        "operationId": "AdminAddonsController_getActiveAddons",
        "summary": "Get active addons",
        "description": "Retrieve all active addons with their variants for public use",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Active addons retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddonResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/addons/{id}": {
      "get": {
        "operationId": "AdminAddonsController_getAddonById",
        "summary": "Get addon by ID",
        "description": "Retrieve a specific addon with all its variants and plan associations",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Addon ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Addon found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Addon not found"
          }
        },
        "tags": [
          "Admin Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "AdminAddonsController_updateAddon",
        "summary": "Update addon",
        "description": "Update an existing addon by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Addon ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Addon update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAddonDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Addon updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Addon not found"
          },
          "409": {
            "description": "Addon with this name already exists"
          }
        },
        "tags": [
          "Admin Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AdminAddonsController_deleteAddon",
        "summary": "Delete addon",
        "description": "Soft delete an addon by ID. This will mark the addon as deleted but keep it in the database.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Addon ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Addon deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Addon deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Addon not found"
          }
        },
        "tags": [
          "Admin Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/addons": {
      "post": {
        "operationId": "AdminAddonsController_createAddon",
        "summary": "Create a new addon",
        "description": "Create a new addon without variants",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Addon creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAddonDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Addon created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "409": {
            "description": "Addon with this name already exists"
          }
        },
        "tags": [
          "Admin Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/addons/with-variants": {
      "post": {
        "operationId": "AdminAddonsController_createAddonWithVariants",
        "summary": "Create addon with variants",
        "description": "Create a new addon along with its pricing variants in a single request",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Addon and variants creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAddonWithVariantsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Addon with variants created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "409": {
            "description": "Addon with this name already exists"
          }
        },
        "tags": [
          "Admin Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/addons/variants/all": {
      "get": {
        "operationId": "AdminAddonsController_getAddonVariants",
        "summary": "Get all addon variants",
        "description": "Retrieve a paginated list of all addon variants with filtering options",
        "parameters": [
          {
            "name": "addonId",
            "required": false,
            "in": "query",
            "description": "Filter by addon ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "currency",
            "required": false,
            "in": "query",
            "description": "Filter by currency",
            "schema": {
              "example": "USD",
              "type": "string"
            }
          },
          {
            "name": "isDeleted",
            "required": false,
            "in": "query",
            "description": "Filter by deleted status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Addon variants retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AddonVariantResponseDto"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/addons/variants/{id}": {
      "get": {
        "operationId": "AdminAddonsController_getAddonVariantById",
        "summary": "Get addon variant by ID",
        "description": "Retrieve a specific addon variant with its addon details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Addon variant ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Addon variant found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonVariantResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Addon variant not found"
          }
        },
        "tags": [
          "Admin Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "AdminAddonsController_updateAddonVariant",
        "summary": "Update addon variant",
        "description": "Update an existing addon variant by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Addon variant ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Addon variant update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAddonVariantDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Addon variant updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonVariantResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Addon variant not found"
          }
        },
        "tags": [
          "Admin Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AdminAddonsController_deleteAddonVariant",
        "summary": "Delete addon variant",
        "description": "Soft delete an addon variant by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Addon variant ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Addon variant deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Addon variant deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Addon variant not found"
          }
        },
        "tags": [
          "Admin Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/addons/variants": {
      "post": {
        "operationId": "AdminAddonsController_createAddonVariant",
        "summary": "Create addon variant",
        "description": "Create a new pricing variant for an existing addon",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Addon variant creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAddonVariantDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Addon variant created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonVariantResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Addon not found"
          }
        },
        "tags": [
          "Admin Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/addons/plan-addons/all": {
      "get": {
        "operationId": "AdminAddonsController_getPlanAddons",
        "summary": "Get all plan-addon associations",
        "description": "Retrieve all associations between plans and addons with filtering options",
        "parameters": [
          {
            "name": "planId",
            "required": false,
            "in": "query",
            "description": "Filter by plan ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "addonId",
            "required": false,
            "in": "query",
            "description": "Filter by addon ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "isIncludedInPlan",
            "required": false,
            "in": "query",
            "description": "Filter by included status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "isRequired",
            "required": false,
            "in": "query",
            "description": "Filter by required status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "isDeleted",
            "required": false,
            "in": "query",
            "description": "Filter by deleted status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan addons retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PlanAddonResponseDto"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/addons/plan-addons/{id}": {
      "get": {
        "operationId": "AdminAddonsController_getPlanAddonById",
        "summary": "Get plan addon by ID",
        "description": "Retrieve a specific plan-addon association by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan addon ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan addon found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanAddonResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Plan addon not found"
          }
        },
        "tags": [
          "Admin Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "AdminAddonsController_updatePlanAddon",
        "summary": "Update plan addon association",
        "description": "Update an existing plan-addon association by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan addon ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Plan addon update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlanAddonDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plan addon updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanAddonResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Plan addon not found"
          }
        },
        "tags": [
          "Admin Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AdminAddonsController_deletePlanAddon",
        "summary": "Delete plan addon association",
        "description": "Soft delete a plan-addon association by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan addon ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan addon deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Plan addon deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Plan addon not found"
          }
        },
        "tags": [
          "Admin Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/addons/plan-addons": {
      "post": {
        "operationId": "AdminAddonsController_createPlanAddon",
        "summary": "Create plan addon association",
        "description": "Associate an addon with a plan, defining how it should be offered to plan subscribers",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Plan addon association data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlanAddonDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Plan addon created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanAddonResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Plan or addon not found"
          },
          "409": {
            "description": "This addon is already associated with the plan"
          }
        },
        "tags": [
          "Admin Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/addons/plan-addons/bulk": {
      "post": {
        "operationId": "AdminAddonsController_bulkCreatePlanAddons",
        "summary": "Bulk create plan addon associations",
        "description": "Associate multiple addons with a plan in a single request",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Bulk plan addon creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCreatePlanAddonsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Plan addons created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AddonResponseDto"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "planAddonConfig": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "isIncludedInPlan": {
                                "type": "boolean"
                              },
                              "discountPercent": {
                                "type": "number"
                              },
                              "isRequired": {
                                "type": "boolean"
                              },
                              "displayOrder": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Plan not found"
          }
        },
        "tags": [
          "Admin Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "AdminAddonsController_bulkUpdatePlanAddons",
        "summary": "Bulk update plan addon associations",
        "description": "Update multiple plan-addon associations in a single request",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Bulk plan addon update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdatePlanAddonsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plan addons updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanAddonResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          }
        },
        "tags": [
          "Admin Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/addons/plans/{planId}/addons/{addonId}": {
      "delete": {
        "operationId": "AdminAddonsController_removeAddonFromPlan",
        "summary": "Remove addon from plan",
        "description": "Completely remove an addon from a plan (hard delete the association)",
        "parameters": [
          {
            "name": "planId",
            "required": true,
            "in": "path",
            "description": "Plan ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "addonId",
            "required": true,
            "in": "path",
            "description": "Addon ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Addon removed from plan successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Addon removed from plan successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Plan addon relation not found"
          }
        },
        "tags": [
          "Admin Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/locations/all": {
      "get": {
        "operationId": "AdminLocationController_getAllOfficeLocations",
        "summary": "Get all office locations with filters and pagination",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by label, city, or state",
            "schema": {
              "example": "NYC",
              "type": "string"
            }
          },
          {
            "name": "country",
            "required": false,
            "in": "query",
            "description": "Filter by country",
            "schema": {
              "example": "United States",
              "type": "string"
            }
          },
          {
            "name": "state",
            "required": false,
            "in": "query",
            "description": "Filter by state",
            "schema": {
              "example": "NY",
              "type": "string"
            }
          },
          {
            "name": "city",
            "required": false,
            "in": "query",
            "description": "Filter by city",
            "schema": {
              "example": "New York",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of office locations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OfficeLocationResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Office Locations"
        ]
      }
    },
    "/api/admin/locations/active": {
      "get": {
        "operationId": "AdminLocationController_getActiveOfficeLocations",
        "summary": "Get all active office locations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Active office locations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OfficeLocationResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Office Locations"
        ]
      }
    },
    "/api/admin/locations/{id}": {
      "get": {
        "operationId": "AdminLocationController_getOfficeLocationById",
        "summary": "Get office location by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Office location retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfficeLocationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Office location not found"
          }
        },
        "tags": [
          "Office Locations"
        ]
      },
      "put": {
        "operationId": "AdminLocationController_updateOfficeLocation",
        "summary": "Update office location",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOfficeLocationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Office location updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfficeLocationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Office location not found"
          },
          "409": {
            "description": "Office location with this label already exists"
          }
        },
        "tags": [
          "Office Locations"
        ]
      },
      "delete": {
        "operationId": "AdminLocationController_deleteOfficeLocation",
        "summary": "Delete office location (soft delete)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Office location deleted successfully"
          },
          "400": {
            "description": "Cannot delete location with active plans or addresses"
          },
          "404": {
            "description": "Office location not found"
          }
        },
        "tags": [
          "Office Locations"
        ]
      }
    },
    "/api/admin/locations/{id}/stats": {
      "get": {
        "operationId": "AdminLocationController_getLocationStats",
        "summary": "Get office location statistics",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Office location statistics retrieved successfully"
          },
          "404": {
            "description": "Office location not found"
          }
        },
        "tags": [
          "Office Locations"
        ]
      }
    },
    "/api/admin/locations": {
      "post": {
        "operationId": "AdminLocationController_createOfficeLocation",
        "summary": "Create a new office location",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOfficeLocationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Office location created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfficeLocationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Office location with this label already exists"
          }
        },
        "tags": [
          "Office Locations"
        ]
      }
    },
    "/api/admin/plans/all": {
      "get": {
        "operationId": "AdminPlansController_getPlans",
        "summary": "Get all plans",
        "description": "Retrieve a paginated list of all plans with their prices and features",
        "parameters": [
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "officeLocationId",
            "required": false,
            "in": "query",
            "description": "Office Location ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "isDeleted",
            "required": false,
            "in": "query",
            "description": "Filter by deleted status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in plan name and description",
            "schema": {
              "example": "Basic",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plans/active": {
      "get": {
        "operationId": "AdminPlansController_getActivePlansWithPrices",
        "summary": "Get active plans with prices",
        "description": "Retrieve all active plans with their associated prices and features",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Active plans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "prices": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "features": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plans/{id}": {
      "get": {
        "operationId": "AdminPlansController_getPlanById",
        "summary": "Get plan by ID",
        "description": "Retrieve detailed information about a specific plan including prices and features",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormattedPlanResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Plan not found"
          }
        },
        "tags": [
          "Admin Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "AdminPlansController_updatePlan",
        "summary": "Update an existing plan",
        "description": "Update plan properties such as name, description, or active status",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Plan update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlanDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plan updated successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Plan not found"
          },
          "409": {
            "description": "Plan with this slug already exists for this location"
          }
        },
        "tags": [
          "Admin Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AdminPlansController_deletePlan",
        "summary": "Delete a plan",
        "description": "Soft delete a plan and all its associated features and prices",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan deleted successfully"
          },
          "400": {
            "description": "Failed to delete plan"
          },
          "404": {
            "description": "Plan not found"
          }
        },
        "tags": [
          "Admin Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plans/create": {
      "post": {
        "operationId": "AdminPlansController_createPlan",
        "summary": "Create a new plan",
        "description": "Create a new subscription plan with name, description and other properties",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Plan creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlanDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Plan created successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "409": {
            "description": "Plan with this slug already exists for this location"
          }
        },
        "tags": [
          "Admin Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plans/create-with-features": {
      "post": {
        "operationId": "AdminPlansController_createPlanWithFeatures",
        "summary": "Create a complete plan with features and prices",
        "description": "Create a new subscription plan with all features and pricing options in one request",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Complete plan creation data with features and prices",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlanWithFeaturesDto"
              },
              "examples": {
                "Premium Business Plan": {
                  "value": {
                    "officeLocationId": "123e4567-e89b-12d3-a456-426614174000",
                    "name": "Premium Business Plan",
                    "slug": "premium-business",
                    "description": "Comprehensive business plan with advanced features",
                    "imageUrl": "https://example.com/premium-plan.png",
                    "isActive": true,
                    "features": [
                      {
                        "featureId": "be2294ec-a909-462f-a81c-276d6ebbfb58",
                        "includedLimit": 10,
                        "unitPrice": 500,
                        "isActive": true
                      },
                      {
                        "featureId": "5e37ea6d-cba2-4413-8209-57b3b2a77035",
                        "includedLimit": null,
                        "unitPrice": null,
                        "isActive": true
                      }
                    ],
                    "prices": [
                      {
                        "billingCycle": "MONTHLY",
                        "amount": 4999,
                        "currency": "USD",
                        "description": "Monthly subscription"
                      },
                      {
                        "billingCycle": "YEARLY",
                        "amount": 49999,
                        "currency": "USD",
                        "description": "Annual subscription (save 17%)"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Plan with features and prices created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "officeLocation": {
                      "type": "object"
                    },
                    "features": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "featureId": {
                            "type": "string"
                          },
                          "includedLimit": {
                            "type": "number",
                            "nullable": true
                          },
                          "unitPrice": {
                            "type": "number",
                            "nullable": true
                          },
                          "feature": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "prices": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "billingCycle": {
                            "type": "string"
                          },
                          "amount": {
                            "type": "number"
                          },
                          "currency": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or features not found"
          },
          "404": {
            "description": "Office location not found"
          },
          "409": {
            "description": "Plan with this slug already exists for this location"
          }
        },
        "tags": [
          "Admin Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plans/create-from-template": {
      "post": {
        "operationId": "AdminPlansController_createPlanFromTemplate",
        "summary": "Create plan from template",
        "description": "Create a new plan by copying from an existing template with optional overrides",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Plan from template creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlanFromTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Plan created from template successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Template or office location not found"
          },
          "409": {
            "description": "Plan with this slug already exists for this location"
          }
        },
        "tags": [
          "Admin Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plans/plan-prices/all": {
      "get": {
        "operationId": "AdminPlansController_getPlanPrices",
        "summary": "Get plan prices",
        "description": "Retrieve plan prices with optional filtering by plan, billing cycle, or currency",
        "parameters": [
          {
            "name": "planId",
            "required": false,
            "in": "query",
            "description": "Filter by plan ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "billingCycle",
            "required": false,
            "in": "query",
            "description": "Filter by billing cycle (monthly, yearly, etc.)",
            "schema": {
              "example": "MONTHLY",
              "enum": [
                "MONTHLY",
                "YEARLY",
                "WEEKLY",
                "QUARTERLY",
                "ONE_TIME"
              ],
              "type": "string"
            }
          },
          {
            "name": "currency",
            "required": false,
            "in": "query",
            "description": "Filter by currency code",
            "schema": {
              "example": "USD",
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan prices retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "planId": {
                        "type": "string"
                      },
                      "amount": {
                        "type": "number"
                      },
                      "currency": {
                        "type": "string"
                      },
                      "billingCycle": {
                        "type": "string"
                      },
                      "plan": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plans/plan-prices/{id}": {
      "get": {
        "operationId": "AdminPlansController_getPlanPriceById",
        "summary": "Get plan price by ID",
        "description": "Retrieve detailed information about a specific plan price",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan Price ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan price retrieved successfully"
          },
          "404": {
            "description": "Plan price not found"
          }
        },
        "tags": [
          "Admin Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "AdminPlansController_updatePlanPrice",
        "summary": "Update plan price",
        "description": "Update plan price properties such as amount, currency, or billing cycle",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan Price ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Plan price update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlanPriceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plan price updated successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Plan price not found"
          }
        },
        "tags": [
          "Admin Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AdminPlansController_deletePlanPrice",
        "summary": "Delete plan price",
        "description": "Soft delete a plan price configuration",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan Price ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan price deleted successfully"
          },
          "400": {
            "description": "Failed to delete plan price"
          },
          "404": {
            "description": "Plan price not found"
          }
        },
        "tags": [
          "Admin Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plans/plan-prices": {
      "post": {
        "operationId": "AdminPlansController_createPlanPrice",
        "summary": "Create plan price",
        "description": "Add a new price configuration for a plan with specific billing cycle and currency",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Plan price creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlanPriceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Plan price created successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Plan not found"
          },
          "409": {
            "description": "Price for this plan and billing cycle already exists"
          }
        },
        "tags": [
          "Admin Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/plans/{planId}/addons": {
      "get": {
        "operationId": "AdminPlansController_getAddonsByPlanId",
        "summary": "Get addons for a specific plan",
        "description": "Retrieve all addons associated with a specific plan, formatted for easy consumption",
        "parameters": [
          {
            "name": "planId",
            "required": true,
            "in": "path",
            "description": "Plan ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan addons retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AddonResponseDto"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "planAddonConfig": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "isIncludedInPlan": {
                                "type": "boolean"
                              },
                              "discountPercent": {
                                "type": "number"
                              },
                              "isRequired": {
                                "type": "boolean"
                              },
                              "displayOrder": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Admin Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/features/plan-features": {
      "get": {
        "operationId": "AdminFeaturesController_getPlanFeatures",
        "summary": "Get plan features",
        "description": "Retrieve plan-feature relationships with optional filtering by plan or feature",
        "parameters": [
          {
            "name": "planId",
            "required": false,
            "in": "query",
            "description": "Filter by plan ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "featureId",
            "required": false,
            "in": "query",
            "description": "Filter by feature ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan features retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "planId": {
                        "type": "string"
                      },
                      "featureId": {
                        "type": "string"
                      },
                      "includedLimit": {
                        "type": "number"
                      },
                      "unitPrice": {
                        "type": "number"
                      },
                      "plan": {
                        "type": "object"
                      },
                      "feature": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "AdminFeaturesController_createPlanFeature",
        "summary": "Add feature to plan",
        "description": "Create a new plan-feature relationship with limits and pricing",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Plan feature creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlanFeatureDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Feature added to plan successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Plan or feature not found"
          },
          "409": {
            "description": "This feature is already added to the plan"
          }
        },
        "tags": [
          "Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/features/plan-features/{id}": {
      "get": {
        "operationId": "AdminFeaturesController_getPlanFeatureById",
        "summary": "Get plan feature by ID",
        "description": "Retrieve detailed information about a specific plan-feature relationship",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan Feature ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan feature retrieved successfully"
          },
          "404": {
            "description": "Plan feature not found"
          }
        },
        "tags": [
          "Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "AdminFeaturesController_updatePlanFeature",
        "summary": "Update plan feature",
        "description": "Update plan-feature relationship properties like limits and pricing",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan Feature ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Plan feature update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlanFeatureDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plan feature updated successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Plan feature not found"
          }
        },
        "tags": [
          "Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AdminFeaturesController_deletePlanFeature",
        "summary": "Remove feature from plan",
        "description": "Soft delete a plan-feature relationship",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan Feature ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feature removed from plan successfully"
          },
          "400": {
            "description": "Failed to remove feature from plan"
          },
          "404": {
            "description": "Plan feature not found"
          }
        },
        "tags": [
          "Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/features/plan-features/bulk-create": {
      "post": {
        "operationId": "AdminFeaturesController_bulkCreatePlanFeatures",
        "summary": "Bulk add features to plan",
        "description": "Add multiple features to a plan in a single transaction",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Bulk plan features creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCreatePlanFeaturesDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Features added to plan successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Plan or one or more features not found"
          },
          "409": {
            "description": "Some features are already added to this plan"
          }
        },
        "tags": [
          "Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/features/plan-features/bulk-update": {
      "put": {
        "operationId": "AdminFeaturesController_bulkUpdatePlanFeatures",
        "summary": "Bulk update plan features",
        "description": "Update multiple plan-feature relationships in a single transaction",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Bulk plan features update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdatePlanFeaturesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plan features updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "One or more plan features not found"
          }
        },
        "tags": [
          "Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/features/all": {
      "get": {
        "operationId": "AdminFeaturesController_getFeatures",
        "summary": "Get all features",
        "description": "Retrieve a paginated list of all features with optional filtering and search capabilities",
        "parameters": [
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in feature name and description",
            "schema": {
              "example": "Virtual",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Features retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/features/{id}": {
      "get": {
        "operationId": "AdminFeaturesController_getFeatureById",
        "summary": "Get feature by ID",
        "description": "Retrieve detailed information about a specific feature",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Feature ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feature retrieved successfully"
          },
          "404": {
            "description": "Feature not found"
          }
        },
        "tags": [
          "Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/features/create": {
      "post": {
        "operationId": "AdminFeaturesController_createFeature",
        "summary": "Create a new feature",
        "description": "Create a new feature with name, description and other properties",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Feature creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFeatureDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Feature created successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "409": {
            "description": "Feature with this name already exists"
          }
        },
        "tags": [
          "Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/features/{id}/update": {
      "put": {
        "operationId": "AdminFeaturesController_updateFeature",
        "summary": "Update an existing feature",
        "description": "Update feature properties such as name, description, or active status",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Feature ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Feature update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFeatureDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Feature updated successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Feature not found"
          },
          "409": {
            "description": "Feature with this name already exists"
          }
        },
        "tags": [
          "Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/features/{id}/delete": {
      "delete": {
        "operationId": "AdminFeaturesController_deleteFeature",
        "summary": "Delete a feature",
        "description": "Soft delete a feature and all its associated plan features",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Feature ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feature deleted successfully"
          },
          "400": {
            "description": "Failed to delete feature"
          },
          "404": {
            "description": "Feature not found"
          }
        },
        "tags": [
          "Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/features/{id}/usage-in-plans": {
      "get": {
        "operationId": "AdminFeaturesController_getFeatureUsageInPlans",
        "summary": "Get feature usage in plans",
        "description": "Retrieve all plans that use a specific feature",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Feature ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feature usage in plans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "planId": {
                        "type": "string"
                      },
                      "featureId": {
                        "type": "string"
                      },
                      "plan": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Feature not found"
          }
        },
        "tags": [
          "Feature Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/support/add-message-to-ticket": {
      "post": {
        "operationId": "SupportController_addMessageToTicket",
        "summary": "Mevcut bir ticket’a mesaj ekler",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketMessageDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Support - Ticket System"
        ]
      }
    },
    "/api/support/ticket/{ticketId}/edit": {
      "post": {
        "operationId": "SupportController_editTicket",
        "summary": "Bir ticket’ın durumunu günceller",
        "parameters": [
          {
            "name": "ticketId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditTicketStatusDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Support - Ticket System"
        ]
      }
    },
    "/api/support/my-tickets": {
      "get": {
        "operationId": "SupportController_getMyTickets",
        "summary": "Kullanıcının oluşturduğu tüm destek biletlerini (tickets) getirir",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Support - Ticket System"
        ]
      }
    },
    "/api/support/ticket/{id}": {
      "get": {
        "operationId": "SupportController_getTicket",
        "summary": "Belirtilen destek biletinin detaylarını getirir",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Support - Ticket System"
        ]
      }
    },
    "/api/webhook": {
      "post": {
        "operationId": "WebhookController_handleStripeWebhook",
        "parameters": [
          {
            "name": "stripe-signature",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        }
      }
    },
    "/api/stripe/stripe-success": {
      "get": {
        "operationId": "StripeController_handleStripeSuccess",
        "parameters": [
          {
            "name": "session_id",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/checkout-session-completed": {
      "get": {
        "operationId": "StripeController_handleStripeWebhook",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/search": {
      "post": {
        "operationId": "StripeController_searchQuery",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/checkout": {
      "post": {
        "operationId": "StripeController_createCheckoutSession",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/products": {
      "get": {
        "operationId": "StripeController_getProducts",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/{productId}/details": {
      "get": {
        "operationId": "StripeController_getProductDetails",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/{productId}/prices": {
      "get": {
        "operationId": "StripeController_getProductPrices",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/create-customer": {
      "post": {
        "operationId": "StripeController_createCustomer",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/customer/{id}": {
      "get": {
        "operationId": "StripeController_getCustomer",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/product/{id}": {
      "delete": {
        "operationId": "StripeController_deleteProduct",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/invoices/all": {
      "get": {
        "operationId": "StripeController_getAllInvoices",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/invoices/{id}": {
      "get": {
        "operationId": "StripeController_getInvoiceById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/stripe/product/{id}/create-price": {
      "post": {
        "operationId": "StripeController_createPrice",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Stripe Operations"
        ]
      }
    },
    "/api/plans/all": {
      "get": {
        "operationId": "PlansController_getPlans",
        "summary": "Get all plans",
        "description": "Retrieve a paginated list of all plans with their prices and features",
        "parameters": [
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "officeLocationId",
            "required": false,
            "in": "query",
            "description": "Office Location ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "isDeleted",
            "required": false,
            "in": "query",
            "description": "Filter by deleted status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in plan name and description",
            "schema": {
              "example": "Basic",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/plans/active": {
      "get": {
        "operationId": "PlansController_getActivePlansWithPrices",
        "summary": "Get active plans with prices",
        "description": "Retrieve all active plans with their associated prices and features",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Active plans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "prices": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "features": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/plans/{id}": {
      "get": {
        "operationId": "PlansController_getPlanById",
        "summary": "Get plan by ID",
        "description": "Retrieve detailed information about a specific plan including prices and features",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormattedPlanResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Plan not found"
          }
        },
        "tags": [
          "Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/plans/plan-prices/{id}": {
      "get": {
        "operationId": "PlansController_getPlanPriceById",
        "summary": "Get plan price by ID",
        "description": "Retrieve detailed information about a specific plan price",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan Price ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan price retrieved successfully"
          },
          "404": {
            "description": "Plan price not found"
          }
        },
        "tags": [
          "Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/plans/{planId}/addons": {
      "get": {
        "operationId": "PlansController_getAddonsByPlanId",
        "summary": "Get addons for a specific plan",
        "description": "Retrieve all addons associated with a specific plan, formatted for easy consumption",
        "parameters": [
          {
            "name": "planId",
            "required": true,
            "in": "path",
            "description": "Plan ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan addons retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AddonResponseDto"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "planAddonConfig": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "isIncludedInPlan": {
                                "type": "boolean"
                              },
                              "discountPercent": {
                                "type": "number"
                              },
                              "isRequired": {
                                "type": "boolean"
                              },
                              "displayOrder": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Plan Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/locations": {
      "get": {
        "operationId": "LocationController_getAllOfficeLocations",
        "summary": "Get all office locations with filters and pagination",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by label, city, or state",
            "schema": {
              "example": "NYC",
              "type": "string"
            }
          },
          {
            "name": "country",
            "required": false,
            "in": "query",
            "description": "Filter by country",
            "schema": {
              "example": "United States",
              "type": "string"
            }
          },
          {
            "name": "state",
            "required": false,
            "in": "query",
            "description": "Filter by state",
            "schema": {
              "example": "NY",
              "type": "string"
            }
          },
          {
            "name": "city",
            "required": false,
            "in": "query",
            "description": "Filter by city",
            "schema": {
              "example": "New York",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of office locations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OfficeLocationResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Office Locations"
        ]
      }
    },
    "/api/locations/active": {
      "get": {
        "operationId": "LocationController_getActiveOfficeLocations",
        "summary": "Get all active office locations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Active office locations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OfficeLocationResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Office Locations"
        ]
      }
    },
    "/api/locations/{id}": {
      "get": {
        "operationId": "LocationController_getOfficeLocationById",
        "summary": "Get office location by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Office location retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfficeLocationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Office location not found"
          }
        },
        "tags": [
          "Office Locations"
        ]
      }
    },
    "/api/admin/catalog/templates/all": {
      "get": {
        "operationId": "TemplatesController_getPlanTemplates",
        "summary": "Get all plan templates",
        "description": "Retrieve a paginated list of all plan templates with their features",
        "parameters": [
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "isDeleted",
            "required": false,
            "in": "query",
            "description": "Filter by deleted status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in template name, slug and description",
            "schema": {
              "example": "basic",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan templates retrieved successfully"
          }
        },
        "tags": [
          "Template Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/catalog/templates/active": {
      "get": {
        "operationId": "TemplatesController_getActivePlanTemplates",
        "summary": "Get active plan templates",
        "description": "Retrieve all active plan templates for creating plans",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Active plan templates retrieved successfully"
          }
        },
        "tags": [
          "Template Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/catalog/templates/{id}": {
      "get": {
        "operationId": "TemplatesController_getPlanTemplateById",
        "summary": "Get plan template by ID",
        "description": "Retrieve detailed information about a specific plan template including features",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Template ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan template retrieved successfully"
          },
          "404": {
            "description": "Plan template not found"
          }
        },
        "tags": [
          "Template Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "TemplatesController_updatePlanTemplate",
        "summary": "Update an existing plan template",
        "description": "Update plan template properties such as name, description, or prices",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Template ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Plan template update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlanTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plan template updated successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Plan template not found"
          },
          "409": {
            "description": "Template with this name or slug already exists"
          }
        },
        "tags": [
          "Template Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/catalog/templates/templates": {
      "post": {
        "operationId": "TemplatesController_createPlanTemplate",
        "summary": "Create a new plan template",
        "description": "Create a new plan template with features that can be used to generate plans",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Plan template creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlanTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Plan template created successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "409": {
            "description": "Template with this name or slug already exists"
          }
        },
        "tags": [
          "Template Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/catalog/templates/{id}/delete": {
      "delete": {
        "operationId": "TemplatesController_deletePlanTemplate",
        "summary": "Delete a plan template",
        "description": "Soft delete a plan template and all its associated features",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Template ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan template deleted successfully"
          },
          "400": {
            "description": "Failed to delete plan template"
          },
          "404": {
            "description": "Plan template not found"
          }
        },
        "tags": [
          "Template Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/catalog/templates/{templateId}/features": {
      "post": {
        "operationId": "TemplatesController_addFeatureToTemplate",
        "summary": "Add feature to template",
        "description": "Add a feature with limits and pricing to a plan template",
        "parameters": [
          {
            "name": "templateId",
            "required": true,
            "in": "path",
            "description": "Template ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Template feature creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlanTemplateFeatureDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Feature added to template successfully"
          },
          "404": {
            "description": "Template or feature not found"
          },
          "409": {
            "description": "Feature already exists in this template"
          }
        },
        "tags": [
          "Template Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/admin/catalog/templates/{templateId}/features/{featureId}": {
      "put": {
        "operationId": "TemplatesController_updateTemplateFeature",
        "summary": "Update template feature",
        "description": "Update feature limits and pricing in a plan template",
        "parameters": [
          {
            "name": "templateId",
            "required": true,
            "in": "path",
            "description": "Template ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureId",
            "required": true,
            "in": "path",
            "description": "Feature ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Template feature update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlanTemplateFeatureDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template feature updated successfully"
          },
          "404": {
            "description": "Template feature not found"
          }
        },
        "tags": [
          "Template Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "TemplatesController_removeFeatureFromTemplate",
        "summary": "Remove feature from template",
        "description": "Remove a feature from a plan template",
        "parameters": [
          {
            "name": "templateId",
            "required": true,
            "in": "path",
            "description": "Template ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureId",
            "required": true,
            "in": "path",
            "description": "Feature ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feature removed from template successfully"
          },
          "404": {
            "description": "Template feature not found"
          }
        },
        "tags": [
          "Template Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/addons/{id}": {
      "get": {
        "operationId": "AddonsController_getAddonById",
        "summary": "Get addon by ID",
        "description": "Retrieve a specific addon with all its variants and plan associations",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Addon ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Addon found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Addon not found"
          }
        },
        "tags": [
          "Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/addons/variants/all": {
      "get": {
        "operationId": "AddonsController_getAddonVariants",
        "summary": "Get all addon variants",
        "description": "Retrieve a paginated list of all addon variants with filtering options",
        "parameters": [
          {
            "name": "addonId",
            "required": false,
            "in": "query",
            "description": "Filter by addon ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "currency",
            "required": false,
            "in": "query",
            "description": "Filter by currency",
            "schema": {
              "example": "USD",
              "type": "string"
            }
          },
          {
            "name": "isDeleted",
            "required": false,
            "in": "query",
            "description": "Filter by deleted status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Addon variants retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AddonVariantResponseDto"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/addons/variants/{id}": {
      "get": {
        "operationId": "AddonsController_getAddonVariantById",
        "summary": "Get addon variant by ID",
        "description": "Retrieve a specific addon variant with its addon details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Addon variant ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Addon variant found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddonVariantResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Addon variant not found"
          }
        },
        "tags": [
          "Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/addons/plan-addons/all": {
      "get": {
        "operationId": "AddonsController_getPlanAddons",
        "summary": "Get all plan-addon associations",
        "description": "Retrieve all associations between plans and addons with filtering options",
        "parameters": [
          {
            "name": "planId",
            "required": false,
            "in": "query",
            "description": "Filter by plan ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "addonId",
            "required": false,
            "in": "query",
            "description": "Filter by addon ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "isIncludedInPlan",
            "required": false,
            "in": "query",
            "description": "Filter by included status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "isRequired",
            "required": false,
            "in": "query",
            "description": "Filter by required status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "isDeleted",
            "required": false,
            "in": "query",
            "description": "Filter by deleted status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan addons retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PlanAddonResponseDto"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/addons/plan-addons/{id}": {
      "get": {
        "operationId": "AddonsController_getPlanAddonById",
        "summary": "Get plan addon by ID",
        "description": "Retrieve a specific plan-addon association by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Plan addon ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan addon found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanAddonResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Plan addon not found"
          }
        },
        "tags": [
          "Addon Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/subscription": {
      "get": {
        "operationId": "SubscriptionController_getWorkspaceSubscriptions",
        "summary": "Get workspace subscriptions",
        "description": "Retrieve workspace subscriptions with filtering and pagination",
        "parameters": [
          {
            "name": "workspaceId",
            "required": false,
            "in": "query",
            "description": "Filter by workspace ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "officeLocationId",
            "required": false,
            "in": "query",
            "description": "Filter by office location ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by subscription status",
            "schema": {
              "example": "ACTIVE",
              "enum": [
                "ACTIVE",
                "INACTIVE",
                "PENDING",
                "CANCELLED",
                "EXPIRED",
                "SUSPENDED"
              ],
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 10,
              "example": 10,
              "type": "number"
            }
          },
          {
            "description": "Filter by workspace ID",
            "required": false,
            "name": "workspaceId",
            "in": "query",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "description": "Filter by office location ID",
            "required": false,
            "name": "officeLocationId",
            "in": "query",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "description": "Filter by subscription status",
            "required": false,
            "name": "status",
            "in": "query",
            "schema": {
              "example": "ACTIVE",
              "enum": [
                "ACTIVE",
                "INACTIVE",
                "PENDING",
                "CANCELLED",
                "EXPIRED",
                "SUSPENDED"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter by active status",
            "required": false,
            "name": "isActive",
            "in": "query",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "description": "Page number",
            "required": false,
            "name": "page",
            "in": "query",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "description": "Number of items per page",
            "required": false,
            "name": "limit",
            "in": "query",
            "schema": {
              "default": 10,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscriptions retrieved successfully"
          }
        },
        "tags": [
          "Workspace Subscriptions"
        ]
      }
    },
    "/api/subscription/{id}": {
      "get": {
        "operationId": "SubscriptionController_getWorkspaceSubscriptionById",
        "summary": "Get workspace subscription by ID",
        "description": "Retrieve a specific workspace subscription with its items",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Subscription ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription retrieved successfully"
          },
          "404": {
            "description": "Subscription not found"
          }
        },
        "tags": [
          "Workspace Subscriptions"
        ]
      },
      "put": {
        "operationId": "SubscriptionController_updateWorkspaceSubscription",
        "summary": "Update workspace subscription",
        "description": "Update workspace subscription details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Subscription ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Subscription update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkspaceSubscriptionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription updated successfully"
          },
          "400": {
            "description": "Invalid input data or failed to update"
          },
          "404": {
            "description": "Subscription not found"
          }
        },
        "tags": [
          "Workspace Subscriptions"
        ]
      }
    },
    "/api/subscription/initial": {
      "post": {
        "operationId": "SubscriptionController_createInitialSubscription",
        "summary": "Create initial subscription",
        "description": "Create a new workspace subscription with initial plans, products, and addons",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Initial subscription data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInitialSubscriptionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Initial subscription created successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Workspace or office location not found"
          },
          "409": {
            "description": "Active subscription already exists for this office location"
          }
        },
        "tags": [
          "Workspace Subscriptions"
        ]
      }
    },
    "/api/subscription/add-item": {
      "post": {
        "operationId": "SubscriptionController_addItemToSubscription",
        "summary": "Add item to existing subscription",
        "description": "Add a new plan, product, or addon to an existing subscription",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Add item data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddItemToSubscriptionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item added to subscription successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Subscription or item not found"
          }
        },
        "tags": [
          "Workspace Subscriptions"
        ]
      }
    },
    "/api/subscription/item/{itemId}": {
      "patch": {
        "operationId": "SubscriptionController_updateWorkspaceSubscriptionItem",
        "summary": "Update subscription item",
        "description": "Update a specific subscription item (plan, product, or addon)",
        "parameters": [
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Subscription Item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Item update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkspaceSubscriptionItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription item updated successfully"
          },
          "400": {
            "description": "Invalid input data or failed to update"
          },
          "404": {
            "description": "Subscription item not found"
          }
        },
        "tags": [
          "Workspace Subscriptions"
        ]
      }
    },
    "/api/subscription/{id}/cancel": {
      "delete": {
        "operationId": "SubscriptionController_cancelWorkspaceSubscription",
        "summary": "Cancel workspace subscription",
        "description": "Cancel workspace subscription and all its items",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Subscription ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription cancelled successfully"
          },
          "400": {
            "description": "Failed to cancel subscription"
          },
          "404": {
            "description": "Subscription not found"
          }
        },
        "tags": [
          "Workspace Subscriptions"
        ]
      }
    },
    "/api/subscription/item/{itemId}/cancel": {
      "delete": {
        "operationId": "SubscriptionController_cancelSubscriptionItem",
        "summary": "Cancel subscription item",
        "description": "Cancel a specific subscription item",
        "parameters": [
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Subscription Item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription item cancelled successfully"
          },
          "400": {
            "description": "Failed to cancel subscription item"
          },
          "404": {
            "description": "Subscription item not found"
          }
        },
        "tags": [
          "Workspace Subscriptions"
        ]
      }
    },
    "/api/subscription/office/{officeLocationId}/active": {
      "get": {
        "operationId": "SubscriptionController_getActiveSubscriptionsForOffice",
        "summary": "Get active subscriptions for office",
        "description": "Retrieve all active subscriptions for a specific office location",
        "parameters": [
          {
            "name": "officeLocationId",
            "required": true,
            "in": "path",
            "description": "Office Location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Active subscriptions retrieved successfully"
          }
        },
        "tags": [
          "Workspace Subscriptions"
        ]
      }
    },
    "/api/subscription/workspace/{workspaceId}/active": {
      "get": {
        "operationId": "SubscriptionController_getWorkspaceActiveSubscriptions",
        "summary": "Get active subscriptions for workspace",
        "description": "Retrieve all active subscriptions for a specific workspace",
        "parameters": [
          {
            "name": "workspaceId",
            "required": true,
            "in": "path",
            "description": "Workspace ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Active subscriptions retrieved successfully"
          }
        },
        "tags": [
          "Workspace Subscriptions"
        ]
      }
    },
    "/api/shipping/speeds": {
      "post": {
        "operationId": "ShippingSpeedController_create",
        "summary": "Create a new shipping speed option",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShippingSpeedDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Shipping speed option created."
          },
          "400": {
            "description": "Invalid payload."
          }
        },
        "tags": [
          "Shipping Speeds"
        ]
      },
      "get": {
        "operationId": "ShippingSpeedController_findAll",
        "summary": "List all active shipping speed options",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of shipping speeds."
          }
        },
        "tags": [
          "Shipping Speeds"
        ]
      }
    },
    "/api/shipping/speeds/{id}": {
      "put": {
        "operationId": "ShippingSpeedController_update",
        "summary": "Update a shipping speed option by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the shipping speed option",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShippingSpeedDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shipping speed option updated."
          },
          "404": {
            "description": "Option not found."
          }
        },
        "tags": [
          "Shipping Speeds"
        ]
      },
      "delete": {
        "operationId": "ShippingSpeedController_remove",
        "summary": "Soft delete a shipping speed option by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the shipping speed option",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shipping speed option removed."
          },
          "404": {
            "description": "Option not found."
          }
        },
        "tags": [
          "Shipping Speeds"
        ]
      }
    },
    "/api/shipping/speeds/assign": {
      "post": {
        "operationId": "ShippingSpeedController_assign",
        "summary": "Assign a shipping speed to a location",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignShippingSpeedToLocationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Assignment created."
          },
          "400": {
            "description": "Invalid assignment data."
          }
        },
        "tags": [
          "Shipping Speeds"
        ]
      }
    },
    "/api/shipping/speeds/location/{locationId}/{speedId}": {
      "delete": {
        "operationId": "ShippingSpeedController_removeFromLocation",
        "summary": "Remove a shipping speed from a location",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "speedId",
            "required": true,
            "in": "path",
            "description": "Shipping speed ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment removed."
          },
          "404": {
            "description": "Assignment not found."
          }
        },
        "tags": [
          "Shipping Speeds"
        ]
      }
    },
    "/api/shipping/speeds/location/{locationId}": {
      "get": {
        "operationId": "ShippingSpeedController_findAssigned",
        "summary": "List active shipping speeds for a location",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of speeds."
          }
        },
        "tags": [
          "Shipping Speeds"
        ]
      }
    },
    "/api/shipping/packaging": {
      "post": {
        "operationId": "PackagingOptionController_create",
        "summary": "Create a new packaging option",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePackagingOptionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Packaging option created."
          },
          "400": {
            "description": "Invalid payload."
          }
        },
        "tags": [
          "Packaging Options"
        ]
      },
      "get": {
        "operationId": "PackagingOptionController_findAll",
        "summary": "List all active packaging options",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of packaging options."
          }
        },
        "tags": [
          "Packaging Options"
        ]
      }
    },
    "/api/shipping/packaging/{id}": {
      "put": {
        "operationId": "PackagingOptionController_update",
        "summary": "Update a packaging option by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the packaging option",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePackagingOptionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Packaging option updated."
          },
          "404": {
            "description": "Option not found."
          }
        },
        "tags": [
          "Packaging Options"
        ]
      },
      "delete": {
        "operationId": "PackagingOptionController_remove",
        "summary": "Soft delete a packaging option by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the packaging option",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packaging option removed."
          },
          "404": {
            "description": "Option not found."
          }
        },
        "tags": [
          "Packaging Options"
        ]
      }
    },
    "/api/shipping/packaging/assign": {
      "post": {
        "operationId": "PackagingOptionController_assign",
        "summary": "Assign a packaging option to a location",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignPackagingOptionToLocationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Assignment created."
          },
          "400": {
            "description": "Invalid assignment data."
          }
        },
        "tags": [
          "Packaging Options"
        ]
      }
    },
    "/api/shipping/packaging/location/{locationId}/{packagingId}": {
      "delete": {
        "operationId": "PackagingOptionController_removeFromLocation",
        "summary": "Remove a packaging option from a location",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packagingId",
            "required": true,
            "in": "path",
            "description": "Packaging option ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment removed."
          },
          "404": {
            "description": "Assignment not found."
          }
        },
        "tags": [
          "Packaging Options"
        ]
      }
    },
    "/api/shipping/packaging/location/{locationId}": {
      "get": {
        "operationId": "PackagingOptionController_findAssigned",
        "summary": "List active packaging options for a location",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of packaging options."
          }
        },
        "tags": [
          "Packaging Options"
        ]
      }
    },
    "/api/shipping/carriers": {
      "post": {
        "operationId": "CarrierController_create",
        "summary": "Create a new carrier",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCarrierDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Carrier created."
          },
          "400": {
            "description": "Invalid payload."
          }
        },
        "tags": [
          "Carriers"
        ]
      },
      "get": {
        "operationId": "CarrierController_findAll",
        "summary": "List all active carriers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of carriers."
          }
        },
        "tags": [
          "Carriers"
        ]
      }
    },
    "/api/shipping/carriers/{id}": {
      "put": {
        "operationId": "CarrierController_update",
        "summary": "Update a carrier by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the carrier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCarrierDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Carrier updated."
          },
          "404": {
            "description": "Carrier not found."
          }
        },
        "tags": [
          "Carriers"
        ]
      },
      "delete": {
        "operationId": "CarrierController_remove",
        "summary": "Soft delete a carrier by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the carrier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Carrier removed."
          },
          "404": {
            "description": "Carrier not found."
          }
        },
        "tags": [
          "Carriers"
        ]
      }
    },
    "/api/shipping/carriers/location/{locationId}": {
      "get": {
        "operationId": "CarrierController_findAssigned",
        "summary": "List active carriers for a location",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of carriers."
          }
        },
        "tags": [
          "Carriers"
        ]
      }
    },
    "/api/shipping/carriers/assign/{locationId}/{carrierId}": {
      "post": {
        "operationId": "CarrierController_assignToLocation",
        "summary": "Assign a carrier to a location",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "carrierId",
            "required": true,
            "in": "path",
            "description": "Carrier ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Assignment created."
          },
          "400": {
            "description": "Assignment invalid or duplicate."
          }
        },
        "tags": [
          "Carriers"
        ]
      }
    },
    "/api/shipping/carriers/location/{locationId}/{carrierId}": {
      "delete": {
        "operationId": "CarrierController_removeFromLocation",
        "summary": "Remove a carrier from a location",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Office location ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "carrierId",
            "required": true,
            "in": "path",
            "description": "Carrier ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment removed."
          },
          "404": {
            "description": "Assignment not found."
          }
        },
        "tags": [
          "Carriers"
        ]
      }
    },
    "/api/workspaces": {
      "post": {
        "operationId": "WorkspaceController_createWorkspace",
        "summary": "Yeni workspace oluşturur",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkspaceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Workspace başarıyla oluşturuldu"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "WorkspaceController_getUserWorkspaces",
        "summary": "Kullanıcının workspace'lerini listeler",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Sayfa numarası",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Sayfa başına kayıt sayısı",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Arama terimi",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Sadece aktif workspace'ler",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace listesi başarıyla alındı"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/workspaces/{id}": {
      "get": {
        "operationId": "WorkspaceController_getWorkspaceById",
        "summary": "Workspace detayını getirir",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace detayı başarıyla alındı"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "WorkspaceController_updateWorkspace",
        "summary": "Workspace bilgilerini günceller",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkspaceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workspace başarıyla güncellendi"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "WorkspaceController_deleteWorkspace",
        "summary": "Workspace'i siler",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace başarıyla silindi"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/workspaces/{id}/members": {
      "get": {
        "operationId": "WorkspaceController_getWorkspaceMembers",
        "summary": "Workspace üyelerini listeler",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace üyeleri başarıyla alındı"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "WorkspaceController_addWorkspaceMember",
        "summary": "Workspace'e üye ekler",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddWorkspaceMemberDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Üye başarıyla eklendi"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/workspaces/{id}/members/{memberId}": {
      "put": {
        "operationId": "WorkspaceController_updateWorkspaceMember",
        "summary": "Workspace üyesini günceller",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkspaceMemberDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Üye başarıyla güncellendi"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "WorkspaceController_removeWorkspaceMember",
        "summary": "Workspace'ten üye çıkarır",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Üye başarıyla çıkarıldı"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/workspaces/{id}/addresses": {
      "get": {
        "operationId": "WorkspaceController_getWorkspaceAddresses",
        "summary": "Workspace adreslerini listeler",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace adresleri başarıyla alındı"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "WorkspaceController_createWorkspaceAddress",
        "summary": "Workspace'e adres ekler",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkspaceAddressDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Adres başarıyla eklendi"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/workspaces/{id}/addresses/{addressId}": {
      "put": {
        "operationId": "WorkspaceController_updateWorkspaceAddress",
        "summary": "Workspace adresini günceller",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkspaceAddressDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Adres başarıyla güncellendi"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "WorkspaceController_deleteWorkspaceAddress",
        "summary": "Workspace adresini siler",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Adres başarıyla silindi"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/workspaces/{id}/delivery-addresses": {
      "get": {
        "operationId": "WorkspaceController_getWorkspaceDeliveryAddresses",
        "summary": "Workspace teslimat adreslerini listeler",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Teslimat adresleri başarıyla alındı"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "WorkspaceController_createWorkspaceDeliveryAddress",
        "summary": "Workspace'e teslimat adresi ekler",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkspaceDeliveryAddressDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Teslimat adresi başarıyla eklendi"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/workspaces/{id}/delivery-addresses/{deliveryAddressId}": {
      "put": {
        "operationId": "WorkspaceController_updateWorkspaceDeliveryAddress",
        "summary": "Workspace teslimat adresini günceller",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deliveryAddressId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkspaceDeliveryAddressDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Teslimat adresi başarıyla güncellendi"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "WorkspaceController_deleteWorkspaceDeliveryAddress",
        "summary": "Workspace teslimat adresini siler",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deliveryAddressId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Teslimat adresi başarıyla silindi"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/workspaces/{id}/subscriptions": {
      "get": {
        "operationId": "WorkspaceController_getWorkspaceSubscriptions",
        "summary": "Workspace aboneliklerini listeler",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Abonelikler başarıyla alındı"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "WorkspaceController_createWorkspaceSubscription",
        "summary": "Workspace'e abonelik ekler",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkspaceSubscriptionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Abonelik başarıyla eklendi"
          }
        },
        "tags": [
          "Workspace Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/packages/all": {
      "get": {
        "operationId": "PackageController_getPackages",
        "summary": "Get all packages",
        "description": "Retrieve a paginated list of all packages with filtering options",
        "parameters": [
          {
            "name": "workspaceAddressId",
            "required": false,
            "in": "query",
            "description": "Filter by workspace address ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "officeLocationId",
            "required": false,
            "in": "query",
            "description": "Filter by office location ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by package type",
            "schema": {
              "enum": [
                "BANK_CHECK",
                "LEGAL_DOCUMENT",
                "ENVELOPE",
                "PACKAGE",
                "OTHER"
              ],
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by package status",
            "schema": {
              "enum": [
                "PENDING",
                "IN_PROCESS",
                "COMPLETED",
                "CANCELLED"
              ],
              "type": "string"
            }
          },
          {
            "name": "steNumber",
            "required": false,
            "in": "query",
            "description": "Filter by STE number",
            "schema": {
              "example": "004712",
              "type": "string"
            }
          },
          {
            "name": "senderName",
            "required": false,
            "in": "query",
            "description": "Filter by sender name",
            "schema": {
              "example": "John Doe",
              "type": "string"
            }
          },
          {
            "name": "carrier",
            "required": false,
            "in": "query",
            "description": "Filter by carrier",
            "schema": {
              "example": "UPS",
              "type": "string"
            }
          },
          {
            "name": "isShereded",
            "required": false,
            "in": "query",
            "description": "Filter by shredded status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "isForwarded",
            "required": false,
            "in": "query",
            "description": "Filter by forwarded status",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "receivedAtStart",
            "required": false,
            "in": "query",
            "description": "Filter by received date start (YYYY-MM-DD)",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "receivedAtEnd",
            "required": false,
            "in": "query",
            "description": "Filter by received date end (YYYY-MM-DD)",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PackageResponseDto"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Package Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/packages/{id}": {
      "get": {
        "operationId": "PackageController_getPackageById",
        "summary": "Get package by ID",
        "description": "Retrieve a specific package with all its items and related information",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Package ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Package found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Package not found"
          }
        },
        "tags": [
          "Package Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/billing/create-initial-subscription-order": {
      "post": {
        "operationId": "BillingController_createInitialSubscriptionOrder",
        "summary": "Create initial subscription order",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInitialSubscriptionOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Billing"
        ]
      }
    },
    "/api/billing/create-order": {
      "post": {
        "operationId": "BillingController_createOrder",
        "summary": "Create initial subscription order",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Billing"
        ]
      }
    },
    "/api/billing/check-payment": {
      "get": {
        "operationId": "BillingController_checkPaymentStatus",
        "parameters": [
          {
            "name": "intentId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Billing"
        ]
      }
    }
  },
  "info": {
    "title": "Virtual Mail Hub",
    "description": "The Virtual Mail Hub API description",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "password123"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "TokenDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "The access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "CheckEmailisExistDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": [
          "email"
        ]
      },
      "ChangePasswordDto": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "description": "Current password of the user",
            "example": "password123"
          },
          "newPassword": {
            "type": "string",
            "description": "New password of the user",
            "example": "newpassword123"
          }
        },
        "required": [
          "currentPassword",
          "newPassword"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "Doe"
          },
          "telephone": {
            "type": "string",
            "description": "User telephone number",
            "example": "5374352423"
          },
          "profileImage": {
            "type": "string",
            "description": "URL to the user's profile image",
            "example": "https://example.com/image.jpg"
          },
          "notifications": {
            "type": "boolean",
            "description": "Indicates if the user wants to receive notifications",
            "example": true
          },
          "isActivate": {
            "type": "boolean",
            "description": "Indicates if the user account is active",
            "example": true
          }
        }
      },
      "ChangeEmailDto": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "description": "Current password of the user",
            "example": "password123"
          },
          "newEmail": {
            "type": "string",
            "description": "New email of the user",
            "example": "user@example.com"
          }
        },
        "required": [
          "currentPassword",
          "newEmail"
        ]
      },
      "MessageAttachment": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Dosya adı"
          },
          "url": {
            "type": "string",
            "example": "https://example.com/file.pdf"
          },
          "type": {
            "type": "string",
            "example": "pdf"
          }
        },
        "required": [
          "name",
          "url",
          "type"
        ]
      },
      "TicketMessageDto": {
        "type": "object",
        "properties": {
          "ticketId": {
            "type": "string",
            "description": "Subject of the ticket",
            "example": "I have a problem with my account"
          },
          "message": {
            "type": "string",
            "description": "Message of the ticket",
            "example": "I cannot login to my account"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachment"
            }
          }
        },
        "required": [
          "ticketId",
          "message"
        ]
      },
      "EditTicketStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the ticket",
            "example": "OPEN|IN_PROGRESS|CLOSED"
          },
          "priority": {
            "type": "string",
            "description": "Status of the ticket",
            "example": "LOW|MEDIUM|HIGH"
          }
        },
        "required": [
          "status",
          "priority"
        ]
      },
      "PackageItemResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Item ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "packageId": {
            "type": "string",
            "description": "Package ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Item name",
            "example": "Legal Document"
          },
          "description": {
            "type": "string",
            "description": "Item description",
            "example": "Important legal document from law firm"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of items",
            "example": 1
          },
          "weightKg": {
            "type": "number",
            "description": "Weight in kilograms",
            "example": 0.5
          },
          "width": {
            "type": "number",
            "description": "Width in centimeters",
            "example": 21
          },
          "height": {
            "type": "number",
            "description": "Height in centimeters",
            "example": 29.7
          },
          "length": {
            "type": "number",
            "description": "Length in centimeters",
            "example": 0.1
          },
          "volumeDesi": {
            "type": "number",
            "description": "Volume in desi",
            "example": 0.1
          },
          "photoUrls": {
            "description": "Photo URLs",
            "example": [
              "https://s3.amazonaws.com/bucket/photo1.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isShereded": {
            "type": "boolean",
            "description": "Is item shredded",
            "example": false
          },
          "isForwarded": {
            "type": "boolean",
            "description": "Is item forwarded",
            "example": false
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is item deleted",
            "example": false
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Deletion date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "package": {
            "type": "object",
            "description": "Package details"
          }
        },
        "required": [
          "id",
          "packageId",
          "name",
          "quantity",
          "isShereded",
          "isForwarded",
          "isDeleted",
          "createdAt",
          "updatedAt"
        ]
      },
      "PackageResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Package ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "steNumber": {
            "type": "string",
            "description": "STE number on the package",
            "example": "004712"
          },
          "workspaceAddressId": {
            "type": "string",
            "description": "Workspace address ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "officeLocationId": {
            "type": "string",
            "description": "Office location ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "type": {
            "type": "string",
            "description": "Package type",
            "enum": [
              "BANK_CHECK",
              "LEGAL_DOCUMENT",
              "ENVELOPE",
              "PACKAGE",
              "OTHER"
            ],
            "example": "PACKAGE"
          },
          "receivedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when package was received",
            "example": "2024-01-01T10:00:00.000Z"
          },
          "senderName": {
            "type": "string",
            "description": "Sender name",
            "example": "John Doe Company"
          },
          "senderAddress": {
            "type": "string",
            "description": "Sender address",
            "example": "123 Main St, New York, NY 10001"
          },
          "carrier": {
            "type": "string",
            "description": "Carrier company",
            "example": "UPS"
          },
          "width": {
            "type": "number",
            "description": "Width in centimeters",
            "example": 30
          },
          "height": {
            "type": "number",
            "description": "Height in centimeters",
            "example": 20
          },
          "length": {
            "type": "number",
            "description": "Length in centimeters",
            "example": 15
          },
          "weightKg": {
            "type": "number",
            "description": "Weight in kilograms",
            "example": 2.5
          },
          "volumeDesi": {
            "type": "number",
            "description": "Volume in desi",
            "example": 9
          },
          "photoUrls": {
            "description": "Photo URLs",
            "example": [
              "https://s3.amazonaws.com/bucket/package1.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "Package status",
            "enum": [
              "PENDING",
              "IN_PROCESS",
              "COMPLETED",
              "CANCELLED"
            ],
            "example": "PENDING"
          },
          "isShereded": {
            "type": "boolean",
            "description": "Is package shredded",
            "example": false
          },
          "isForwarded": {
            "type": "boolean",
            "description": "Is package forwarded",
            "example": false
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "items": {
            "description": "Package items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageItemResponseDto"
            }
          },
          "workspaceAddress": {
            "type": "object",
            "description": "Workspace address details"
          },
          "officeLocation": {
            "type": "object",
            "description": "Office location details"
          },
          "actions": {
            "description": "Package actions",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "forwardRequests": {
            "description": "Forward requests",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "steNumber",
          "workspaceAddressId",
          "officeLocationId",
          "type",
          "receivedAt",
          "status",
          "isShereded",
          "isForwarded",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreatePackageDto": {
        "type": "object",
        "properties": {
          "steNumber": {
            "type": "string",
            "description": "STE number on the package",
            "example": "004712"
          },
          "workspaceAddressId": {
            "type": "string",
            "description": "Workspace address ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "officeLocationId": {
            "type": "string",
            "description": "Office location ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "type": {
            "type": "string",
            "description": "Package type",
            "enum": [
              "BANK_CHECK",
              "LEGAL_DOCUMENT",
              "ENVELOPE",
              "PACKAGE",
              "OTHER"
            ],
            "example": "PACKAGE"
          },
          "receivedAt": {
            "type": "string",
            "description": "Date when package was received",
            "example": "2024-01-01T10:00:00.000Z"
          },
          "senderName": {
            "type": "string",
            "description": "Sender name",
            "example": "John Doe Company"
          },
          "senderAddress": {
            "type": "string",
            "description": "Sender address",
            "example": "123 Main St, New York, NY 10001"
          },
          "carrier": {
            "type": "string",
            "description": "Carrier company",
            "example": "UPS"
          },
          "width": {
            "type": "number",
            "description": "Width in centimeters",
            "example": 30,
            "minimum": 0
          },
          "height": {
            "type": "number",
            "description": "Height in centimeters",
            "example": 20,
            "minimum": 0
          },
          "length": {
            "type": "number",
            "description": "Length in centimeters",
            "example": 15,
            "minimum": 0
          },
          "weightKg": {
            "type": "number",
            "description": "Weight in kilograms",
            "example": 2.5,
            "minimum": 0
          },
          "volumeDesi": {
            "type": "number",
            "description": "Volume in desi",
            "example": 9,
            "minimum": 0
          },
          "photoUrls": {
            "description": "Photo URLs",
            "example": [
              "https://s3.amazonaws.com/bucket/package1.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "Package status",
            "enum": [
              "PENDING",
              "IN_PROCESS",
              "COMPLETED",
              "CANCELLED"
            ],
            "example": "PENDING",
            "default": "PENDING"
          },
          "isShereded": {
            "type": "boolean",
            "description": "Is package shredded",
            "example": false,
            "default": false
          },
          "isForwarded": {
            "type": "boolean",
            "description": "Is package forwarded",
            "example": false,
            "default": false
          }
        },
        "required": [
          "steNumber",
          "workspaceAddressId",
          "officeLocationId",
          "type",
          "receivedAt"
        ]
      },
      "UpdatePackageDto": {
        "type": "object",
        "properties": {
          "steNumber": {
            "type": "string",
            "description": "STE number on the package",
            "example": "004712"
          },
          "workspaceAddressId": {
            "type": "string",
            "description": "Workspace address ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "officeLocationId": {
            "type": "string",
            "description": "Office location ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "type": {
            "type": "string",
            "description": "Package type",
            "enum": [
              "BANK_CHECK",
              "LEGAL_DOCUMENT",
              "ENVELOPE",
              "PACKAGE",
              "OTHER"
            ],
            "example": "PACKAGE"
          },
          "receivedAt": {
            "type": "string",
            "description": "Date when package was received",
            "example": "2024-01-01T10:00:00.000Z"
          },
          "senderName": {
            "type": "string",
            "description": "Sender name",
            "example": "John Doe Company"
          },
          "senderAddress": {
            "type": "string",
            "description": "Sender address",
            "example": "123 Main St, New York, NY 10001"
          },
          "carrier": {
            "type": "string",
            "description": "Carrier company",
            "example": "UPS"
          },
          "width": {
            "type": "number",
            "description": "Width in centimeters",
            "example": 30,
            "minimum": 0
          },
          "height": {
            "type": "number",
            "description": "Height in centimeters",
            "example": 20,
            "minimum": 0
          },
          "length": {
            "type": "number",
            "description": "Length in centimeters",
            "example": 15,
            "minimum": 0
          },
          "weightKg": {
            "type": "number",
            "description": "Weight in kilograms",
            "example": 2.5,
            "minimum": 0
          },
          "volumeDesi": {
            "type": "number",
            "description": "Volume in desi",
            "example": 9,
            "minimum": 0
          },
          "photoUrls": {
            "description": "Photo URLs",
            "example": [
              "https://s3.amazonaws.com/bucket/package1.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "Package status",
            "enum": [
              "PENDING",
              "IN_PROCESS",
              "COMPLETED",
              "CANCELLED"
            ],
            "example": "PENDING",
            "default": "PENDING"
          },
          "isShereded": {
            "type": "boolean",
            "description": "Is package shredded",
            "example": false,
            "default": false
          },
          "isForwarded": {
            "type": "boolean",
            "description": "Is package forwarded",
            "example": false,
            "default": false
          }
        }
      },
      "AddonResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Addon ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Addon name",
            "example": "Extra Storage"
          },
          "description": {
            "type": "string",
            "description": "Addon description",
            "example": "Additional storage space for your packages"
          },
          "stripeProductId": {
            "type": "string",
            "description": "Stripe Product ID",
            "example": "prod_1234567890"
          },
          "imageUrl": {
            "type": "string",
            "description": "Addon image URL",
            "example": "https://example.com/addon-image.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is addon active",
            "example": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is addon deleted",
            "example": false
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Deletion date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "variants": {
            "description": "Addon variants",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "name",
          "isActive",
          "isDeleted",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateAddonDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Addon name",
            "example": "Extra Storage"
          },
          "description": {
            "type": "string",
            "description": "Addon description",
            "example": "Additional storage space for your packages"
          },
          "stripeProductId": {
            "type": "string",
            "description": "Stripe Product ID",
            "example": "prod_1234567890"
          },
          "imageUrl": {
            "type": "string",
            "description": "Addon image URL",
            "example": "https://example.com/addon-image.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is addon active",
            "example": true,
            "default": true
          }
        },
        "required": [
          "name"
        ]
      },
      "CreateAddonVariantForAddonDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Variant name",
            "example": "10GB Storage"
          },
          "description": {
            "type": "string",
            "description": "Variant description",
            "example": "10GB additional storage space"
          },
          "stripePriceId": {
            "type": "string",
            "description": "Stripe Price ID",
            "example": "price_1234567890"
          },
          "price": {
            "type": "number",
            "description": "Price in cents (e.g., 999 = $9.99)",
            "example": 999,
            "minimum": 0
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "imageUrl": {
            "type": "string",
            "description": "Variant image URL",
            "example": "https://example.com/variant-image.png"
          }
        },
        "required": [
          "name",
          "price",
          "currency"
        ]
      },
      "CreateAddonWithVariantsDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Addon name",
            "example": "Extra Storage"
          },
          "description": {
            "type": "string",
            "description": "Addon description",
            "example": "Additional storage space for your packages"
          },
          "stripeProductId": {
            "type": "string",
            "description": "Stripe Product ID",
            "example": "prod_1234567890"
          },
          "imageUrl": {
            "type": "string",
            "description": "Addon image URL",
            "example": "https://example.com/addon-image.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is addon active",
            "example": true,
            "default": true
          },
          "variants": {
            "description": "Addon variants to create",
            "example": [
              {
                "name": "10GB Storage",
                "description": "10GB additional storage space",
                "price": 999,
                "currency": "USD"
              },
              {
                "name": "50GB Storage",
                "description": "50GB additional storage space",
                "price": 4999,
                "currency": "USD"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateAddonVariantForAddonDto"
            }
          }
        },
        "required": [
          "name",
          "variants"
        ]
      },
      "UpdateAddonDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Addon name",
            "example": "Extra Storage"
          },
          "description": {
            "type": "string",
            "description": "Addon description",
            "example": "Additional storage space for your packages"
          },
          "stripeProductId": {
            "type": "string",
            "description": "Stripe Product ID",
            "example": "prod_1234567890"
          },
          "imageUrl": {
            "type": "string",
            "description": "Addon image URL",
            "example": "https://example.com/addon-image.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is addon active",
            "example": true,
            "default": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is addon deleted",
            "example": false,
            "default": false
          }
        }
      },
      "AddonVariantResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Variant ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "addonId": {
            "type": "string",
            "description": "Addon ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Variant name",
            "example": "10GB Storage"
          },
          "description": {
            "type": "string",
            "description": "Variant description",
            "example": "10GB additional storage space"
          },
          "stripePriceId": {
            "type": "string",
            "description": "Stripe Price ID",
            "example": "price_1234567890"
          },
          "price": {
            "type": "number",
            "description": "Price in cents",
            "example": 999
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "imageUrl": {
            "type": "string",
            "description": "Variant image URL",
            "example": "https://example.com/variant-image.png"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is variant deleted",
            "example": false
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Deletion date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "addon": {
            "description": "Addon details",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddonResponseDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "addonId",
          "name",
          "price",
          "currency",
          "isDeleted",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateAddonVariantDto": {
        "type": "object",
        "properties": {
          "addonId": {
            "type": "string",
            "description": "Addon ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Variant name",
            "example": "10GB Storage"
          },
          "description": {
            "type": "string",
            "description": "Variant description",
            "example": "10GB additional storage space"
          },
          "stripePriceId": {
            "type": "string",
            "description": "Stripe Price ID",
            "example": "price_1234567890"
          },
          "price": {
            "type": "number",
            "description": "Price in cents (e.g., 999 = $9.99)",
            "example": 999,
            "minimum": 0
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "imageUrl": {
            "type": "string",
            "description": "Variant image URL",
            "example": "https://example.com/variant-image.png"
          }
        },
        "required": [
          "addonId",
          "name",
          "price",
          "currency"
        ]
      },
      "UpdateAddonVariantDto": {
        "type": "object",
        "properties": {
          "addonId": {
            "type": "string",
            "description": "Addon ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Variant name",
            "example": "10GB Storage"
          },
          "description": {
            "type": "string",
            "description": "Variant description",
            "example": "10GB additional storage space"
          },
          "stripePriceId": {
            "type": "string",
            "description": "Stripe Price ID",
            "example": "price_1234567890"
          },
          "price": {
            "type": "number",
            "description": "Price in cents (e.g., 999 = $9.99)",
            "example": 999,
            "minimum": 0
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "imageUrl": {
            "type": "string",
            "description": "Variant image URL",
            "example": "https://example.com/variant-image.png"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is variant deleted",
            "example": false,
            "default": false
          }
        }
      },
      "PlanAddonResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Plan addon ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "addonId": {
            "type": "string",
            "description": "Addon ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isIncludedInPlan": {
            "type": "boolean",
            "description": "Is addon included in plan price",
            "example": false
          },
          "discountPercent": {
            "type": "number",
            "description": "Discount percentage for plan holders",
            "example": 20
          },
          "isRequired": {
            "type": "boolean",
            "description": "Is this addon required for the plan",
            "example": false
          },
          "displayOrder": {
            "type": "number",
            "description": "Display order",
            "example": 1
          },
          "isActive": {
            "type": "boolean",
            "description": "Is plan addon active",
            "example": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is plan addon deleted",
            "example": false
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Deletion date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "plan": {
            "type": "object",
            "description": "Plan details"
          },
          "addon": {
            "description": "Addon details",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddonResponseDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "planId",
          "addonId",
          "isIncludedInPlan",
          "isRequired",
          "isActive",
          "isDeleted",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreatePlanAddonDto": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "addonId": {
            "type": "string",
            "description": "Addon ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isIncludedInPlan": {
            "type": "boolean",
            "description": "Is addon included in plan price",
            "example": false,
            "default": false
          },
          "discountPercent": {
            "type": "number",
            "description": "Discount percentage for plan holders (0-100)",
            "example": 20,
            "minimum": 0,
            "maximum": 100
          },
          "isRequired": {
            "type": "boolean",
            "description": "Is this addon required for the plan",
            "example": false,
            "default": false
          },
          "displayOrder": {
            "type": "number",
            "description": "Display order",
            "example": 1,
            "minimum": 0
          },
          "isActive": {
            "type": "boolean",
            "description": "Is plan addon active",
            "example": true,
            "default": true
          }
        },
        "required": [
          "planId",
          "addonId"
        ]
      },
      "CreatePlanAddonForPlanDto": {
        "type": "object",
        "properties": {
          "addonId": {
            "type": "string",
            "description": "Addon ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isIncludedInPlan": {
            "type": "boolean",
            "description": "Is addon included in plan price",
            "example": false,
            "default": false
          },
          "discountPercent": {
            "type": "number",
            "description": "Discount percentage for plan holders (0-100)",
            "example": 20,
            "minimum": 0,
            "maximum": 100
          },
          "isRequired": {
            "type": "boolean",
            "description": "Is this addon required for the plan",
            "example": false,
            "default": false
          },
          "displayOrder": {
            "type": "number",
            "description": "Display order",
            "example": 1,
            "minimum": 0
          },
          "isActive": {
            "type": "boolean",
            "description": "Is plan addon active",
            "example": true,
            "default": true
          }
        },
        "required": [
          "addonId"
        ]
      },
      "BulkCreatePlanAddonsDto": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "addons": {
            "description": "Array of plan addons to create",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePlanAddonForPlanDto"
            }
          }
        },
        "required": [
          "planId",
          "addons"
        ]
      },
      "UpdatePlanAddonDto": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "addonId": {
            "type": "string",
            "description": "Addon ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isIncludedInPlan": {
            "type": "boolean",
            "description": "Is addon included in plan price",
            "example": false,
            "default": false
          },
          "discountPercent": {
            "type": "number",
            "description": "Discount percentage for plan holders (0-100)",
            "example": 20,
            "minimum": 0,
            "maximum": 100
          },
          "isRequired": {
            "type": "boolean",
            "description": "Is this addon required for the plan",
            "example": false,
            "default": false
          },
          "displayOrder": {
            "type": "number",
            "description": "Display order",
            "example": 1,
            "minimum": 0
          },
          "isActive": {
            "type": "boolean",
            "description": "Is plan addon active",
            "example": true,
            "default": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is plan addon deleted",
            "example": false,
            "default": false
          }
        }
      },
      "BulkUpdatePlanAddonsDto": {
        "type": "object",
        "properties": {
          "addons": {
            "description": "Array of plan addon updates",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "addons"
        ]
      },
      "OfficeLocationResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Location ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "label": {
            "type": "string",
            "description": "Location label",
            "example": "Soho - NYC"
          },
          "addressLine": {
            "type": "string",
            "description": "Address line 1",
            "example": "447 Broadway"
          },
          "addressLine2": {
            "type": "string",
            "description": "Address line 2",
            "example": "Suite 200"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "description": "State or Province",
            "example": "NY"
          },
          "country": {
            "type": "string",
            "description": "Country",
            "example": "United States"
          },
          "zipCode": {
            "type": "string",
            "description": "ZIP/Postal code",
            "example": "10013"
          },
          "description": {
            "type": "string",
            "description": "Location description",
            "example": "Premium office space in the heart of Soho"
          },
          "latitude": {
            "type": "number",
            "description": "Latitude coordinate",
            "example": 40.7205
          },
          "longitude": {
            "type": "number",
            "description": "Longitude coordinate",
            "example": -74.0031
          },
          "isActive": {
            "type": "boolean",
            "description": "Is location active",
            "example": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Deletion date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "plans": {
            "description": "Plans available at this location",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "workspaceAddresses": {
            "description": "Workspace addresses at this location",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "label",
          "addressLine",
          "city",
          "state",
          "country",
          "isActive",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateOfficeLocationDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Location label",
            "example": "Soho - NYC"
          },
          "addressLine": {
            "type": "string",
            "description": "Address line 1",
            "example": "447 Broadway"
          },
          "addressLine2": {
            "type": "string",
            "description": "Address line 2",
            "example": "Suite 200"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "description": "State or Province",
            "example": "NY"
          },
          "country": {
            "type": "string",
            "description": "Country",
            "example": "United States"
          },
          "zipCode": {
            "type": "string",
            "description": "ZIP/Postal code",
            "example": "10013"
          },
          "description": {
            "type": "string",
            "description": "Location description",
            "example": "Premium office space in the heart of Soho"
          },
          "latitude": {
            "type": "number",
            "description": "Latitude coordinate",
            "example": 40.7205
          },
          "longitude": {
            "type": "number",
            "description": "Longitude coordinate",
            "example": -74.0031
          },
          "isActive": {
            "type": "boolean",
            "description": "Is location active",
            "example": true,
            "default": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "example": "+1-555-0456"
          },
          "email": {
            "type": "string",
            "description": "Email",
            "example": "new@example.com"
          },
          "workingHours": {
            "type": "string",
            "description": "Working hours",
            "example": "8 AM - 6 PM"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone",
            "example": "America/New_York"
          }
        },
        "required": [
          "label",
          "addressLine",
          "city",
          "state",
          "country"
        ]
      },
      "UpdateOfficeLocationDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Location label",
            "example": "Soho - NYC"
          },
          "addressLine": {
            "type": "string",
            "description": "Address line 1",
            "example": "447 Broadway"
          },
          "addressLine2": {
            "type": "string",
            "description": "Address line 2",
            "example": "Suite 200"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "description": "State or Province",
            "example": "NY"
          },
          "country": {
            "type": "string",
            "description": "Country",
            "example": "United States"
          },
          "zipCode": {
            "type": "string",
            "description": "ZIP/Postal code",
            "example": "10013"
          },
          "description": {
            "type": "string",
            "description": "Location description",
            "example": "Premium office space in the heart of Soho"
          },
          "latitude": {
            "type": "number",
            "description": "Latitude coordinate",
            "example": 40.7205
          },
          "longitude": {
            "type": "number",
            "description": "Longitude coordinate",
            "example": -74.0031
          },
          "isActive": {
            "type": "boolean",
            "description": "Is location active",
            "example": true,
            "default": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "example": "+1-555-0456"
          },
          "email": {
            "type": "string",
            "description": "Email",
            "example": "new@example.com"
          },
          "workingHours": {
            "type": "string",
            "description": "Working hours",
            "example": "8 AM - 6 PM"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone",
            "example": "America/New_York"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is location deleted",
            "example": false,
            "default": false
          }
        }
      },
      "FormattedOfficeLocationDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "label",
          "city",
          "state"
        ]
      },
      "FormattedPlanPriceDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "billingCycle": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "stripePriceId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "billingCycle",
          "amount",
          "currency",
          "description",
          "stripePriceId"
        ]
      },
      "FormattedPlanFeatureDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "includedLimit": {
            "type": "number"
          },
          "unitPrice": {
            "type": "number"
          },
          "displayOrder": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "imageUrl",
          "includedLimit",
          "unitPrice",
          "displayOrder"
        ]
      },
      "FormattedPlanResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "officeLocation": {
            "$ref": "#/components/schemas/FormattedOfficeLocationDto"
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormattedPlanPriceDto"
            }
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormattedPlanFeatureDto"
            }
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "description",
          "imageUrl",
          "isActive",
          "createdAt",
          "updatedAt",
          "officeLocation",
          "prices",
          "features"
        ]
      },
      "CreatePlanDto": {
        "type": "object",
        "properties": {
          "officeLocationId": {
            "type": "string",
            "description": "Office Location ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Plan name",
            "example": "Basic Plan"
          },
          "slug": {
            "type": "string",
            "description": "Plan slug",
            "example": "basic-plan"
          },
          "description": {
            "type": "string",
            "description": "Plan description",
            "example": "Basic plan with essential features"
          },
          "imageUrl": {
            "type": "string",
            "description": "Plan image URL",
            "example": "https://example.com/plan-image.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is plan active",
            "example": true,
            "default": true
          }
        },
        "required": [
          "officeLocationId",
          "name",
          "slug"
        ]
      },
      "CreatePlanFeatureForPlanDto": {
        "type": "object",
        "properties": {
          "featureId": {
            "type": "string",
            "description": "Feature ID",
            "example": "be2294ec-a909-462f-a81c-276d6ebbfb58"
          },
          "includedLimit": {
            "type": "number",
            "description": "Included limit (null = unlimited, 0 = not included but available)",
            "example": 10,
            "minimum": 0
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit price in cents for additional usage (null = not available)",
            "example": 500,
            "minimum": 0
          },
          "isActive": {
            "type": "boolean",
            "description": "Is plan feature active",
            "example": true,
            "default": true
          }
        },
        "required": [
          "featureId"
        ]
      },
      "CreatePlanPriceForPlanDto": {
        "type": "object",
        "properties": {
          "billingCycle": {
            "type": "string",
            "description": "Billing cycle",
            "enum": [
              "MONTHLY",
              "YEARLY",
              "WEEKLY",
              "QUARTERLY",
              "ONE_TIME"
            ],
            "example": "MONTHLY"
          },
          "amount": {
            "type": "number",
            "description": "Price amount in cents (e.g., 4999 = $49.99)",
            "example": 4999,
            "minimum": 0
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "description": {
            "type": "string",
            "description": "Price description",
            "example": "Monthly subscription fee"
          },
          "stripePriceId": {
            "type": "string",
            "description": "Stripe Price ID",
            "example": "price_1234567890"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is price active",
            "example": true,
            "default": true
          }
        },
        "required": [
          "billingCycle",
          "amount",
          "currency"
        ]
      },
      "CreatePlanWithFeaturesDto": {
        "type": "object",
        "properties": {
          "officeLocationId": {
            "type": "string",
            "description": "Office Location ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Plan name",
            "example": "Premium Business Plan"
          },
          "slug": {
            "type": "string",
            "description": "Plan slug",
            "example": "premium-business"
          },
          "description": {
            "type": "string",
            "description": "Plan description",
            "example": "Comprehensive business plan with advanced features"
          },
          "imageUrl": {
            "type": "string",
            "description": "Plan image URL",
            "example": "https://example.com/premium-plan.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is plan active",
            "example": true,
            "default": true
          },
          "features": {
            "description": "Plan features to include",
            "example": [
              {
                "featureId": "be2294ec-a909-462f-a81c-276d6ebbfb58",
                "includedLimit": 10,
                "unitPrice": 500,
                "isActive": true
              },
              {
                "featureId": "5e37ea6d-cba2-4413-8209-57b3b2a77035",
                "includedLimit": null,
                "unitPrice": null,
                "isActive": true
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePlanFeatureForPlanDto"
            }
          },
          "prices": {
            "description": "Plan pricing options",
            "example": [
              {
                "billingCycle": "MONTHLY",
                "amount": 4999,
                "currency": "USD",
                "description": "Monthly subscription"
              },
              {
                "billingCycle": "YEARLY",
                "amount": 49999,
                "currency": "USD",
                "description": "Annual subscription (save 17%)"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePlanPriceForPlanDto"
            }
          }
        },
        "required": [
          "officeLocationId",
          "name",
          "slug",
          "features",
          "prices"
        ]
      },
      "CreatePlanFromTemplateDto": {
        "type": "object",
        "properties": {
          "templateId": {
            "type": "string",
            "description": "Template ID to copy from",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "officeLocationId": {
            "type": "string",
            "description": "Office Location ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Override plan name (optional)",
            "example": "NYC Basic Plan"
          },
          "slug": {
            "type": "string",
            "description": "Override plan slug (optional)",
            "example": "nyc-basic"
          },
          "priceMonthly": {
            "type": "number",
            "description": "Override monthly price (optional)",
            "example": 2499,
            "minimum": 0
          },
          "priceYearly": {
            "type": "number",
            "description": "Override yearly price (optional)",
            "example": 24999,
            "minimum": 0
          },
          "currency": {
            "type": "string",
            "description": "Override currency (optional)",
            "example": "EUR"
          }
        },
        "required": [
          "templateId",
          "officeLocationId"
        ]
      },
      "UpdatePlanDto": {
        "type": "object",
        "properties": {
          "officeLocationId": {
            "type": "string",
            "description": "Office Location ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Plan name",
            "example": "Basic Plan"
          },
          "slug": {
            "type": "string",
            "description": "Plan slug",
            "example": "basic-plan"
          },
          "description": {
            "type": "string",
            "description": "Plan description",
            "example": "Basic plan with essential features"
          },
          "imageUrl": {
            "type": "string",
            "description": "Plan image URL",
            "example": "https://example.com/plan-image.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is plan active",
            "example": true,
            "default": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is plan deleted",
            "example": false,
            "default": false
          }
        }
      },
      "CreatePlanPriceDto": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "billingCycle": {
            "type": "string",
            "description": "Billing cycle",
            "enum": [
              "MONTHLY",
              "YEARLY",
              "WEEKLY",
              "QUARTERLY",
              "ONE_TIME"
            ],
            "example": "YEARLY"
          },
          "amount": {
            "type": "number",
            "description": "Price amount in cents (e.g., 9999 = $99.99)",
            "example": 9999,
            "minimum": 0
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "description": {
            "type": "string",
            "description": "Price description",
            "example": "Monthly subscription fee"
          },
          "stripePriceId": {
            "type": "string",
            "description": "Stripe Price ID",
            "example": "price_1234567890"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is price active",
            "example": true,
            "default": true
          }
        },
        "required": [
          "planId",
          "billingCycle",
          "amount",
          "currency"
        ]
      },
      "UpdatePlanPriceDto": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "billingCycle": {
            "type": "string",
            "description": "Billing cycle",
            "enum": [
              "MONTHLY",
              "YEARLY",
              "WEEKLY",
              "QUARTERLY",
              "ONE_TIME"
            ],
            "example": "YEARLY"
          },
          "amount": {
            "type": "number",
            "description": "Price amount in cents (e.g., 9999 = $99.99)",
            "example": 9999,
            "minimum": 0
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "description": {
            "type": "string",
            "description": "Price description",
            "example": "Monthly subscription fee"
          },
          "stripePriceId": {
            "type": "string",
            "description": "Stripe Price ID",
            "example": "price_1234567890"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is price active",
            "example": true,
            "default": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is price deleted",
            "example": false,
            "default": false
          }
        }
      },
      "CreatePlanFeatureDto": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "featureId": {
            "type": "string",
            "description": "Feature ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "includedLimit": {
            "type": "number",
            "description": "Included limit (null = unlimited, 0 = not included but available for purchase)",
            "example": 5,
            "minimum": 0
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit price in cents (null = not available for purchase)",
            "example": 500,
            "minimum": 0
          },
          "isActive": {
            "type": "boolean",
            "description": "Is plan feature active",
            "example": true,
            "default": true
          },
          "displayOrder": {
            "type": "number",
            "description": "Display order",
            "example": 1
          }
        },
        "required": [
          "planId",
          "featureId"
        ]
      },
      "UpdatePlanFeatureDto": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "featureId": {
            "type": "string",
            "description": "Feature ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "includedLimit": {
            "type": "number",
            "description": "Included limit (null = unlimited, 0 = not included but available for purchase)",
            "example": 5,
            "minimum": 0
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit price in cents (null = not available for purchase)",
            "example": 500,
            "minimum": 0
          },
          "isActive": {
            "type": "boolean",
            "description": "Is plan feature active",
            "example": true,
            "default": true
          },
          "displayOrder": {
            "type": "number",
            "description": "Display order",
            "example": 1
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is plan feature deleted",
            "example": false,
            "default": false
          }
        }
      },
      "BulkCreatePlanFeaturesDto": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "features": {
            "description": "Array of plan features to create",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePlanFeatureDto"
            }
          }
        },
        "required": [
          "planId",
          "features"
        ]
      },
      "BulkUpdatePlanFeaturesDto": {
        "type": "object",
        "properties": {
          "features": {
            "description": "Array of plan feature updates",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "features"
        ]
      },
      "CreateFeatureDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Feature name",
            "example": "Virtual Address"
          },
          "description": {
            "type": "string",
            "description": "Feature description",
            "example": "Access to virtual business address services"
          },
          "imageUrl": {
            "type": "string",
            "description": "Feature image URL",
            "example": "https://example.com/feature-image.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is feature active",
            "example": true,
            "default": true
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateFeatureDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Feature name",
            "example": "Virtual Address"
          },
          "description": {
            "type": "string",
            "description": "Feature description",
            "example": "Access to virtual business address services"
          },
          "imageUrl": {
            "type": "string",
            "description": "Feature image URL",
            "example": "https://example.com/feature-image.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is feature active",
            "example": true,
            "default": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is feature deleted",
            "example": false,
            "default": false
          }
        }
      },
      "CreatePlanTemplateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name",
            "example": "Basic Package Template"
          },
          "slug": {
            "type": "string",
            "description": "Template slug",
            "example": "basic-package"
          },
          "description": {
            "type": "string",
            "description": "Template description",
            "example": "Basic package template for small businesses"
          },
          "imageUrl": {
            "type": "string",
            "description": "Template image URL",
            "example": "https://example.com/template-image.png"
          },
          "priceMonthly": {
            "type": "number",
            "description": "Monthly price in cents",
            "example": 1999,
            "minimum": 0
          },
          "priceYearly": {
            "type": "number",
            "description": "Yearly price in cents",
            "example": 19999,
            "minimum": 0
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD",
            "default": "USD"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is template active",
            "example": true,
            "default": true
          },
          "features": {
            "description": "Template features",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "name",
          "slug",
          "priceMonthly",
          "priceYearly"
        ]
      },
      "UpdatePlanTemplateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name",
            "example": "Basic Package Template"
          },
          "slug": {
            "type": "string",
            "description": "Template slug",
            "example": "basic-package"
          },
          "description": {
            "type": "string",
            "description": "Template description",
            "example": "Basic package template for small businesses"
          },
          "imageUrl": {
            "type": "string",
            "description": "Template image URL",
            "example": "https://example.com/template-image.png"
          },
          "priceMonthly": {
            "type": "number",
            "description": "Monthly price in cents",
            "example": 1999,
            "minimum": 0
          },
          "priceYearly": {
            "type": "number",
            "description": "Yearly price in cents",
            "example": 19999,
            "minimum": 0
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is template active",
            "example": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is template deleted",
            "example": false,
            "default": false
          }
        }
      },
      "CreatePlanTemplateFeatureDto": {
        "type": "object",
        "properties": {
          "featureId": {
            "type": "string",
            "description": "Feature ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "includedLimit": {
            "type": "number",
            "description": "Included limit (null = unlimited, 0 = not included)",
            "example": 5,
            "minimum": 0
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit price in cents (null = not available for purchase)",
            "example": 500,
            "minimum": 0
          },
          "isRequired": {
            "type": "boolean",
            "description": "Is feature required in template",
            "example": true,
            "default": false
          },
          "displayOrder": {
            "type": "number",
            "description": "Display order",
            "example": 1,
            "minimum": 0
          }
        },
        "required": [
          "featureId"
        ]
      },
      "UpdatePlanTemplateFeatureDto": {
        "type": "object",
        "properties": {
          "featureId": {
            "type": "string",
            "description": "Feature ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "includedLimit": {
            "type": "number",
            "description": "Included limit (null = unlimited, 0 = not included)",
            "example": 5,
            "minimum": 0
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit price in cents (null = not available for purchase)",
            "example": 500,
            "minimum": 0
          },
          "isRequired": {
            "type": "boolean",
            "description": "Is feature required in template",
            "example": true,
            "default": false
          },
          "displayOrder": {
            "type": "number",
            "description": "Display order",
            "example": 1,
            "minimum": 0
          }
        }
      },
      "CreateWorkspaceSubscriptionItemDto": {
        "type": "object",
        "properties": {
          "itemType": {
            "type": "string",
            "description": "Item type (PRODUCT, ADDON)",
            "enum": [
              "PRODUCT",
              "ADDON"
            ],
            "example": "ADDON"
          },
          "itemId": {
            "type": "string",
            "description": "Product or Addon ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "variantId": {
            "type": "string",
            "description": "Variant ID for Product or Addon variants",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "billingCycle": {
            "type": "string",
            "description": "Billing cycle",
            "enum": [
              "MONTHLY",
              "YEARLY",
              "WEEKLY",
              "QUARTERLY",
              "ONE_TIME"
            ],
            "example": "MONTHLY"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity",
            "example": 1
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit price in cents",
            "example": 9999
          },
          "totalPrice": {
            "type": "number",
            "description": "Total price in cents",
            "example": 9999
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "example": "USD",
            "default": "USD"
          },
          "startDate": {
            "format": "date-time",
            "type": "string",
            "description": "Item start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "endDate": {
            "format": "date-time",
            "type": "string",
            "description": "Item end date (null for one-time payments)",
            "example": "2024-12-31T23:59:59.999Z"
          },
          "itemName": {
            "type": "string",
            "description": "Item name",
            "example": "Premium Addon"
          },
          "itemDescription": {
            "type": "string",
            "description": "Item description",
            "example": "Premium addon with unlimited features"
          }
        },
        "required": [
          "itemType",
          "itemId",
          "billingCycle",
          "quantity",
          "unitPrice",
          "totalPrice",
          "startDate",
          "itemName"
        ]
      },
      "CreateInitialSubscriptionDto": {
        "type": "object",
        "properties": {
          "workspaceId": {
            "type": "string",
            "description": "Workspace ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "officeLocationId": {
            "type": "string",
            "description": "Office Location ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "planPriceId": {
            "type": "string",
            "description": "Plan Price ID (ana abonelik)",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "stripeSubscriptionId": {
            "type": "string",
            "description": "Stripe subscription ID",
            "example": "sub_1234567890"
          },
          "startDate": {
            "format": "date-time",
            "type": "string",
            "description": "Subscription start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "items": {
            "description": "Additional items (products, addons)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateWorkspaceSubscriptionItemDto"
            }
          }
        },
        "required": [
          "workspaceId",
          "officeLocationId",
          "planPriceId",
          "startDate"
        ]
      },
      "AddItemToSubscriptionDto": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "description": "Subscription ID to add item to",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "item": {
            "description": "Subscription item to add",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateWorkspaceSubscriptionItemDto"
              }
            ]
          }
        },
        "required": [
          "subscriptionId",
          "item"
        ]
      },
      "UpdateWorkspaceSubscriptionDto": {
        "type": "object",
        "properties": {
          "stripeSubscriptionId": {
            "type": "string",
            "description": "Stripe subscription ID",
            "example": "sub_1234567890"
          },
          "status": {
            "type": "string",
            "description": "Subscription status",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "PENDING",
              "CANCELLED",
              "EXPIRED",
              "SUSPENDED"
            ],
            "example": "ACTIVE"
          },
          "startDate": {
            "format": "date-time",
            "type": "string",
            "description": "Subscription start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "endDate": {
            "format": "date-time",
            "type": "string",
            "description": "Subscription end date",
            "example": "2024-12-31T23:59:59.999Z"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is subscription active",
            "example": true
          }
        }
      },
      "UpdateWorkspaceSubscriptionItemDto": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number",
            "description": "Quantity",
            "example": 2
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit price in cents",
            "example": 9999
          },
          "totalPrice": {
            "type": "number",
            "description": "Total price in cents",
            "example": 19998
          },
          "startDate": {
            "format": "date-time",
            "type": "string",
            "description": "Item start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "endDate": {
            "format": "date-time",
            "type": "string",
            "description": "Item end date",
            "example": "2024-12-31T23:59:59.999Z"
          },
          "status": {
            "type": "string",
            "description": "Item status",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "PENDING",
              "CANCELLED",
              "EXPIRED",
              "SUSPENDED"
            ],
            "example": "ACTIVE"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is item active",
            "example": true
          }
        }
      },
      "CreateShippingSpeedDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Unique label for the shipping speed option",
            "example": "STANDARD"
          },
          "title": {
            "type": "string",
            "description": "Display title for the shipping speed option",
            "example": "Standard Delivery"
          },
          "description": {
            "type": "string",
            "description": "Optional description for the shipping speed option",
            "example": "Delivered within 5-7 business days"
          },
          "price": {
            "type": "number",
            "description": "Default base price in cents for this shipping speed",
            "example": 500
          }
        },
        "required": [
          "label",
          "title",
          "price"
        ]
      },
      "UpdateShippingSpeedDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Unique label for the shipping speed option",
            "example": "STANDARD"
          },
          "title": {
            "type": "string",
            "description": "Display title for the shipping speed option",
            "example": "Standard Delivery"
          },
          "description": {
            "type": "string",
            "description": "Optional description for the shipping speed option",
            "example": "Delivered within 5-7 business days"
          },
          "price": {
            "type": "number",
            "description": "Default base price in cents for this shipping speed",
            "example": 500
          },
          "isActive": {
            "type": "boolean",
            "description": "Active flag to soft delete or restore the option",
            "example": true
          }
        }
      },
      "AssignShippingSpeedToLocationDto": {
        "type": "object",
        "properties": {
          "deliverySpeedId": {
            "type": "string",
            "description": "ID of the shipping speed option to assign",
            "example": "uuid-of-speed-option"
          },
          "officeLocationId": {
            "type": "string",
            "description": "ID of the office location",
            "example": "uuid-of-office-location"
          },
          "price": {
            "type": "number",
            "description": "Price override in cents for this speed at this location",
            "example": 700
          },
          "isActive": {
            "type": "boolean",
            "description": "Active flag for this assignment",
            "example": true
          }
        },
        "required": [
          "deliverySpeedId",
          "officeLocationId"
        ]
      },
      "CreatePackagingOptionDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Unique label for the packaging option",
            "example": "STANDARD_BOX"
          },
          "title": {
            "type": "string",
            "description": "Display title of the packaging option",
            "example": "Standard Box"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the packaging option",
            "example": "A standard cardboard box"
          }
        },
        "required": [
          "label",
          "title"
        ]
      },
      "UpdatePackagingOptionDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Unique label for the packaging option",
            "example": "STANDARD_BOX"
          },
          "title": {
            "type": "string",
            "description": "Display title of the packaging option",
            "example": "Standard Box"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the packaging option",
            "example": "A standard cardboard box"
          },
          "isActive": {
            "type": "boolean",
            "description": "Active flag to soft delete or restore",
            "example": true
          }
        }
      },
      "AssignPackagingOptionToLocationDto": {
        "type": "object",
        "properties": {
          "packagingTypeId": {
            "type": "string",
            "description": "ID of the packaging type to assign",
            "example": "uuid-of-packaging-type"
          },
          "officeLocationId": {
            "type": "string",
            "description": "ID of the office location",
            "example": "uuid-of-office-location"
          },
          "price": {
            "type": "number",
            "description": "Price override in cents for this location",
            "example": 500
          },
          "isActive": {
            "type": "boolean",
            "description": "Active flag for this assignment",
            "example": true
          }
        },
        "required": [
          "packagingTypeId",
          "officeLocationId"
        ]
      },
      "CreateCarrierDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Carrier Name",
            "example": "UPS Cargo"
          },
          "description": {
            "type": "string",
            "description": "Description of Cargo",
            "example": "Example"
          },
          "logoUrl": {
            "type": "string",
            "description": "Logo link of Cargo",
            "example": "http://linl.com/example.png"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateCarrierDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Carrier Name",
            "example": "UPS Cargo"
          },
          "description": {
            "type": "string",
            "description": "Description of Cargo",
            "example": "Example"
          },
          "logoUrl": {
            "type": "string",
            "description": "Logo link of Cargo",
            "example": "http://linl.com/example.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "Active this carrier or not",
            "example": true
          }
        }
      },
      "CreateWorkspaceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Workspace adı",
            "example": "Şirket Adı"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateWorkspaceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Workspace adı",
            "example": "Yeni Şirket Adı"
          },
          "isActive": {
            "type": "boolean",
            "description": "Workspace aktif durumu"
          }
        }
      },
      "AddWorkspaceMemberDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Kullanıcı email adresi",
            "example": "user@example.com"
          },
          "role": {
            "type": "string",
            "description": "Workspace rolü",
            "enum": [
              "OWNER",
              "MEMBER"
            ],
            "example": "MEMBER"
          }
        },
        "required": [
          "email",
          "role"
        ]
      },
      "UpdateWorkspaceMemberDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "Workspace rolü",
            "enum": [
              "OWNER",
              "MEMBER"
            ],
            "example": "MEMBER"
          }
        },
        "required": [
          "role"
        ]
      },
      "CreateWorkspaceAddressDto": {
        "type": "object",
        "properties": {
          "officeLocationId": {
            "type": "string",
            "description": "Ofis lokasyonu ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Varsayılan adres mi?"
          }
        },
        "required": [
          "officeLocationId"
        ]
      },
      "UpdateWorkspaceAddressDto": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "description": "Adres aktif durumu"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Varsayılan adres mi?"
          }
        }
      },
      "CreateWorkspaceDeliveryAddressDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Adres tipi",
            "enum": [
              "DELIVERY",
              "BILLING",
              "PICKUP"
            ],
            "example": "DELIVERY"
          },
          "label": {
            "type": "string",
            "description": "Adres etiketi",
            "example": "Ev"
          },
          "addressLine": {
            "type": "string",
            "description": "Adres satırı",
            "example": "123 Main St"
          },
          "city": {
            "type": "string",
            "description": "Şehir",
            "example": "İstanbul"
          },
          "state": {
            "type": "string",
            "description": "Eyalet/İl",
            "example": "Marmara"
          },
          "country": {
            "type": "string",
            "description": "Ülke",
            "example": "Türkiye"
          },
          "zipCode": {
            "type": "string",
            "description": "Posta kodu",
            "example": "34000"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Varsayılan adres mi?"
          }
        },
        "required": [
          "type",
          "label",
          "addressLine",
          "city",
          "state",
          "country"
        ]
      },
      "UpdateWorkspaceDeliveryAddressDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Adres tipi",
            "enum": [
              "DELIVERY",
              "BILLING",
              "PICKUP"
            ]
          },
          "label": {
            "type": "string",
            "description": "Adres etiketi"
          },
          "addressLine": {
            "type": "string",
            "description": "Adres satırı"
          },
          "city": {
            "type": "string",
            "description": "Şehir"
          },
          "state": {
            "type": "string",
            "description": "Eyalet/İl"
          },
          "country": {
            "type": "string",
            "description": "Ülke"
          },
          "zipCode": {
            "type": "string",
            "description": "Posta kodu"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Varsayılan adres mi?"
          }
        }
      },
      "CreateWorkspaceSubscriptionDto": {
        "type": "object",
        "properties": {
          "officeLocationId": {
            "type": "string",
            "description": "Ofis lokasyonu ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "planId": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "billingCycle": {
            "type": "string",
            "description": "Fatura döngüsü",
            "example": "MONTHLY"
          }
        },
        "required": [
          "officeLocationId",
          "planId",
          "billingCycle"
        ]
      },
      "CreateOrderItemDto": {
        "type": "object",
        "properties": {
          "itemType": {
            "type": "string",
            "description": "Item type",
            "enum": [
              "PLAN",
              "ADDON",
              "PRODUCT"
            ],
            "example": "PLAN"
          },
          "itemId": {
            "type": "string",
            "description": "Item ID (Plan, Addon, or Product ID)",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity",
            "example": 1,
            "minimum": 1
          }
        },
        "required": [
          "itemType",
          "itemId"
        ]
      },
      "CreateInitialSubscriptionOrderDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "Customer name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Customer last name",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "Customer email",
            "example": "atakan@thedice.ai"
          },
          "officeLocationId": {
            "type": "string",
            "description": "Office location ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "items": {
            "description": "Order items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOrderItemDto"
            }
          }
        },
        "required": [
          "firstName",
          "lastName",
          "email",
          "officeLocationId",
          "items"
        ]
      },
      "CreateOrderDto": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "description": "Subscription ID to add item to",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "items": {
            "description": "Item",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateOrderItemDto"
              }
            ]
          }
        },
        "required": [
          "subscriptionId",
          "items"
        ]
      }
    }
  }
}