  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  }

  model User {
    id                 String            @id @default(uuid()) @db.Uuid
    email              String            @unique
    password           String
    firstName          String?
    lastName           String?
    telephone          String?
    profileImage       String?
    notifications      Boolean           @default(true)
    emailConfirmed     Boolean           @default(false)
    telephoneConfirmed Boolean           @default(false)
    stripeCustomerId   String?
    lastLogin          DateTime?
    createdAt          DateTime          @default(now())
    updatedAt          DateTime          @updatedAt
    deletedAt          DateTime?
    isActive           Boolean           @default(true)
    forms              Forms[]
    attachment         Attachment[]
    invoices           Invoice[]
    tickets            Ticket[]
    roles              UserRole[]
    invitations        Invitation[]
    ticketMessages     TicketMessage[]
    workspaces         WorkspaceMember[]
  }

  model Workspace {
    id          String            @id @default(uuid()) @db.Uuid
    name        String
    isActive    Boolean           @default(true)
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    deletedAt   DateTime?
    isDeleted   Boolean           @default(false) // Workspace silinmiş mi?
    members     WorkspaceMember[]
    tickets     Ticket[]
    invoices    Invoice[]
    invitations Invitation[]
    mailboxes   Mailbox[]
    balance     WorkspaceBalance?
  }

  model Mailbox {
    id               String @id @default(uuid()) @db.Uuid
    steNumber        String @unique
    workspaceId      String @db.Uuid
    officeLocationId String @db.Uuid

    planId               String             @db.Uuid
    planPriceId          String             @db.Uuid
    billingCycle         BillingCycle
    stripeSubscriptionId String?
    status               SubscriptionStatus @default(ACTIVE)

    isActive  Boolean   @default(true)
    startDate DateTime
    endDate   DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    forwardingAddressLimit Int @default(1)
    recipientLimit         Int @default(1)

    workspace         Workspace           @relation(fields: [workspaceId], references: [id],onDelete: Cascade)
    officeLocation    OfficeLocation      @relation(fields: [officeLocationId], references: [id], onDelete: Cascade)
    plan              Plan                @relation(fields: [planId], references: [id])
    planPrice         PlanPrice           @relation(fields: [planPriceId], references: [id])
    featureUsages     FeatureUsage[]
    deliveryAddresses DeliveryAddress[]
    forwardRequests   ForwardingRequest[]
    subscriptionItems SubscriptionItem[]
    mails             Mail[]
    orders            Order[]
    recipients        Recipient[]

    @@unique([workspaceId, officeLocationId, isActive], name: "OneActiveSubscriptionPerOffice")
    @@index([workspaceId, isActive])
    @@index([officeLocationId, isActive])
  }

  model Recipient {
    id String @id @default(uuid()) @db.Uuid
    mailboxId String @db.Uuid
    name String
    lastName String?
    email String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    deletedAt DateTime?
    isDeleted Boolean @default(false)
    isActive Boolean @default(true)
    isDefault Boolean @default(false)
    isConfirmed Boolean @default(false)
    mailbox Mailbox @relation(fields: [mailboxId], references: [id], onDelete: Cascade)
    mails Mail[]
  }

  model Plan {
    id                String         @id @default(uuid()) @db.Uuid
    officeLocationId  String         @db.Uuid
    name              String
    slug              String
    description       String?
    imageUrl          String?
    isActive          Boolean        @default(true)
    createdAt         DateTime       @default(now())
    updatedAt         DateTime       @updatedAt
    deletedAt         DateTime?
    isDeleted         Boolean        @default(false)
    officeLocation    OfficeLocation @relation(fields: [officeLocationId], references: [id], onDelete: Cascade)
    displayFeatures   Json? // Plan'ın gösterim için kullanılacak özellikleri (JSON formatında) sadece gösterim için
    features          PlanFeature[]
    prices            PlanPrice[]
    addons            PlanAddon[]
    mailboxes         Mailbox[]
    showOnMarketplace Boolean        @default(true)

    @@unique([slug, officeLocationId])
    @@index([officeLocationId])
  }

  model PlanPrice {
    id            String       @id @default(uuid()) @db.Uuid
    planId        String       @db.Uuid
    billingCycle  BillingCycle @default(MONTHLY)
    amount        Int
    currency      String
    description   String?
    stripePriceId String?
    isActive      Boolean      @default(true)
    isDeleted     Boolean      @default(false)
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    deletedAt     DateTime?
    plan          Plan         @relation(fields: [planId], references: [id], onDelete: Cascade)
    mailboxes     Mailbox[]

    @@unique([planId, billingCycle]) // Aynı plan için aynı dönem sadece bir kez tanımlanır
  }

  model PlanAddon {
    id             String    @id @default(uuid()) @db.Uuid
    planId         String    @db.Uuid
    productId      String    @db.Uuid
    productPriceId String    @db.Uuid
    displayOrder   Int
    isActive       Boolean   @default(true)
    isDeleted      Boolean   @default(false)
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    deletedAt      DateTime?
    plan           Plan      @relation(fields: [planId], references: [id], onDelete: Cascade)
    product        Product   @relation("ProductPlanAddons", fields: [productId], references: [id], onDelete: Cascade)
    prices         Price     @relation(fields: [productPriceId], references: [id], onDelete: Cascade)

    @@unique([planId, productPriceId], name: "unique_plan_addon_price")
  }

  model Product {
    id              String           @id @default(uuid()) @db.Uuid
    name            String
    description     String?
    stripeProductId String?
    type            ProductType
    imageUrl        String?
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    deletedAt       DateTime?
    isDeleted       Boolean          @default(false)
    isActive        Boolean          @default(true)
    defaultPriceId  String?          @db.Uuid
    prices          Price[]          @relation("ProductPrices")
    productFeature  ProductFeature[]
    planAddon       PlanAddon[]      @relation("ProductPlanAddons")
    subscriptions SubscriptionItem[] @relation("ProductSubscriptions")
}

  model ProductFeature {
    id            String       @id @default(uuid()) @db.Uuid
    productId     String       @db.Uuid
    featureId     String       @db.Uuid
    includedLimit Int? // Örn. 1 ek alıcı, 3 ek adres
    resetCycle    BillingCycle @default(ONE_TIME) // ONE_TIME veya MONTHLY vs.
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt

    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    feature Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)

    @@unique([productId, featureId])
    @@index([featureId])
  }

  model PlanFeature {
    id            String     @id @default(uuid()) @db.Uuid
    planId        String     @db.Uuid
    featureId     String     @db.Uuid
    includedLimit Int? // Null: sınırsız, 0: yok ama ücretli olabilir
    unitPrice     Int? // Null: satılamaz, fazla kullanım için birim fiyat
    resetCycle    ResetCycle @default(MONTHLY) // aylık mı, yıllık mı vs.
    isActive      Boolean    @default(true)
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    deletedAt     DateTime? // Silinmişse burada tutulur
    isDeleted     Boolean    @default(false)
    displayOrder  Int? // Plan içindeki gösterim sırası
    showOnList    Boolean    @default(true) // Marketplace'de gösterilsin mi?

    plan    Plan    @relation(fields: [planId], references: [id], onDelete: Cascade)
    feature Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)

    @@unique([planId, featureId])
    @@index([planId])
    @@index([featureId])
  }

  model Feature {
    id                   String                @id @default(uuid()) @db.Uuid
    name                 String                @unique
    description          String?
    imageUrl             String?
    isActive             Boolean               @default(true)
    createdAt            DateTime              @default(now())
    updatedAt            DateTime              @updatedAt
    deletedAt            DateTime?
    isDeleted            Boolean               @default(false)
    planFeatures         PlanFeature[] // Bu özelliği kullanan planlar
    planTemplateFeatures PlanTemplateFeature[] // Bu özelliği kullanan template'ler
    usages               FeatureUsage[]
    productFeature       ProductFeature[]
  }

  model Price {
    id             String      @id @default(uuid()) @db.Uuid
    name           String?
    isDefault      Boolean     @default(false)
    additionalFees Int?
    stripePriceId  String?
    unit_amount    Int
    currency       String
    productId      String      @db.Uuid
    priceType      PriceType   @default(one_time) // FIXED, RECURRING
    recurringId    String?     @db.Uuid // null = one_time
    description    String?
    createdAt      DateTime    @default(now())
    updatedAt      DateTime    @updatedAt
    deletedAt      DateTime? // Silinmişse burada tutulur
    isDeleted      Boolean     @default(false)
    active         Boolean     @default(true)
    planAddons     PlanAddon[]
    product        Product?    @relation("ProductPrices", fields: [productId], references: [id], onDelete: Cascade)
    recurring      Recurring?  @relation(fields: [recurringId], references: [id])
  }

  model Recurring {
    id            String            @id @default(uuid()) @db.Uuid
    interval      RecurringInterval
    interval_count Int
    prices        Price[]
  }

  model DeliveryAddress {
    id              String              @id @default(uuid()) @db.Uuid
    type            DeliveryAddressType @default(DELIVERY)
    mailBoxId       String              @db.Uuid
    label           String
    addressLine     String
    city            String
    state           String
    country         String
    zipCode         String?
    isDefault       Boolean             @default(false)
    isConfirmed     Boolean             @default(false)
    createdAt       DateTime            @default(now())
    updatedAt       DateTime            @updatedAt
    deletedAt       DateTime?
    mailbox         Mailbox             @relation(fields: [mailBoxId], references: [id], onDelete: Cascade)
    forwardRequests ForwardingRequest[]

    @@unique([mailBoxId, isDefault], name: "OnlyOneDefaultPerWorkspace") // only 1 default adres per workspace
  }

  model SubscriptionItem {
    id           String                 @id @default(uuid()) @db.Uuid
    mailboxId    String                 @db.Uuid
    itemType     ProductType // PRODUCT, ADDON (Plan artık ayrı tutuldu)
    itemId       String                 @db.Uuid // Product veya Addon ID'si
    priceId      String?                @db.Uuid // Product ve Addon variantları için
    billingCycle BillingCycle           @default(MONTHLY)
    quantity     Int                    @default(1)
    unitPrice    Int // Birim fiyat (cents)
    totalPrice   Int // quantity * unitPrice
    currency     String                 @default("USD")
    startDate    DateTime
    endDate      DateTime? // Tek seferlik ödemeler için null olabilir
    status       SubscriptionItemStatus @default(ACTIVE)
    isActive     Boolean                @default(true)
    createdAt    DateTime               @default(now())
    updatedAt    DateTime               @updatedAt

    mailbox Mailbox @relation(fields: [mailboxId], references: [id], onDelete: Cascade)
    item Product @relation("ProductSubscriptions",fields: [itemId], references: [id], onDelete: Cascade)

    @@index([mailboxId])
    @@index([itemId])
}

  model Order {
    id                    String      @id @default(uuid()) @db.Uuid
    email                 String
    totalAmount           Int // Total amount in cents
    currency              String      @default("USD")
    status                OrderStatus @default(PAYMENT_PENDING)
    type                  OrderType   @default(SINGLE)
    stripePaymentIntentId String      @unique
    stripeCustomerId      String?
    stripeSessionId       String?
    stripeClientSecret    String?

    mailboxId   String?   @db.Uuid
    metadata    Json? // Additional order metadata
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    completedAt DateTime? // When payment was completed

    mailbox Mailbox?    @relation(fields: [mailboxId], references: [id], onDelete: SetNull)
    items   OrderItem[]

    @@index([email])
    @@index([stripePaymentIntentId])
    @@index([status])
    @@index([createdAt])
  }

  model WorkspaceMember {
    id          String    @id @default(uuid()) @db.Uuid
    userId      String    @db.Uuid
    workspaceId String    @db.Uuid
    joinedAt    DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    deletedAt   DateTime?
    isDeleted   Boolean   @default(false)
    isDefault   Boolean   @default(false) //Kullanıcının varsayılan Workspace'i mi?

    role      WorkspaceRole
    user      User          @relation(fields: [userId], references: [id],onDelete: Cascade)
    workspace Workspace     @relation(fields: [workspaceId], references: [id],onDelete: Cascade)

    @@unique([userId, isDefault], name: "OnlyOneDefaultWorkspacePerUser")
  }

  model WorkspaceBalance {
    id               String               @id @default(uuid()) @db.Uuid
    workspaceId      String               @unique @db.Uuid
    stripeCustomerId String               @unique // Stripe müşteri kimliği
    currentDebt      Int                  @default(0) // Kullanıcının mevcut borcu (cents olarak saklanır)
    currentBalance   Int                  @default(0) // Kullanıcının mevcut bakiyesi (cents olarak saklanır)
    isRestricted     Boolean              @default(false) // Kullanıcının bakiyesi kısıtlı mı? (Örn: ödeme yapılmadıysa)
    lastChargedAt    DateTime? // Son ödeme yapıldığı tarih
    isActive         Boolean              @default(true) // Bakiyesi aktif mi?
    createdAt        DateTime             @default(now())
    updatedAt        DateTime             @updatedAt
    workspace        Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    transactions     BalanceTransaction[]
    reminders        BalanceReminder[]
  }

  model BalanceTransaction {
    id               String            @id @default(uuid()) @db.Uuid
    wsbId            String            @db.Uuid
    stripeInvoiceId  String? // Ödemeyi hangi invoice temsil ediyor
    amount           Decimal
    status           TransactionStatus
    attemptedAt      DateTime
    workspaceBalance WorkspaceBalance  @relation(fields: [wsbId], references: [id], onDelete: Cascade)
  }

  model BalanceReminder {
    id               String           @id @default(uuid()) @db.Uuid
    wsbId            String           @db.Uuid
    sentAt           DateTime
    type             ReminderType
    workspaceBalance WorkspaceBalance @relation(fields: [wsbId], references: [id], onDelete: Cascade)
  }

  model OfficeLocation {
    id                   String                     @id @default(uuid()) @db.Uuid
    label                String // Örn: Soho - NYC
    addressLine          String // Örn: 447 Broadway
    addressLine2         String? // Örn: 447 Broadway
    city                 String
    state                String
    country              String
    phone                String?
    email                String?
    workingHours         String?
    timezone             String?
    createdAt            DateTime                   @default(now())
    updatedAt            DateTime                   @updatedAt
    deletedAt            DateTime? // Silinmişse burada tutulur
    isActive             Boolean                    @default(true) // Adres aktif mi?
    isDeleted            Boolean                    @default(false) // Adres silinmiş mi?
    latitude             Float? // Opsiyonel, harita entegrasyonu için
    longitude            Float? // Opsiyonel, harita entegrasyonu için
    zipCode              String? // Opsiyonel, posta kodu
    description          String? // Opsiyonel, adres hakkında açıklama
    mailboxes            Mailbox[] // Bu lokasyona ait abonelikler
    plans                Plan[] // Bu lokasyondaki planlar
    forwardRequest       ForwardingRequest[] // Bu lokasyondaki paket yönlendirme talepleri
    aviableCarriers      CarrierAvailability[] // Bu lokasyonda kullanılabilir kargo firmaları
    deliverySpeedOptions DeliverySpeedPlanMapping[] // Bu lokasyonda kullanılabilir teslimat hızları
    packagingTypeOptions PackagingTypePlanMapping[] // Bu lokasyonda kullanılabilir paketleme türleri
  }

  model FeatureUsage {
    id          String   @id @default(uuid()) @db.Uuid
    mailBoxId   String   @db.Uuid
    featureId   String   @db.Uuid
    periodStart DateTime // örn. abonelik.startDate + N × döngü
    periodEnd   DateTime // periodStart + resetCycle
    usedCount   Int      @default(0)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    mailbox Mailbox @relation(fields: [mailBoxId], references: [id], onDelete: Cascade)
    feature Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)

    @@unique([mailBoxId, featureId, periodStart])
    @@index([mailBoxId, featureId])
  }

  model PlanTemplate {
    id           String                @id @default(uuid()) @db.Uuid
    name         String                @unique
    slug         String                @unique // Template için slug
    description  String?
    imageUrl     String?
    priceMonthly Int // Template varsayılan aylık fiyat
    priceYearly  Int // Template varsayılan yıllık fiyat
    currency     String                @default("USD") // Template varsayılan para birimi
    isActive     Boolean               @default(true)
    createdAt    DateTime              @default(now())
    updatedAt    DateTime              @updatedAt
    deletedAt    DateTime? // Silinmişse burada tutulur
    isDeleted    Boolean               @default(false)
    features     PlanTemplateFeature[] // Bu template'deki özellikler
  }

  model PlanTemplateFeature {
    id             String   @id @default(uuid()) @db.Uuid
    planTemplateId String   @db.Uuid
    featureId      String   @db.Uuid
    includedLimit  Int? // Template'deki varsayılan limit (null: sınırsız)
    unitPrice      Int? // Template'deki varsayılan birim fiyat (null: satılamaz)
    isRequired     Boolean  @default(false) // Bu özellik template'de zorunlu mu?
    displayOrder   Int? // Template'de gösterim sırası
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    planTemplate PlanTemplate @relation(fields: [planTemplateId], references: [id], onDelete: Cascade)
    feature      Feature      @relation(fields: [featureId], references: [id], onDelete: Cascade)

    @@unique([planTemplateId, featureId])
    @@index([planTemplateId])
    @@index([featureId])
  }

  model Mail {
    id             String        @id @default(uuid()) @db.Uuid
    steNumber      String // Paketin üzerindeki STE numarası
    mailboxId String        @db.Uuid
    receivedAt     DateTime
    trackingNumber String?
    trackingUrl    String?
    isShereded     Boolean       @default(false)
    isForwarded    Boolean       @default(false)
    currentStatus  PackageStatus @default(PENDING)
    type           MailType

    senderName    String?
    senderAddress String?
    carrier       String?

    width      Float? // cm
    height     Float? // cm
    length     Float? // cm
    weightKg   Float? // kg
    volumeDesi Float?
    volumeCm3   Float?
    photoUrls String[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    status          PackageStatus       @default(PENDING)
    actions         PackageAction[] 
    mailbox         Mailbox             @relation(fields: [mailboxId], references: [id], onDelete: Cascade)
    forwardRequests ForwardingRequest[]
    recipient      Recipient? @relation(fields: [recipientId], references: [id], onDelete: Cascade)
    recipientId    String?    @db.Uuid
    @@index([mailboxId])
    @@index([steNumber])
  }

  model PackageAction {
    id          String            @id @default(uuid()) @db.Uuid
    packageId   String            @db.Uuid
    type        PackageActionType
    status      ActionStatus // örn: PENDING, IN_PROGRESS, DONE, FAILED
    requestedAt DateTime          @default(now())
    completedAt DateTime?
    updatedAt   DateTime          @updatedAt
    meta        Json? // ilgili aksiyonun detayları
    mail        Mail              @relation(fields: [packageId], references: [id], onDelete: Cascade)
  }

  model ForwardingRequest {
    id                    String  @id @default(uuid()) @db.Uuid
    mailId                String  @db.Uuid
    mailboxId           String  @db.Uuid
    officeLocationId      String  @db.Uuid
    deliveryAddressId     String  @db.Uuid // Kullanıcının paketin gönderilmesini istediği adres
    deliverySpeedOptionId String  @db.Uuid
    packagingTypeOptionId String  @db.Uuid
    carrierId             String? @db.Uuid // Kargo firması (opsiyonel, kullanıcı seçebilir)
    trackingCode          String? // Kargo firmasından alınan kod

    shippingCost  Int // kuruş cinsinden (örnek: 1200 = 12.00 USD)
    packagingCost Int // kuruş cinsinden
    totalCost     Int // shippingCost + packagingCost

    status        ForwardRequestStatus @default(PENDING) // Talep durumu
    paymentStatus PaymentStatus        @default(PENDING)

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    completedAt DateTime? // Talep tamamlandığında set edilecek
    cancelledAt DateTime? // Kullanıcı tarafından iptal edildiğinde set edilecek

    mail            Mail            @relation(fields: [mailId], references: [id], onDelete: Cascade)
    subscription    Mailbox         @relation(fields: [mailboxId], references: [id], onDelete: Cascade)
    officeLocation  OfficeLocation  @relation(fields: [officeLocationId], references: [id], onDelete: Cascade)
    deliveryAddress DeliveryAddress @relation(fields: [deliveryAddressId], references: [id], onDelete: Cascade)

    deliverySpeedOption DeliverySpeedOption @relation(fields: [deliverySpeedOptionId], references: [id])
    packagingTypeOption PackagingTypeOption @relation(fields: [packagingTypeOptionId], references: [id])
    carrier             Carrier?            @relation(fields: [carrierId], references: [id])
  }

  model Carrier {
    id                String                @id @default(uuid()) @db.Uuid
    name              String // Örn: UPS, DHL, FedEx
    description       String?
    logoUrl           String? // UI için opsiyonel
    isActive          Boolean               @default(true)
    createdAt         DateTime              @default(now())
    updatedAt         DateTime              @updatedAt
    deletedAt         DateTime? // Silinmişse burada tutulur
    isDeleted         Boolean               @default(false) // Carrier silinmiş mi?
    availableInStates CarrierAvailability[] // Bu carrier'ın kullanılabileceği lokasyonlar
    forwardRequests   ForwardingRequest[] // Bu carrierın kullanıldığı yönlendirme talepleri
  }

  model CarrierAvailability {
    id               String @id @default(uuid()) @db.Uuid
    carrierId        String @db.Uuid
    officeLocationId String @db.Uuid // Hangi lokasyonda bu kargo aktif?

    carrier        Carrier        @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    officeLocation OfficeLocation @relation(fields: [officeLocationId], references: [id], onDelete: Cascade)

    isDefault Boolean @default(false) // Önerilen carrier olabilir
    isActive  Boolean @default(true)

    @@unique([carrierId, officeLocationId])
    @@index([officeLocationId])
  }

  model DeliverySpeedOption {
    id          String  @id @default(uuid()) @db.Uuid
    label       String  @unique // Örn: SAME_DAY, NEXT_DAY
    title       String // Örn: Aynı Gün Teslimat
    description String?
    price       Int // Kuruş cinsinden
    isActive    Boolean @default(true)

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime? // Silinmişse burada tutulur
    isDeleted Boolean   @default(false)

    forwardRequests ForwardingRequest[]

    aviableLocations DeliverySpeedPlanMapping[]
  }

  model PackagingTypeOption {
    id          String  @id @default(uuid()) @db.Uuid
    label       String  @unique // Örn: STANDARD_BOX
    title       String // Örn: Standart Kutu
    description String?
    isActive    Boolean @default(true)

    createdAt DateTime  @default(now())
    deletedAt DateTime? // Silinmişse burada tutulur
    isDeleted Boolean   @default(false)
    updatedAt DateTime  @updatedAt

    forwardRequests  ForwardingRequest[]
    aviableLocations PackagingTypePlanMapping[]
  }

  model DeliverySpeedPlanMapping {
    id               String    @id @default(uuid()) @db.Uuid
    deliverySpeedId  String    @db.Uuid
    officeLocationId String    @db.Uuid
    price            Int
    isActive         Boolean   @default(true)
    deletedAt        DateTime?
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt

    deliverySpeed  DeliverySpeedOption @relation(fields: [deliverySpeedId], references: [id])
    officeLocation OfficeLocation      @relation(fields: [officeLocationId], references: [id])

    @@unique([deliverySpeedId, officeLocationId])
  }

  model PackagingTypePlanMapping {
    id               String    @id @default(uuid()) @db.Uuid
    packagingTypeId  String    @db.Uuid
    officeLocationId String    @db.Uuid
    price            Int
    isActive         Boolean   @default(true)
    deletedAt        DateTime?
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt

    packagingType  PackagingTypeOption @relation(fields: [packagingTypeId], references: [id])
    officeLocation OfficeLocation      @relation(fields: [officeLocationId], references: [id])

    @@unique([packagingTypeId, officeLocationId])
  }

  model Forms {
    id          String     @id @default(uuid()) @db.Uuid
    userId      String     @db.Uuid
    user        User       @relation(fields: [userId], references: [id])
    formName    String
    formData    Json
    status      FormStatus @default(ACTIVE) // Formun durumu
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    deletedAt   DateTime? // Silinmişse burada tutulur
    isActive    Boolean    @default(true) // Form aktif mi?
    isDeleted   Boolean    @default(false) // Form silinmiş mi?
    isCompleted Boolean    @default(false) // Form tamamlandı mı?
  }

  model Invoice {
    id          String    @id @default(uuid()) @db.Uuid
    workspaceId String    @db.Uuid
    amount      Float?
    currency    String?
    status      String?
    link        String
    userId      String    @db.Uuid
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  }

  model Invitation {
    id          String           @id @default(uuid()) @db.Uuid
    workspaceId String           @db.Uuid
    userId      String           @unique @db.Uuid
    user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    status      InvitationStatus
    createdAt   DateTime         @default(now())
    approvedAt  DateTime?
    updatedAt   DateTime?        @updatedAt
    deletedAt   DateTime?
    workspace   Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  }

  model Ticket {
    id          String          @id @default(uuid()) @db.Uuid
    ticketNo    Int             @default(autoincrement())
    userId      String          @db.Uuid
    subject     String
    category    String
    status      TicketStatus    @default(OPEN)
    priority    TicketPriority
    isActivate  Boolean         @default(true)
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @default(now())
    user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    messages    TicketMessage[]
    attachments Attachment[]    @relation("AttachmentToTicket")
    workspaceId String?         @db.Uuid // İsteğe bağlı, eğer ticket bir workspace'e ait ise
    workspace   Workspace?      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  }

  model TicketMessage {
    id          String       @id @default(uuid()) @db.Uuid
    ticketId    String       @db.Uuid
    userId      String       @db.Uuid
    message     String
    fromStaff   Boolean
    createdAt   DateTime     @default(now())
    ticket      Ticket       @relation(fields: [ticketId], references: [id], onDelete: Cascade)
    user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    attachments Attachment[] @relation("AttachmentToTicketMessage")
  }

  model Attachment {
    id            String          @id @default(uuid()) @db.Uuid
    name          String
    url           String
    type          String
    uploadedById  String          @db.Uuid
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    uploadedBy    User            @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
    ticket        Ticket[]        @relation("AttachmentToTicket")
    ticketMessage TicketMessage[] @relation("AttachmentToTicketMessage")
  }

  enum ForwardRequestStatus {
    PENDING // Yeni talep, henüz işlenmedi
    IN_PROGRESS // İşlemde, kargo firması ile iletişimde
    COMPLETED // Paket başarıyla yönlendirildi
    CANCELLED // Kullanıcı tarafından iptal edildi
    FAILED // Bir hata nedeniyle yönlendirme başarısız oldu
  }

  enum MailType {
    BANK_CHECK // Banka kontrol
    LEGAL_DOCUMENT // Hukuki belge
    ENVELOPE // Zarf
    PACKAGE // Paket (kargo)
    OTHER // Diğer
  }

  enum InvitationStatus {
    WAITING
    APPROVED
    CANCELLED
    DELETED
    REJECTED
    OTHER
  }

  enum DeliveryAddressType {
    DELIVERY
    BILLING
    PICKUP
  }

  enum PackageStatus {
    PENDING // Yeni geldi, işlenmeyi bekliyor
    FORWARDED // Paket yönlendirildi
    SHREDDED // Paket imha edildi
    COMPLETED // Aksiyonlar tamamlandı
    CANCELLED // İptal edildi / yanlış eşleştirme
    IN_PROCESS // Aksiyon bekliyor (forward, shred, vs.)
  }

  enum TicketStatus {
    OPEN
    IN_PROGRESS
    RESOLVED
    CLOSED
    REOPENED
    ON_HOLD
    WAITING_FOR_CUSTOMER
    WAITING_FOR_STAFF
    WAITING_FOR_THIRD_PARTY
    ESCALATED
    CANCELLED
    CLOSED_BY_CUSTOMER
  }

  enum TicketPriority {
    LOW
    MEDIUM
    HIGH
  }

  enum OrderStatus {
    PAYMENT_PENDING
    PAYMENT_PROCESSING
    PAYMENT_SUCCEEDED
    PAYMENT_FAILED
    PAYMENT_CANCELLED
    PENDING
    IN_PROGRESS
    COMPLETED
    REJECTED
    CANCELLED
    REFUNDED
    ERROR
    PROGRESS_ERROR
    FAILED
  }

  enum RoleType {
    SUPERADMIN
    ADMIN
    STAFF
    CUSTOMER
  }

  enum ReminderType {
    LOW_BALANCE
    FAILED_PAYMENT
    FINAL_WARNING
  }

  enum TaskStatus {
    OPEN
    IN_PROGRESS
    COMPLETED
    RESOLVED
    CLOSED
    REOPENED
    ON_HOLD
    WAITING_FOR_CUSTOMER
    WAITING_FOR_STAFF
    WAITING_FOR_THIRD_PARTY
    ESCALATED
    CANCELLED
    CLOSED_BY_CUSTOMER
  }

  enum PriceType {
    one_time
    recurring
  }

  enum TaskPriority {
    LOW
    MEDIUM
    HIGH
  }

  enum TaskType {
    GENERAL
    LEGAL
    ACCOUNTING
    TAX
    HR
    OTHER
  }

  enum PermissionAction {
    CREATE
    READ
    UPDATE
    DELETE
    MANAGE
  }

  enum PaymentStatus {
    PENDING
    PAID
    FAILED
    REFUNDED
    PARTIALLY_REFUNDED
    CHARGEBACK
    CANCELLED
    IN_PROGRESS
    COMPLETED
    ERROR
  }

  model UserRole {
    id        String    @id @default(uuid()) @db.Uuid
    userId    String    @db.Uuid
    role      RoleType
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    isDeleted Boolean   @default(false)
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  }

  model Permission {
    id            String           @id @default(uuid()) @db.Uuid
    companyUserId String           @db.Uuid
    action        PermissionAction
    subject       String
    conditions    Json?
    createdAt     DateTime         @default(now())
    updatedAt     DateTime         @updatedAt

    @@unique([companyUserId, action, subject])
    @@map("permissions")
  }

  enum TransactionStatus {
    SUCCESS
    PENDING
    INPROGRESS
    FAILED
  }

  enum BillingCycle {
    MONTHLY
    YEARLY
    WEEKLY
    QUARTERLY
    ONE_TIME
  }

  enum ResetCycle {
    MONTHLY
    YEARLY
    WEEKLY
    QUARTERLY
    ONE_TIME
    DAILY
    NO_RESET
  }

  enum TokenType {
    EMAIL_VERIFICATION
    PASSWORD_RESET
    INVITATION
    OTHER
  }

  enum PackageActionType {
    FORWARD
    SHRED
    SCAN
    HOLD
    JUNK
  }

  enum ActionStatus {
    PENDING
    IN_PROGRESS
    DONE
    FAILED
  }

  enum WorkspaceRole {
    OWNER
    MEMBER
  }

  enum RecipientRole {
    ADMIN
    MEMBER
  }

  enum FormStatus {
    ACTIVE
    INACTIVE
    PENDING
    ARCHIVED
    COMPLETED
    DELETED
  }

  model Token {
    id        String    @id @default(uuid()) @db.Uuid
    token     String    @unique
    type      TokenType
    createdAt DateTime  @default(now())
    email     String
    expires   DateTime

    @@unique([email, type], name: "unique_email_token_type")
  }

  enum OrderType {
    SINGLE
    SUBSCRIPTION
    INITIAL_SUBSCRIPTION
    UPGRADE
    DOWNGRADE
    CHANGE_PLAN
    CHANGE_ADDON
    CHANGE_PRODUCT
    CHANGE_QUANTITY
  }

  model OrderItem {
    id      String @id @default(uuid()) @db.Uuid
    orderId String @db.Uuid

    // Item Type
    itemType  OrderItemType
    itemId    String        @db.Uuid // Plan, Addon, or Product ID
    variantId String?       @db.Uuid // For addon variants

    // Pricing
    quantity   Int    @default(1)
    unitPrice  Int // Price per unit in cents
    totalPrice Int // quantity * unitPrice
    currency   String @default("USD")

    // Item Details (for reference)
    itemName        String
    itemDescription String?

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

    @@index([orderId])
    @@index([itemType])
  }

  enum OrderItemType {
    PLAN
    ADDON
    PRODUCT
  }

  enum SubscriptionStatus {
    ACTIVE
    INACTIVE
    PENDING
    CANCELLED
    EXPIRED
    SUSPENDED
  }

  enum SubscriptionItemStatus {
    ACTIVE
    INACTIVE
    PENDING
    CANCELLED
    EXPIRED
    SUSPENDED
  }

  enum ProductType {
    ADDON
    PRODUCT
    OTHER
  }

  enum RecurringInterval {
    day
    week
    month
    year
  }
