generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String            @id @default(uuid()) @db.Uuid
  email              String            @unique
  password           String
  firstName          String
  lastName           String
  telephone          String?
  profileImage       String?
  notifications      Boolean           @default(true)
  emailConfirmed     Boolean           @default(false)
  telephoneConfirmed Boolean           @default(false)
  stripeCustomerId   String?
  lastLogin          DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  deletedAt          DateTime?
  isActive           Boolean           @default(true)
  forms              Forms[]
  attachment         Attachment[]
  invoices           Invoice[]
  tickets            Ticket[]
  roles              UserRole[]
  invitations        Invitation[]
  ticketMessages     TicketMessage[]
  balance            UserBalance?
  workspaces         WorkspaceMember[]
}

model Workspace {
  id                String                     @id @default(uuid()) @db.Uuid
  name              String
  isActive          Boolean                    @default(true)
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  members           WorkspaceMember[]
  tickets           Ticket[]
  invoices          Invoice[]
  invitations       Invitation[]
  addresses         WorkspaceAddress[]
  subscriptions     WorkspaceSubscription[]
  featureUsages     WorkspaceFeatureUsage[]
  deliveryAddresses WorkspaceDeliveryAddress[]
}

model WorkspaceMember {
  id          String        @id @default(uuid()) @db.Uuid
  userId      String        @db.Uuid
  workspaceId String        @db.Uuid
  role        WorkspaceRole
  joinedAt    DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  isDeleted   Boolean       @default(false)
  user        User          @relation(fields: [userId], references: [id])
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])
}

model UserBalance {
  id               String               @id @default(uuid()) @db.Uuid
  userId           String               @unique @db.Uuid
  stripeCustomerId String               @unique // Stripe müşteri kimliği
  currentDebt      Int                  @default(0) // Kullanıcının mevcut borcu (cents olarak saklanır)
  currentBalance   Int                  @default(0) // Kullanıcının mevcut bakiyesi (cents olarak saklanır)
  isRestricted     Boolean              @default(false) // Kullanıcının bakiyesi kısıtlı mı? (Örn: ödeme yapılmadıysa)
  lastChargedAt    DateTime? // Son ödeme yapıldığı tarih
  isActive         Boolean              @default(true) // Kullanıcının bakiyesi aktif mi?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  user             User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions     BalanceTransaction[]
  reminders        BalanceReminder[]
}

model BalanceTransaction {
  id              String            @id @default(uuid()) @db.Uuid
  userBalanceId   String            @db.Uuid
  stripeInvoiceId String? // Ödemeyi hangi invoice temsil ediyor
  amount          Decimal
  status          TransactionStatus
  attemptedAt     DateTime
  userBalance     UserBalance       @relation(fields: [userBalanceId], references: [id], onDelete: Cascade)
}

model BalanceReminder {
  id            String       @id @default(uuid()) @db.Uuid
  userBalanceId String       @db.Uuid
  sentAt        DateTime
  type          ReminderType
  userBalance   UserBalance  @relation(fields: [userBalanceId], references: [id], onDelete: Cascade)
}

enum ReminderType {
  LOW_BALANCE
  FAILED_PAYMENT
  FINAL_WARNING
}

model WorkspaceAddress {
  id               String @id @default(uuid()) @db.Uuid
  workspaceId      String @db.Uuid // Workspace ID'si
  officeLocationId String @db.Uuid // Hangi ofis lokasyonuna ait
  steNumber        String @unique // 6 haneli örn: "004712"

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Silinmişse burada tutulur
  isActive  Boolean   @default(true) // Adres aktif mi?
  isDefault Boolean   @default(false) // Workspace için varsayılan adres mi?

  workspace      Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  officeLocation OfficeLocation @relation(fields: [officeLocationId], references: [id], onDelete: Cascade)
  packages       Package[]

  @@unique([workspaceId, officeLocationId]) // Aynı workspace aynı adresten sadece bir kez alabilir
}

model WorkspaceSubscription {
  id                   String       @id @default(uuid()) @db.Uuid
  workspaceId          String       @db.Uuid
  officeLocationId     String       @db.Uuid // Her ofis lokasyonu için ayrı abonelik
  planId               String       @db.Uuid
  billingCycle         BillingCycle
  stripeSubscriptionId String?
  startDate            DateTime
  endDate              DateTime?
  isActive             Boolean      @default(true)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  plan           Plan           @relation(fields: [planId], references: [id])
  workspace      Workspace      @relation(fields: [workspaceId], references: [id])
  officeLocation OfficeLocation @relation(fields: [officeLocationId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, officeLocationId, isActive], name: "OneActiveSubscriptionPerOffice")
  @@index([workspaceId, isActive])
  @@index([officeLocationId, isActive])
}

model OfficeLocation {
  id                     String                  @id @default(uuid()) @db.Uuid
  label                  String // Örn: Soho - NYC
  addressLine            String // Örn: 447 Broadway
  addressLine2           String? // Örn: 447 Broadway
  city                   String
  state                  String
  country                String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  deletedAt              DateTime? // Silinmişse burada tutulur
  isActive               Boolean                 @default(true) // Adres aktif mi?
  isDeleted              Boolean                 @default(false) // Adres silinmiş mi?
  latitude               Float? // Opsiyonel, harita entegrasyonu için
  longitude              Float? // Opsiyonel, harita entegrasyonu için
  zipCode                String? // Opsiyonel, posta kodu
  description            String? // Opsiyonel, adres hakkında açıklama
  workspaceAddresses     WorkspaceAddress[] // Bu lokasyona ait workspace adresleri
  workspaceSubscriptions WorkspaceSubscription[] // Bu lokasyona ait abonelikler
  workspaceFeatureUsages WorkspaceFeatureUsage[] // Bu lokasyona ait feature kullanımları
  plans                  Plan[] // Bu lokasyondaki planlar
}

model Plan {
  id               String    @id @default(uuid()) @db.Uuid
  officeLocationId String    @db.Uuid // Plan belirli bir lokasyona ait
  name             String
  slug             String // Lokasyonla birlikte unique olacak
  description      String?
  imageUrl         String?
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime? // Silinmişse burada tutulur
  isDeleted        Boolean   @default(false)

  officeLocation         OfficeLocation          @relation(fields: [officeLocationId], references: [id], onDelete: Cascade)
  features               PlanFeature[] // Bu planda mevcut özellikler
  prices                 PlanPrice[] // Bu planın fiyat alternatifleri
  workspaceSubscriptions WorkspaceSubscription[]

  @@unique([slug, officeLocationId]) // Aynı lokasyonda aynı slug olamaz
  @@index([officeLocationId])
}

model PlanFeature {
  id            String    @id @default(uuid()) @db.Uuid
  planId        String    @db.Uuid
  featureId     String    @db.Uuid
  includedLimit Int? // Null: sınırsız, 0: yok ama ücretli olabilir
  unitPrice     Int? // Null: satılamaz, fazla kullanım için birim fiyat
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime? // Silinmişse burada tutulur
  isDeleted     Boolean   @default(false)

  plan    Plan    @relation(fields: [planId], references: [id], onDelete: Cascade)
  feature Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@unique([planId, featureId])
  @@index([planId])
  @@index([featureId])
}

model PlanTemplate {
  id           String    @id @default(uuid()) @db.Uuid
  name         String    @unique
  slug         String    @unique // Template için slug
  description  String?
  imageUrl     String?
  priceMonthly Int // Template varsayılan aylık fiyat
  priceYearly  Int // Template varsayılan yıllık fiyat
  currency     String    @default("USD") // Template varsayılan para birimi
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime? // Silinmişse burada tutulur
  isDeleted    Boolean   @default(false)

  features PlanTemplateFeature[] // Bu template'deki özellikler
}

model PlanTemplateFeature {
  id             String   @id @default(uuid()) @db.Uuid
  planTemplateId String   @db.Uuid
  featureId      String   @db.Uuid
  includedLimit  Int? // Template'deki varsayılan limit (null: sınırsız)
  unitPrice      Int? // Template'deki varsayılan birim fiyat (null: satılamaz)
  isRequired     Boolean  @default(false) // Bu özellik template'de zorunlu mu?
  displayOrder   Int? // Template'de gösterim sırası
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  planTemplate PlanTemplate @relation(fields: [planTemplateId], references: [id], onDelete: Cascade)
  feature      Feature      @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@unique([planTemplateId, featureId])
  @@index([planTemplateId])
  @@index([featureId])
}

model Feature {
  id                   String                  @id @default(uuid()) @db.Uuid
  name                 String                  @unique
  description          String?
  imageUrl             String?
  isActive             Boolean                 @default(true)
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  deletedAt            DateTime?
  isDeleted            Boolean                 @default(false)
  planFeatures         PlanFeature[] // Bu özelliği kullanan planlar
  planTemplateFeatures PlanTemplateFeature[] // Bu özelliği kullanan template'ler
  usages               WorkspaceFeatureUsage[] // Bu özelliğin kullanım kayıtları
}

model PlanPrice {
  id            String       @id @default(uuid()) @db.Uuid
  planId        String       @db.Uuid
  billingCycle  BillingCycle
  amount        Int // Fiyat miktarı (örn: 9999 = 99.99 USD)
  currency      String // Örn: "USD", "EUR"
  description   String? // Opsiyonel, fiyat açıklaması
  stripePriceId String? // Stripe tarafındaki Price ID
  isActive      Boolean      @default(true)
  isDeleted     Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime? // Silinmişse burada tutulur

  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([planId, billingCycle]) // Aynı plan için aynı dönem sadece bir kez tanımlanır
}

model WorkspaceFeatureUsage {
  id               String         @id @default(uuid()) @db.Uuid
  workspaceId      String         @db.Uuid
  officeLocationId String         @db.Uuid // Hangi ofis lokasyonu için kullanım
  featureId        String         @db.Uuid
  usedCount        Int // kaç kez kullandı
  usedAt           DateTime
  workspace        Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  officeLocation   OfficeLocation @relation(fields: [officeLocationId], references: [id], onDelete: Cascade)
  feature          Feature        @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, officeLocationId, featureId, usedAt])
  @@index([workspaceId, featureId])
  @@index([officeLocationId, featureId])
}

model Package {
  id                 String   @id @default(uuid()) @db.Uuid
  steNumber          String // Paketin üzerindeki STE numarası
  workspaceAddressId String   @db.Uuid // Hangi workspace adresine ait
  receivedAt         DateTime // Kargonun sisteme giriş zamanı

  senderName    String? // Gönderen kişi/firma adı
  senderAddress String? // Gönderen adres bilgisi
  carrier       String? // Kargo firması (UPS, FedEx, vs.)

  width      Float? // cm
  height     Float? // cm
  length     Float? // cm
  weightKg   Float? // kg
  volumeDesi Float? // opsiyonel, istersen otomatik hesaplatabilirsin

  photoUrls String[] // Fotoğraf linkleri (örn: S3 URL'leri)
  status    PackageStatus @default(PENDING)

  workspaceAddress WorkspaceAddress @relation(fields: [workspaceAddressId], references: [id], onDelete: Cascade)

  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  actions   PackageAction[] // Paketle ilgili aksiyonlar (forward, shred, vs.)
}

model PackageAction {
  id          String            @id @default(uuid()) @db.Uuid
  packageId   String            @db.Uuid
  type        PackageActionType
  status      ActionStatus // örn: PENDING, IN_PROGRESS, DONE, FAILED
  requestedAt DateTime          @default(now())
  completedAt DateTime?
  updatedAt   DateTime          @updatedAt
  meta        Json? // ilgili aksiyonun detayları
  package     Package           @relation(fields: [packageId], references: [id], onDelete: Cascade)
}

model WorkspaceDeliveryAddress {
  id          String              @id @default(uuid()) @db.Uuid
  type        DeliveryAddressType @default(DELIVERY)
  workspaceId String              @db.Uuid
  label       String // Örn: Ev, Ofis, Yazlık
  addressLine String
  city        String
  state       String
  country     String
  zipCode     String?
  isDefault   Boolean             @default(false)
  workspace   Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime            @default(now())

  @@unique([workspaceId, isDefault], name: "OnlyOneDefaultPerWorkspace") // sadece 1 default adres per workspace
}

model Product {
  id              String           @id @default(uuid()) @db.Uuid
  name            String
  description     String?
  stripeProductId String? // Stripe tarafındaki Product ID
  type            ProductType
  amount          Int
  currency        String
  imageUrl        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  isDeleted       Boolean          @default(false)
  variants        ProductVariant[]
}

model ProductVariant {
  id            String    @id @default(uuid()) @db.Uuid
  productId     String    @db.Uuid
  stripePriceId String? // Stripe tarafındaki Price ID
  name          String
  description   String?
  amount        Int
  currency      String
  imageUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime? // Silinmişse burada tutulur
  isDeleted     Boolean   @default(false)
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Addon {
  id              String         @id @default(uuid()) @db.Uuid
  name            String
  description     String?
  stripeProductId String? // Stripe tarafındaki Product ID
  imageUrl        String?
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deletedAt       DateTime?
  isDeleted       Boolean        @default(false)
  variants        AddonVariant[]
}

model AddonVariant {
  id            String    @id @default(uuid()) @db.Uuid
  addonId       String    @db.Uuid
  name          String
  description   String?
  stripePriceId String? // Stripe tarafındaki Price ID
  price         Int // Fiyat miktarı (örn: 9999 = 99.99 USD)
  currency      String // Örn: "USD", "EUR"
  imageUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime? // Silinmişse burada tutulur
  isDeleted     Boolean   @default(false)
  addon         Addon     @relation(fields: [addonId], references: [id], onDelete: Cascade)
}

model Forms {
  id          String     @id @default(uuid()) @db.Uuid
  userId      String     @db.Uuid
  user        User       @relation(fields: [userId], references: [id])
  formName    String
  formData    Json
  status      FormStatus @default(ACTIVE) // Formun durumu
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime? // Silinmişse burada tutulur
  isActive    Boolean    @default(true) // Form aktif mi?
  isDeleted   Boolean    @default(false) // Form silinmiş mi?
  isCompleted Boolean    @default(false) // Form tamamlandı mı?
}

model Invoice {
  id          String    @id @default(uuid()) @db.Uuid
  workspaceId String    @db.Uuid
  amount      Float?
  currency    String?
  status      String?
  link        String
  userId      String    @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Invitation {
  id          String           @id @default(uuid()) @db.Uuid
  workspaceId String           @db.Uuid
  userId      String           @unique @db.Uuid
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  status      InvitationStatus
  createdAt   DateTime         @default(now())
  approvedAt  DateTime?
  updatedAt   DateTime?        @updatedAt
  deletedAt   DateTime?
  workspace   Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Ticket {
  id          String          @id @default(uuid()) @db.Uuid
  ticketNo    Int             @default(autoincrement())
  userId      String          @db.Uuid
  subject     String
  category    String
  status      TicketStatus    @default(OPEN)
  priority    TicketPriority
  isActivate  Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now())
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    TicketMessage[]
  attachments Attachment[]    @relation("AttachmentToTicket")
  workspaceId String?         @db.Uuid // İsteğe bağlı, eğer ticket bir workspace'e ait ise
  workspace   Workspace?      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model TicketMessage {
  id          String       @id @default(uuid()) @db.Uuid
  ticketId    String       @db.Uuid
  userId      String       @db.Uuid
  message     String
  fromStaff   Boolean
  createdAt   DateTime     @default(now())
  ticket      Ticket       @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments Attachment[] @relation("AttachmentToTicketMessage")
}

model Attachment {
  id            String          @id @default(uuid()) @db.Uuid
  name          String
  url           String
  type          String
  uploadedById  String          @db.Uuid
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  uploadedBy    User            @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  ticket        Ticket[]        @relation("AttachmentToTicket")
  ticketMessage TicketMessage[] @relation("AttachmentToTicketMessage")
}

enum InvitationStatus {
  WAITING
  APPROVED
  CANCELLED
  DELETED
  REJECTED
  OTHER
}

enum DeliveryAddressType {
  DELIVERY
  BILLING
  PICKUP
}

enum PackageStatus {
  PENDING // Yeni geldi, işlenmeyi bekliyor
  IN_PROCESS // Aksiyon bekliyor (forward, shred, vs.)
  COMPLETED // Aksiyonlar tamamlandı
  CANCELLED // İptal edildi / yanlış eşleştirme
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  REOPENED
  ON_HOLD
  WAITING_FOR_CUSTOMER
  WAITING_FOR_STAFF
  WAITING_FOR_THIRD_PARTY
  ESCALATED
  CANCELLED
  CLOSED_BY_CUSTOMER
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
}

enum OrderStatus {
  PAYMENT_PENDING
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
  CANCELLED
  REFUNDED
  ERROR
  PROGRESS_ERROR
  FAILED
}

enum RoleType {
  SUPERADMIN
  ADMIN
  STAFF
  CUSTOMER
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  RESOLVED
  CLOSED
  REOPENED
  ON_HOLD
  WAITING_FOR_CUSTOMER
  WAITING_FOR_STAFF
  WAITING_FOR_THIRD_PARTY
  ESCALATED
  CANCELLED
  CLOSED_BY_CUSTOMER
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskType {
  GENERAL
  LEGAL
  ACCOUNTING
  TAX
  HR
  OTHER
}

enum ProductType {
  SERVICE
  PRODUCT
  OTHER
  ADDON
}

enum PermissionAction {
  CREATE
  READ
  UPDATE
  DELETE
  MANAGE
}

model UserRole {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  role      RoleType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isDeleted Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Permission {
  id            String           @id @default(uuid()) @db.Uuid
  companyUserId String           @db.Uuid
  action        PermissionAction
  subject       String
  conditions    Json?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@unique([companyUserId, action, subject])
  @@map("permissions")
}

enum TransactionStatus {
  SUCCESS
  PENDING
  INPROGRESS
  FAILED
}

enum BillingCycle {
  MONTHLY
  YEARLY
  WEEKLY
  QUARTERLY
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  INVITATION
  OTHER
}

enum PackageActionType {
  FORWARD
  SHRED
  SCAN
  HOLD
  JUNK
}

enum ActionStatus {
  PENDING
  IN_PROGRESS
  DONE
  FAILED
}

enum WorkspaceRole {
  OWNER
  MEMBER
}

enum FormStatus {
  ACTIVE
  INACTIVE
  PENDING
  ARCHIVED
  COMPLETED
  DELETED
}

model Token {
  id        String    @id @default(uuid()) @db.Uuid
  token     String    @unique
  type      TokenType
  createdAt DateTime  @default(now())
  email     String
  expires   DateTime

  @@unique([email, type], name: "unique_email_token_type")
}
